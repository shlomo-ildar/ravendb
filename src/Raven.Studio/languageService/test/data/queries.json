[
    " from 'Products' group by '1' select sum(PricePerUnit) as TotalPrice, count() as ProductsCount ",
    " from 'Users' where @metadata.JobId = $p0 and @metadata.Errored = $p1 ",
    " from index 'AccItems/Spatial' where spatial.within(Distance, spatial.circle($p0, $p1, $p2)) select facet(id('facets/AttributeFacets')) ",
    " from 'Points' where spatial.within(spatial.point(Latitude, Longitude), spatial.wkt($p0)) ",
    " from index 'UsersByNameWithAdditionalSources' where Name = $p0 limit $p1, $p2 ",
    " from 'Users' as u select timeseries(from u.StockPrices between $p0 and $p1) as __timeSeriesQueryFunction0 limit $p2, $p3 ",
    " from index 'EntitiesByLocation' ",
    " from 'Users' where Age = $p0 limit $p1, $p2 ",
    " from index 'MyTsIndex/AllDocs' ",
    " from 'People' as p where id() = $p0 select timeseries(from p.HeartRate between $p1 and $p2 group by '1 Days'  with interpolation(Linear) select max()) as __timeSeriesQueryFunction0 limit $p3, $p4 ",
    " from index 'Simple/Index' limit $p0, $p1 ",
    " from index 'UsersIndexWithStoredArray' as x select { Address : x.Address+\"22\", StoredTennatns : x.StoredTennatns } ",
    " from index 'IndexWithArrowFunctionDynamicParameter' ",
    " from 'Clients' where ((FirstName = $p0 and LastName = $p1) and BirthDate = $p2) and Country = $p3 limit $p4, $p5 ",
    " from index 'test' where Email = $p0 order by Name, score() desc, Age as long ",
    " from index 'Accounts/Search' order by AccountId select AccountId, AccountName, UserName, DesignName ",
    " declare function output(o, _function) {   \tvar _super = _function.AccountsReceivable;   \tvar _var = load(_function.EmployeesIds);   \treturn { Company : _function, Number : _super, Employees : _var.map(function(e){return e.FirstName;}) };   }   from 'Orders' as o load o.Company as _function select output(o, _function) ",
    " from index 'CommitByRevision' where Revision <= $p0 ",
    " from 'TestView2s' as x select { Children : (x.Children!=null?x.Children:[{},{Children:[{},{}]},{Names:[\"john\",\"paul\",\"george\",\"ringo\"]}]) } limit $p0, $p1 ",
    " from 'Teams' where IsYellow = $p0 and IsGreen = $p1 ",
    " from index 'Advice/Search' where search(SearchField, $p0) select facet(id('facets/ArticleFacets')) include Sections limit $p1, $p2 ",
    " from 'OrdersByCompany' limit $p0, $p1 ",
    " from index 'AccommodationsIndex' where exists(ImageUrl) and exists(Categories) and ExistsInLanguage = $p0 ",
    " from 'EntityWithTags' where (Tags = $p0) and (Tags = $p1) ",
    " from index 'Categories/InUse/ByCity' ",
    " from index 'TagsCount' order by Count as long desc limit $p0, $p1 ",
    " from 'Orders' group by Employee, Company order by Count as long select Employee as RenamedEmployee, Company as RenamedCompany, count() ",
    " from 'Debtors' as d select { Name : d.Name, OrderDays : d.OrderDays.filter((function(a){return a.Day!=null;})).reduce(function(_obj, _cur) {_obj[(function(a){return a.Day;})(_cur)] = (function(a){return a.Name;})(_cur);return _obj;}, {}) } ",
    " from 'People' as p select timeseries(from p.HeartRate between $p0 and $p1 select standarddeviation(), min(), max() scale 0.001) as __timeSeriesQueryFunction0 limit $p2, $p3 ",
    " from index 'Companies/ByName/TimeSeries' select Name limit $p0, $p1 ",
    " from 'Users' where LastName = $p0 ",
    " from 'Users' as u select timeseries(from u.Heartrate group by '1 Months'   select average(), max()) as __timeSeriesQueryFunction0 ",
    " from index 'SearchableElements' where PermittedUsers in ($p0) limit $p1, $p2 ",
    " from 'Friends' ",
    " from index 'MapReduceIndexReturningDictionaryWithComplexObjects/MethodSyntax' where search(Address, $p0) ",
    " from index 'TestIndexArraysLastIndexOf' where LastIndexOfOfMyStringArrayWithIndex = $p0 ",
    " from 'Test\\u0006Users' ",
    " from index 'PersonDOBIndex' select facet(BirthDate >= $p1 and BirthDate < $p2, BirthDate >= $p3 and BirthDate < $p4, $p0) ",
    " from index 'LastAccessPerUserDateTimeDefaultIndex' select Name, LastAccess ",
    " from 'Orders' where ShipTo.City = $p0 ",
    " from 'TestClasses' select distinct Value2 ",
    " from index 'OrdersMapReduceIndex' ",
    " from index 'Courses/Search2' where Query = $p0 ",
    " from 'Users' where (Name = $p0 or (Name = $p1 and Name = $p2)) or (Name = $p3 and Name = $p4) ",
    " from index 'ThenByIndex' select SmallestQuantity, LargestQuantity, Aggregate, AggregateWithSeed, AggregateWithSeedAndSelector, Join, GroupJoin, TakeWhile, TakeWhileIndexWithIndex, SkipWhile, SkipWhileIndexWithIndex, LongCount, LongCountWithPredicate ",
    " from 'Orders' group by Lines[].Product select key() as ProductName, count() ",
    " from 'Dogs' where Cute = $p0 limit $p1, $p2 ",
    " from 'Bookings' as x where x.FirstName = $p0 select { Number : toStringWithFormat(x.Number) } ",
    " from 'Users' where boost(Name = $p0, 2) and boost(Name = $p1, 3) and boost(Name = $p2, 4) and boost(Name = $p3, 5) and boost(Name = $p4, 6) ",
    " from index 'TimeoutsIndex' where Owner = $p0 order by Time select Time ",
    " from index 'MapReduceIndexWithNestedField2' ",
    " from 'Builds' as entry where entry.IsPublic = $p0 load entry.TeamCityBuildLocalId as __load select __load.BuildDate ",
    " from index 'DateIndex' where DateTime = $p0 ",
    " from index 'WithDynamicIndex' order by N1_D_Range desc select SongId, NumericAttributes limit $p0, $p1 ",
    " from 'Users' where (((Name = $p0 and Name = $p1) and Name = $p2) or Name = $p3) or Name = $p4 ",
    " from index 'Companies/ByPhone' ",
    " from index 'DocsIndex' order by Id ",
    " from index 'DoubleIndex' select id() as Id, DoubleValue ",
    " from index 'Orders/ByCompany' ",
    " from 'Companies' order by custom(Name, 'CanUseCustomSorterWithOperations_697') desc ",
    " from index 'IndexReturningDictionaryWithComplexObjects/MethodSyntax' where Address_ZipCode = $p0 ",
    " from 'TestViews' as x select { Children : (x.Children!=null?x.Children:[]) } limit $p0, $p1 ",
    " from index 'EntitySpatialIndex2' where spatial.within(Coordinates, spatial.wkt($p0)) ",
    " from index 'MyJSIndex' where NameButDifferentName = $p0 select NewPropertyName, NameButDifferentName ",
    " from index 'User/Index' select NameDictionary, Name, NameArray, LongString limit $p0, $p1 ",
    " from index 'Color/ForSearch' where CreatedDate between $p0 and $p1 select facet(CreatedDate < $p2, CreatedDate >= $p3 and CreatedDate < $p4, CreatedDate >= $p5 and CreatedDate < $p6, CreatedDate >= $p7 and CreatedDate < $p8, CreatedDate >= $p9 and CreatedDate < $p10, CreatedDate >= $p11 and CreatedDate < $p12, CreatedDate >= $p13) as CreatedDate ",
    " from index 'TestIndexArraysLastIndexOf' where LastIndexOfOfMyDoubleArrayWithIndex = $p0 ",
    " from index 'CameraCost' where Zoom > $p0 select facet([NULL TO 2021-07-11T15-14-25.4134306], [2021-07-11T15-14-25.4134306 TO 2021-07-14T15-14-25.4134306], [2021-07-14T15-14-25.4134306 TO 2021-07-21T15-14-25.4134306], [2021-07-21T15-14-25.4134306 TO 2021-07-28T15-14-25.4134306], [2021-07-28T15-14-25.4134306 TO NULL]) ",
    " from index 'User/Entity' where (CreatedDate >= $p0) and (CreatedDate <= $p1) order by CreatedDate ",
    " from index 'Items/Numbers' select id() as Id, Int1, Int2, Double1, Double2, Decimal1, Decimal2, Long1, Long2 ",
    " from index 'CatsAndDogs' order by Name ",
    " from index 'Index' where 'Fields_users/1-A' = $p0 ",
    " from 'People' as p where p.Age > $p0 select timeseries(from p.Heartrate between $p1 and $p2 load Tag as src where (Values[0] <= src.Accuracy)) as __timeSeriesQueryFunction0 limit $p3, $p4 ",
    " from index 'MyIndex' where Status = $p0 ",
    " from index 'PersonByDate' where Date_Hour >= $p0 ",
    " from index 'TracksIndex' order by Title as alphaNumeric desc select Title limit $p0, $p1 ",
    " from index 'Users' limit $p0, $p1 ",
    " from 'Test\\u001bUsers' ",
    " from 'Rations' where Composition[].IngredientId = $p0 ",
    " from 'Users' where (((Name = $p0 and Name = $p1) and Name = $p2) and Name = $p3) and Name = $p4 ",
    " from 'Registrations' limit $p0, $p1 ",
    " declare function output(o, __alias0) {   \tvar update = __alias0;   \treturn { Company : update.Name };   }   from 'Orders' as o load o.Company as __alias0 select output(o, __alias0) ",
    " from 'Users' as x select timeseries(from x.'gas m3 usage' group by '1 Days'   select min(), max()) as __timeSeriesQueryFunction0 limit $p0, $p1 ",
    " from 'Items' where spatial.within(spatial.point(Latitude, Longitude), spatial.circle($p0, $p1, $p2)) order by spatial.distance('spatial.point(Latitude, Longitude)', spatial.point($p3, $p4)) desc ",
    " from 'Users' as customer select { CustomerName : customer.GivenName+\" \"+customer.FamilyName, Phone : Object.keys(customer.Phones).map(function(a){return{Key: a,Value:customer.Phones[a]};}).filter(function(phone){return phone.Key===\"Work\";}) } ",
    " from index 'SampleData/Index' where search(Name, $p0) limit $p1, $p2 ",
    " from index 'FindByLatLng' ",
    " from index 'UsersIndex' select School.Id ",
    " from index 'SampleData/Index' order by Name ",
    " from index 'CameraCost' where Cost < $p0 select facet(id('facets/CameraFacets')) ",
    " from index 'MyMultiMapCounterIndex' ",
    " from index 'IndexReturningDictionaryWithComplexObjects/QuerySyntax' ",
    " from 'TestClasses' select distinct Value ",
    " from index 'PersonDOBIndex' select facet(Children_BirthDate >= '2000-01-01T00:00:00.0000000' and Children_BirthDate < '2009-12-31T00:00:00.0000000', Children_BirthDate >= '2010-01-01T00:00:00.0000000' and Children_BirthDate < '2019-12-31T00:00:00.0000000', $p0) ",
    " from 'People' where id() = $p0 select timeseries(from HeartRate between $p1 and $p2 group by '1 Hours'   select max(), min() scale 0.01) as __timeSeriesQueryFunction limit $p3, $p4 ",
    " from index 'KmGeoIndex' where spatial.within(Location, spatial.circle($p0, $p1, $p2)) limit $p3, $p4 ",
    " from index 'MyIndex' where Year = $p0 and Series = $p1 ",
    " from index 'MyIndex' where search(Name, $p0) limit $p1, $p2 ",
    " from 'Companies' where startsWith(Name, $p0) ",
    " from index 'Cars' where Year = $p0 select facet(Make, avg(Price)) ",
    " from index 'SomeIndex' where Cost between $p0 and $p1 select facet(id('facets/CameraFacets')) ",
    " from index 'Users/ByName' select facet(Name) ",
    " from index 'PeopleIndex14' limit $p0, $p1 ",
    " from index 'Index/With/DynamicBlittableJson/Extension/Methods' ",
    " from index 'AccItems/Attributes' select facet(id('facets/AttributeFacets')) ",
    " from index 'Does_Not_Exist' where FirstName = $p0 ",
    " from index 'CommitByRevision' where Revision > $p0 or Revision <= $p1 ",
    " from 'Users' group by Name where Name = $p0 select key() as Name, count() ",
    " from index 'Index1' where lucene(ExternalId, $p0) and lucene(Name, $p1) ",
    " from 'Claims' where MatchingStatus = $p0 order by ControlNumber limit $p1, $p2 ",
    " from index 'UsersAndProductsByName' where Name = $p0 limit $p1, $p2 ",
    " from 'Orders' where Company = $p0 ",
    " from 'Builds' as entry load entry.TeamCityBuildLocalId as __load select __load ",
    " from 'Users' as x select { CityName : x.user_address.city_name, Foo : \"foo\"+x.Age } ",
    " from index 'PeopleIndex15' limit $p0, $p1 ",
    " from index 'EntityIndex' where (OrganizationId = $p0 and CaseId = $p1) and (CaseId != $p2 or HistoryCode = $p3) ",
    " from 'Cameras' order by Zoom as long ",
    " from index 'TestIndex' where startsWith(Query, $p0) select Query ",
    " from 'People' where Name = $p0 limit $p1, $p2 ",
    " from 'Catalogs' where Type = $p0 ",
    " from index 'MyIndex' where Name = $p0 limit $p1, $p2 ",
    " from 'Users' include AddressId ",
    " from index 'indexes/users/default' select id() as Id ",
    " from 'Users' limit $p0, $p1 ",
    " from index 'TranTestIndex' where search(Trans_en, $p0) ",
    " from 'Companies' where id() != $p0 limit $p1, $p2 ",
    " from index 'RavenDB/3248/TestObject/ByName' ",
    " from index 'CategoriesWithChildrenCount' ",
    " from 'OrderLines' group by ProductName where Name = $p0 select key() as Name, sum(Quantity) as OrderedQuantity ",
    " from 'EdgeCaseValues' where TimeSpanDays = $p0 ",
    " from 'Users' where Name = cmpxchg($p0) and LastName = cmpxchg($p1) ",
    " from 'WithNullableFields' where TheNullableField != $p0 limit $p1, $p2 ",
    " from index 'MapReduceCountersIndex' where CompanyName = $p0 limit $p1, $p2 ",
    " from 'TestDataObjects' where (A in ($p0)) and (Created >= $p1) ",
    " from 'Companies' order by custom(Name, 'CanUseCustomSorter_3102') ",
    " from index 'Orders/All' select facet(Region), facet(Product, sum(Total), sum(Quantity), avg(Total)) ",
    " from index 'Companies/ByContact' select Name, Phone ",
    " from index 'UsersAndCompaniesIndex' limit $p0, $p1 ",
    " from 'Accounts' order by Profile.Name select id() as Id, Profile.Name as Name, Profile.FavoriteColor as FavoriteColor ",
    " from index 'EntityIndex' where ((CaseId != $p0 and OrganizationId = $p1)) and HistoryCode = $p2 ",
    " from 'TestDocuments' as item load item.Categories as categories[] select { Name : item.Name, Nested : categories.map(function(cat){return {cat:cat,name:cat.Name[$p0]};}).map(function(__rvn0){return {__rvn0:__rvn0,name2:__rvn0.cat.Name[$p1]};}).map(function(__rvn1){return {Name:__rvn1.__rvn0.name};}) } limit $p2, $p3 ",
    " from 'Documents' as x where id() = $p0 select { FailedMin : 0, BooleanValue : x.BooleanValue, IntValue : x.IntValue, DecimalValue : x.DecimalValue } limit $p1, $p2 ",
    " from 'Suppliers' ",
    " from index 'MyIdx' order by Foo ",
    " from 'Foos' where Bars.Count = $p0 ",
    " from index 'UserIndex' order by Name limit $p0, $p1 ",
    " from 'Teams' where Developers[].UserId = $p0 ",
    " from index 'AccItems/Spatial' where spatial.within(Distance, spatial.circle($p0, $p1, $p2)) and Bedrooms = $p3 select facet(id('facets/AttributeFacets')) ",
    " from index 'Users/ByName' select Name, Time ",
    " from 'People' as p select timeseries(from p.Heartrate between $p1 and $p2 where (Values[0] > $p0) group by '1 Months'   select average(), max(), min()) as __timeSeriesQueryFunction0 limit $p3, $p4 ",
    " from index 'TaskIndex' select facet(AssigneeId) ",
    " from 'TestDocuments' limit $p0, $p1 ",
    " from index 'CustomersIndex' where lucene(Occupation, $p0) select distinct CustomerId include 'id()' limit $p1, $p2 ",
    " from index 'BlogsForHighlightingTests' where (search(Category, $p0) or search(Title, $p1)) include highlight(Title,18,2),highlight(Category,18,2) ",
    " from index 'Product/AvailableForSale2' where Any = $p0 select facet(id('facets/ProductFacets')) ",
    " from 'Companies' where Name = $p0 limit $p1, $p2 ",
    " from 'Companies' where exact(lucene(ExternalId, $p0)) and lucene(Name, $p1) ",
    " from index 'OrgIndex' ",
    " from index 'EmployeeByRegionAndSalary' where Region = $p0 select facet(id('facets/EmployeeFacets')) ",
    " from 'Users' where search(FirstName, $p0) ",
    " from 'Articles' ",
    " from 'ContractClauses' as __alias0 where __alias0.CompanyId = $p0 order by 'Group', SortOrder as long select id(__alias0) as Id, __alias0.Name, __alias0.'Group', __alias0.SortOrder, __alias0.Description ",
    " from index 'ShortUrlMapIndex' where LongUrl in ($p0) ",
    " from index 'CameraCost' where Cost between $p0 and $p1 select facet(DateOfListing < $p2, DateOfListing > $p3 and DateOfListing < $p4, DateOfListing > $p5 and DateOfListing < $p6, DateOfListing > $p7 and DateOfListing < $p8, DateOfListing > $p9) ",
    " from index 'CameraCost' where DateOfListing > $p0 select facet(id('facets/CameraFacets')) ",
    " from 'MyClasses' select Index, S limit $p0, $p1 ",
    " from index 'Index' where Fields_1-A = $p0 ",
    " from index 'Client/ImportSummaryByDate/4' order by Date ",
    " from index 'StudentIndex' ",
    " from index 'Toss/TagPerDay' ",
    " from index 'Answers/ByAnswerEntity' where search(Content, $p0) order by Content limit $p1, $p2 ",
    " from index 'Users' ",
    " from 'Orders' group by Lines[].Product, Lines[].Quantity select Lines[].Product as ProductName, Lines[].Quantity as Quantity, count() ",
    " from index 'DateTime' where TimeOfDay != $p0 ",
    " from index 'test' where Email = $p0 order by Name, score(), Age as long ",
    " from index 'SampleIndex' as r load r.IdOtherEnt as other select { Id : id(r), NameOtherEnt : other.Name, PropBase : r.PropBase, Prop1 : r.Prop1, Prop2 : r.Prop2, Str : r.Str } ",
    " from 'Users' order by id() ",
    " from 'Points' where spatial.within(spatial.point(Latitude, Longitude), spatial.wkt($p0, 'Kilometers')) ",
    " from index 'UsersByName' where Name = $p0 limit $p1, $p2 ",
    " from 'Tags' order by Name ",
    " from 'People' as p where id() = $p0 select timeseries(from p.HeartRate between $p1 and $p2 group by '1 Hours'   select max(), min() scale 0.01) as __timeSeriesQueryFunction0 limit $p3, $p4 ",
    " from 'DictItems' where NumericDict.1 = $p0 ",
    " from index 'TestIndex1' ",
    " from index 'UsersByName' limit $p0, $p1 ",
    " from 'Dummies' where Name = $p0 ",
    " from 'PersonAndDates' where Date.Ticks > $p0 ",
    " from index 'TestIndexArraysLastIndexOf' where LastIndexOfOfMyStringArrayWithIndexWithCount = $p0 ",
    " declare function output(doc, person) {   \tvar occupations = doc.UncoveredOccupationInfos.map(function(y){return load(y.Occupation.DocumentId);});   \tvar projects = doc.UncoveredProjectInfos.map(function(y){return load(y.Project.DocumentId);});   \tvar publications = doc.UncoveredPublicationInfos.map(function(y){return load(y.Publication.DocumentId);});   \tvar classifications = publications.map(function(y){return load(y.Classification.DocumentId);});   \tvar mentorshipsRunning = doc.UncoveredRunningMentorshipInfos.map(function(y){return load(y.Mentorship.DocumentId);});   \tvar mentorshipsFinalized = doc.UncoveredFinalizedMentorshipInfos.map(function(y){return load(y.Mentorship.DocumentId);});   \tvar mentorshipsDissertation = doc.UncoveredDissertationInfos.map(function(y){return load(y.Mentorship.DocumentId);});   \treturn { IndexId : id(doc).split(new RegExp(\"/\", \"g\")).slice(-1)[0], IsPublic : doc.IsPublic, IsConfirmed : doc.IsConfirmedEst, IsConfirmedEng : doc.IsConfirmedEng, HasPublicDataEst : doc.UserHasPublicDataEst, HasPublicDataEng : doc.UserHasPublicDataEng, PersonId : id(doc.Person).toString(), PersonName : person.Name, Occupations : doc.UncoveredOccupationInfos.map(function(occ){return {DocumentId:occ.Occupation.Id.toString(),Period:load(occ.Occupation.DocumentId).Period,IsActive:load(occ.Occupation.DocumentId).IsActive,IsPublicEst:occ.IsPublic,IsPublicEng:occ.IsEngPublic,DisplayString:load(occ.Occupation.DocumentId).DisplayString,DisplayStringEng:load(occ.Occupation.DocumentId).DisplayStringEng};}), Projects : doc.UncoveredProjectInfos.map(function(pr){return {DocumentId:pr.Project.Id.toString(),IsPublicEst:pr.IsPublic,IsPublicEng:pr.IsEngPublic,DisplayString:load(pr.Project.DocumentId).DisplayInfoEst,DisplayStringEng:load(pr.Project.DocumentId).DisplayInfoEng,IsActive:load(pr.Project.DocumentId).IsActive,EndDate:load(pr.Project.DocumentId).General.EndDate,PeriodIsActive:load(pr.Project.DocumentId).General.ProjectPeriod.IsActive};}), Publications : doc.UncoveredPublicationInfos.map(function(pr){return {DocumentId:pr.Publication.Id.toString(),IsPublicEst:pr.IsPublic,IsPublicEng:pr.IsEngPublic,DisplayString:load(pr.Publication.DocumentId).DisplayInfoHtml,DisplayStringEng:load(pr.Publication.DocumentId).DisplayInfoHtmlEng,PublishingYear:load(pr.Publication.DocumentId).PublishingYear,IsActive:load(pr.Publication.DocumentId).IsActive,ClassificationCode:load(pr.Publication.DocumentId).Classification!=null?load(load(pr.Publication.DocumentId).Classification.DocumentId).Code:\"\",ClassificationCodeName:load(pr.Publication.DocumentId).Classification!=null?load(load(pr.Publication.DocumentId).Classification.DocumentId).FullName:\"\",ClassificationCodeNameEng:load(pr.Publication.DocumentId).Classification!=null?load(load(pr.Publication.DocumentId).Classification.DocumentId).FullNameEng:\"\"};}), Mentorships : doc.UncoveredRunningMentorshipInfos.map(function(ms){return {DocumentId:ms.Mentorship.Id.toString(),IsPublicEst:ms.IsPublic,IsPublicEng:ms.IsEngPublic,DisplayString:load(ms.Mentorship.DocumentId).DisplayInfoEst,DisplayStringEng:load(ms.Mentorship.DocumentId).DisplayInfoEng,IsActive:load(ms.Mentorship.DocumentId).IsActive,Degree:load(ms.Mentorship.DocumentId).Degree,DefenceYear:load(ms.Mentorship.DocumentId).DefenceYear};}), MentorshipsFinalized : doc.UncoveredFinalizedMentorshipInfos.map(function(ms){return {DocumentId:ms.Mentorship.Id.toString(),IsPublicEst:ms.IsPublic,IsPublicEng:ms.IsEngPublic,DisplayString:load(ms.Mentorship.DocumentId).DisplayInfoEst,DisplayStringEng:load(ms.Mentorship.DocumentId).DisplayInfoEng,IsActive:load(ms.Mentorship.DocumentId).IsActive,Degree:load(ms.Mentorship.DocumentId).Degree,DefenceYear:load(ms.Mentorship.DocumentId).DefenceYear};}), MentorshipsDissertation : doc.UncoveredDissertationInfos.map(function(ms){return {DocumentId:ms.Mentorship.Id.toString(),IsPublicEst:ms.IsPublic,IsPublicEng:ms.IsEngPublic,DisplayString:load(ms.Mentorship.DocumentId).DisplayInfoEst,DisplayStringEng:load(ms.Mentorship.DocumentId).DisplayInfoEng,IsActive:load(ms.Mentorship.DocumentId).IsActive,Degree:load(ms.Mentorship.DocumentId).Degree,DefenceYear:load(ms.Mentorship.DocumentId).DefenceYear};}) };   }   from 'PersonProfileDocuments' as doc where id() = $p0 load doc.Person.DocumentId as person select output(doc, person) limit $p1, $p2 ",
    " from index 'OperationDoc/Index' where Quantity >= $p0 ",
    " from 'ToDoTasks' group by DueDate, Completed where Completed = $p0 select DueDate, count() as TasksPerDate ",
    " from index 'WeeklyStatsIndex' order by WeeksPlays as long desc include AudioId ",
    " from 'Tracks' order by Title as alphaNumeric select Title ",
    " from 'Test\\vUsers' ",
    " declare function output(item) {   \tvar prices = Object.map(item.PriceConfig, function(v, k){ return {Price:v.Item1,Quantity:v.Item2};});   \treturn { Name : item.Name, Prices : prices };   }   from index 'TestDocumentByName' as item select output(item) ",
    " from index 'BBoxIndex' where spatial.intersects(Shape, spatial.wkt($p0)) limit $p1, $p2 ",
    " from 'Dogs' where exists(Awards) ",
    " from 'Bookings' as x where x.FirstName = $p0 select { Number : toStringWithFormat(x.Number, \"000\", \"en-US\") } ",
    " from index 'MyIndex' where Company = $p0 select facet(EmployeeByDay) include EmployeeByDay.Employee ",
    " from 'Homes' as page where id() = $p0 load $p1 as hero select { page : page, Hero : hero } ",
    " from index 'StatusIndex' where id() = $p0 limit $p1, $p2 ",
    " from 'Companies' where lucene(Name, $p0) ",
    " from 'OtherDocuments' ",
    " from 'BlogPosts' where id() in ($p0) ",
    " from 'People' where Name in ($p0) ",
    " from 'Users' group by Name, LastName where search(LastName, $p0) select Name, LastName, count() ",
    " from 'Users' select Age as Id, Name limit $p0, $p1 ",
    " from 'Orders' as o load $p0 as config select { OrderId : id(o), CustomerName : o.CustomerName, OrderItems : o.OrderItems.map(function(i){return {ItemId:i.ItemId,Price:i.Price,Currency:config.Currency};}) } ",
    " from 'Users' where LastName = $p0 select Name, \"Bob\" as Friend, 79 as Age ",
    " from 'Posts' group by Comments.Length select count(), key() as CommentsLength ",
    " from index 'TestIndex' where FirstName = $p0 or LastName = $p1 ",
    " from index 'Foos/TestDynamicQueries' where ((Bar_SomeDictionary_Key = $p0 and Bar_SomeDictionary_Value = $p1) or (Bar_SomeOtherDictionary_Key = $p2 and Bar_SomeOtherDictionary_Value = $p3)) or Bar = $p4 ",
    " from index 'SearchIndex' where PostStatus = $p0 limit $p1, $p2 ",
    " from index 'Users/ByName' where Name = $p0 or LastName = $p1 ",
    " from index 'Index' where id() = $p0 and Tokens = $p1 limit $p2, $p3 ",
    " from index 'Index1' select CurrentName, PreviousName ",
    " from index 'MixedSelectWithAnonymusAndDictionary' ",
    " from 'Users' where exact(Name = $p0) and search(LastName, $p1) limit $p2, $p3 ",
    " from 'Users' where @metadata.'Test-Property-1' = $p0 ",
    " declare function output(result) {   \tvar children = load(result.Children.map((function(x){return id(x);})));   \treturn { ChildNames : children.map(function(x){return x.Name;}) };   }   from 'Documents' as result where id() = $p0 select output(result) ",
    " from index 'Orders/All' select facet(At, max(Total), min(Total)) ",
    " from 'Documents' as x select { HasTags : x.Tags.length > 0, OriginalData : x.Tags, FilteredData : x.Tags.filter(function(t){return t!=null;}), All : x.Tags.every(function(s){return s!==\"a\";}), Select : x.Tags.map(function(t){return t+\",\";}), Sum : x.Tags.map(function(t){return t.Length;}).reduce(function(a, b) { return a + b; }, 0), Where : x.Tags.filter(function(t){return t!=null;}), Contains : x.Tags.indexOf(\"a\")>=0, ToList : x.Tags.map(function(t){return t+\",\";}), Concat : x.Tags.concat([\"a\"]), Avg : x.Tags.map(function(s){return s.Length;}).reduce(function(a, b) { return a + b; }, 0)/(x.Tags.length||1), Max : x.Tags.map(function(s){return s.Length;}).reduce(function(a, b) { return Raven_Max(a, b);}), Min : x.Tags.map(function(s){return s.Length;}).reduce(function(a, b) { return Raven_Min(a, b);}), StrMax : x.Tags.reduce(function(a, b) { return Raven_Max(a, b);}), Count : x.Tags.length, ToDictionary : x.Tags.reduce(function(_obj, _cur) {_obj[(function(t){return t.Length;})(_cur)] = _cur;return _obj;}, {}), Reverse : x.Tags.slice().reverse(), Distinct : Array.from(new Set(x.Tags)) } limit $p0, $p1 ",
    " from index 'Index1' where exact(lucene(ExternalId, $p0)) and lucene(Name, $p1) ",
    " from index 'Contract/ToContractListViewModel' where DetailsId in ($p0) select Cno, DetailsId, Grade, id() as Id ",
    " from index 'Foos' where Facet1 = $p0 and Facet1 = $p1 select facet(id('Facets')) ",
    " from 'Bookings' as x where x.FirstName = $p0 select { Number : toStringWithFormat(x.Number, \"en-US\") } limit $p1, $p2 ",
    " from index 'Movies/ByActor' where lucene(Name, $p0) ",
    " from index 'SpatialIdx' where spatial.within(Coordinates, spatial.circle($p0, $p1, $p2)) ",
    " from index 'FooIndex' limit $p0, $p1 ",
    " from 'WrapperClasses' where offspring[].n = $p0 limit $p1, $p2 ",
    " from index 'ProviderSearchIndex2' where (Name = $p0) and (Categories_Name = $p1) ",
    " from index 'eventsByLatLng' order by spatial.distance(Coordinates, spatial.point($p0, $p1)) ",
    " from 'Users' where Count = $p0 order by Count as long ",
    " from index 'Orders/ByShipment/Location' where id() = $p0 order by spatial.distance(ShipmentLocation, spatial.point($p1, $p2)) limit $p3, $p4 ",
    " from index 'Companies/CompanyByType' order by Type ",
    " from index 'QuadTreeIndex' where spatial.intersects(Shape, spatial.wkt($p0)) limit $p1, $p2 ",
    " from index 'IndexName' where endsWith(Name, $p0) ",
    " from index 'IndexName' where Name between $p0 and $p1 ",
    " from 'Bunnies' where id() != $p0 ",
    " from index 'PersonsAnalyzed' where search(Name, $p0) limit $p1, $p2 ",
    " from index 'test' select suggest(Name, $p0, $p1) ",
    " from 'People' where Name = $p0 and AddressId = $p1 ",
    " from index 'CameraCost' where Manufacturer = $p0 select facet(Manufacturer), facet(Cost <= $p1, Cost between $p2 and $p3, Cost between $p4 and $p5, Cost between $p6 and $p7, Cost >= $p8), facet(Megapixels <= $p9, Megapixels between $p10 and $p11, Megapixels between $p12 and $p13, Megapixels >= $p14) ",
    " from index 'TestIndexArraysLastIndexOf' where LastIndexOfOfMyFloatArrayWithIndex = $p0 ",
    " with {from 'Foos'} as Foo   match (Foo)-[Bars as _]->(Bars as Bar) limit $p0, $p1 ",
    " from index 'CameraCost' where DateOfListing > $p0 select facet(Manufacturer), facet(Cost <= $p1, Cost between $p2 and $p3, Cost between $p4 and $p5, Cost between $p6 and $p7, Cost >= $p8), facet(Megapixels <= $p9, Megapixels between $p10 and $p11, Megapixels between $p12 and $p13, Megapixels >= $p14) ",
    " from index 'GameServers/ConnectedPlayers' where startsWith(PlayerName, $p0) order by id(), PlayerName select id() as Id, PlayerName, ConnectedOn, ServerName ",
    " from 'Companies' where Contacts[].FirstName = $p0 ",
    " from index 'someIndex' where startsWith(Query, $p0) ",
    " from index 'RecurseIndexWithHashSet' ",
    " from index 'Cars' where Year = $p0 select facet(Make) ",
    " from index 'SampleData/Index' select facet(StringAge) ",
    " from 'Users' where (true and not (Name = $p0 or Name = $p1)) ",
    " from index 'Cars' where Year = $p0 select facet(Make, sum(Price)) ",
    " from 'People' as p where id() = $p0 select timeseries(from p.HeartRate between $p1 and $p2 group by '1 Minutes'  with interpolation(Nearest) select max()) as __timeSeriesQueryFunction0 limit $p3, $p4 ",
    " from index 'DataIndex' where moreLikeThis($p1, $p0) ",
    " from 'Foos' ",
    " from index 'Index/test1' ",
    " from index 'Orders/Search' where Query = $p0 ",
    " from 'People' where Filter in ($p0) ",
    " from index 'BlogPosts/PostsCountByTag' ",
    " from index 'AdviceSearch' where Sections = $p0 and search(SearchField, $p1) select facet(id('facets/ArticleFacets')) include Sections ",
    " from 'OrderSiteInstalls' limit $p0, $p1 ",
    " from 'Companies' order by Name select id() as Id ",
    " from 'Users' where Age > $p0 select timeseries(from Heartrate between $p2 and $p3 where (Tag == $p1)) as __timeSeriesQueryFunction limit $p4, $p5 ",
    " from index 'Leads/Index' where Status_Value != $p0 ",
    " declare function output(x) {   \tvar elements = x.Elements.map(function(a){return a.Decimal;});   \tvar values = x.Values;   \tvar generated = x.Elements.reduce(function(_obj, _cur) {_obj[(function(a){return a.Name;})(_cur)] = (function(a){return a.Decimal;})(_cur);return _obj;}, {});   \treturn { TestDictionary1 : values, TestDictionary2 : x.Values, TestDictionaryDirectAccess1 : Object.keys(x.Values).length, TestDictionaryDirectAccess2 : Object.keys(x.Values), TestDictionaryDirectAccess4 : Object.keys(x.Values).map(function(a){return x.Values[a];}), TestDictionarySum1 : Object.keys(values).map(function(a){return{Key: a,Value:values[a]};}).map(function(a){return a.Value;}).reduce(function(a, b) { return a + b; }, 0), TestDictionarySum2 : Object.keys(x.Values).map(function(a){return{Key: a,Value:x.Values[a]};}).map(function(a){return a.Value;}).reduce(function(a, b) { return a + b; }, 0), TestDictionarySum3 : Object.keys(x.Values).map(function(a){return x.Values[a];}).reduce(function(a, b) { return a + b; }, 0), TestDictionaryAverage1 : Object.keys(values).map(function(a){return{Key: a,Value:values[a]};}).map(function(a){return a.Value;}).reduce(function(a, b) { return a + b; }, 0)/(Object.keys(values).length||1), TestDictionaryAverage2 : Object.keys(x.Values).map(function(a){return{Key: a,Value:x.Values[a]};}).map(function(a){return a.Value;}).reduce(function(a, b) { return a + b; }, 0)/(Object.keys(x.Values).length||1), TestDictionaryAverage3 : Object.keys(x.Values).map(function(a){return x.Values[a];}).reduce(function(a, b) { return a + b; }, 0)/(Object.keys(x.Values).map(function(a){return x.Values[a];}).length||1), TestDictionaryFunc1 : Object.keys(x.Values).length, TestDictionaryFunc2 : Object.map(x.Values, function(v, k){ return v;}), TestGeneratedDictionary1 : generated, TestGeneratedDictionary2 : x.Elements.reduce(function(_obj, _cur) {_obj[(function(a){return a.Name;})(_cur)] = (function(a){return a.Decimal;})(_cur);return _obj;}, {}), TestGeneratedDictionary3 : Object.keys(generated).length, TestGeneratedDictionarySum1 : Object.keys(generated).map(function(a){return{Key: a,Value:generated[a]};}).map(function(a){return a.Value;}).reduce(function(a, b) { return a + b; }, 0), TestGeneratedDictionarySum2 : Object.keys(x.Elements.reduce(function(_obj, _cur) {_obj[(function(a){return a.Name;})(_cur)] = (function(a){return a.Decimal;})(_cur);return _obj;}, {})).map(function(a){return{Key: a,Value:x.Elements.reduce(function(_obj, _cur) {_obj[(function(a){return a.Name;})(_cur)] = (function(a){return a.Decimal;})(_cur);return _obj;}, {})[a]};}).map(function(a){return a.Value;}).reduce(function(a, b) { return a + b; }, 0), TestGeneratedDictionaryAverage1 : Object.keys(generated).map(function(a){return{Key: a,Value:generated[a]};}).map(function(a){return a.Value;}).reduce(function(a, b) { return a + b; }, 0)/(Object.keys(generated).length||1), TestGeneratedDictionaryAverage2 : Object.keys(x.Elements.reduce(function(_obj, _cur) {_obj[(function(a){return a.Name;})(_cur)] = (function(a){return a.Decimal;})(_cur);return _obj;}, {})).map(function(a){return{Key: a,Value:x.Elements.reduce(function(_obj, _cur) {_obj[(function(a){return a.Name;})(_cur)] = (function(a){return a.Decimal;})(_cur);return _obj;}, {})[a]};}).map(function(a){return a.Value;}).reduce(function(a, b) { return a + b; }, 0)/(Object.keys(x.Elements.reduce(function(_obj, _cur) {_obj[(function(a){return a.Name;})(_cur)] = (function(a){return a.Decimal;})(_cur);return _obj;}, {})).length||1), TestGeneratedDictionaryDirectAccess1 : Object.keys(generated), TestGeneratedDictionaryDirectAccess2 : Object.keys(generated).map(function(a){return generated[a];}), TestGeneratedDictionaryDirectAccess3 : Object.keys(generated).length, TestList1 : elements.reduce(function(a, b) { return a + b; }, 0), TestList2 : x.Elements.map(function(a){return a.Decimal;}).reduce(function(a, b) { return a + b; }, 0), TestList3 : x.Elements.map(function(a){return a.Decimal;}).reduce(function(a, b) { return a + b; }, 0), TestList4 : x.Elements.map(function(a){return a.Decimal;}).reduce(function(a, b) { return a + b; }, 0)/(x.Elements.length||1), TestList5 : x.Elements.map(function(a){return a.Decimal;}).reduce(function(a, b) { return a + b; }, 0)/(x.Elements.map((function(a){return a.Decimal;})).length||1) };   }   from 'Articles' as x select output(x) ",
    " from 'People' where Pets in ($p0) ",
    " from index 'Posts/ByTitleAndDesc' where moreLikeThis(id() = $p1, $p0) ",
    " from 'OrderItems' select distinct * ",
    " from 'Users' select Name ",
    " from index 'MyIndex' where Count > $p0 ",
    " from index 'test' where AccountId = $p0 ",
    " declare function output(u) {   \tvar detailId = \"details/1-A\";   \tvar name = u.Name;   \tvar detail = load(detailId);   \treturn { Name : name, DetailId : detailId, Detail : detail };   }   from 'Users' as u select output(u) ",
    " from index 'MyIndex' as a load a.UdcId as udc select { Id : id(udc), UdcId : a.UdcId } ",
    " from 'DataResults' where State = $p0 ",
    " from 'Companies' limit $p0, $p1 ",
    " from index 'RecurseIndexWithArray' ",
    " from 'Companies' order by custom(Name, 'CanOverrideCustomSorter_402') desc ",
    " from index 'Users/ByDisplayNameReversed2' where Chars = $p0 ",
    " from index 'Orders/All' select facet(Product, max(Total)) as ProductMax, facet(Product) as ProductMin ",
    " from 'Users' include timeseries('StockPrices@By6Hours', null,null) limit $p0, $p1 ",
    " from 'Users' where search(Name, $p0) limit $p1, $p2 ",
    " from index 'FooByBar' where search(Bar, $p0) ",
    " from 'Blogs' order by SortWeight as long ",
    " from 'Orders' group by Array(Lines[].Product), Array(Lines[].Quantity) order by Count select Lines[].Product as Products, Lines[].Quantity as Quantities, count() ",
    " from 'Items' where Names in ($p0) or Value = $p1 ",
    " declare function output(a) {   \tvar udc = \"foo\";   \treturn { Long : a.Long, Double : a.Double };   }   from index 'MyIndex' as a select output(a) ",
    " from 'Test\\aUsers' ",
    " from index 'test' limit $p0, $p1 ",
    " from index 'IndexName' where exact(Name = $p0) ",
    " from 'Users' select user_address.city_name as CityName ",
    " from index 'DataSetIndex' order by Split_N1_D_Range desc select SongId, Title, Interpret, Year, Attributes, SID, SetId limit $p0, $p1 ",
    " from 'DomainModels' ",
    " from index 'MyMultiMapTsIndex' ",
    " from index 'Product/Search' where search(Name, $p0) or boost(Category in ($p1), 0) order by score(), PricePerUnit as double desc limit $p2, $p3 ",
    " from 'GeekPeople' where (exists(FavoritePrimes) and not search(FavoritePrimes, $p0, and)) ",
    " from index 'DocumentIndex' as x load x.DocumentId as doc select { Id : id(doc), Name : doc.Name, ExtraProperty : doc.ExtraProperty } ",
    " from index 'Companies/ByNameExact' where Names in ($p0) limit $p1, $p2 ",
    " from 'Foos' order by Grade as double ",
    " from index 'Posts/Statistics/GroupByNull' ",
    " from index 'Products' select facet(id('facets/Products')) limit $p0, $p1 ",
    " from 'Users' where NestedItems[].Key = $p0 and NestedItems[].Name = $p1 ",
    " from index 'Booking/ByConsultantId' ",
    " from index 'CommitByRevision' where Revision >= $p0 and Revision < $p1 ",
    " from index 'User/Entity' where startsWith(Name, $p0) ",
    " from index 'StatusIndex' where StatusOverridden = $p0 and Status = $p1 and id() = $p2 limit $p3, $p4 ",
    " from index 'SampleData/Index' select facet(IntegerAge) ",
    " from index 'TestIndexArraysContainsAndIndexOf' where IndexOfOfMyDoubleArrayWithIndexWithCount = $p0 ",
    " from index 'MessageIndex' where (id() = $p0) and (Recipients_HasRead = $p1 and Recipients_To = $p2) limit $p3, $p4 ",
    " from index 'Posts/Statistics/GroupByNumber' ",
    " from index 'Orders/ByProductAndCount/MethodSyntax' order by Count as long ",
    " from index 'CameraCost' where Zoom > $p0 ",
    " from 'Core/Order' ",
    " from index 'MyIndex' where MyProperty in ($p0) ",
    " from 'Xyzs' ",
    " from index 'test' where (search(Tags, $p0) or search(Users, $p1)) ",
    " from index 'RecurseIndexWithSortedSet' ",
    " from index 'TicketTimerIndex' where LocationId in ($p0) and CriticalDate != $p1 and CriticalDate < $p2 select LocationId, DateUpdated, CriticalDate ",
    " from index 'Orders/Totals' ",
    " from 'Users' where startsWith(id(), $p0) order by Name, LastName ",
    " from index 'PersonAndAddressIndex' ",
    " from 'DictItems' where StringDict.'c c' = $p0 ",
    " from index 'Student/ByName' where FirstName = $p0 or LastName = $p1 order by score(), LastName ",
    " from 'MyDailyInvoices' limit $p0, $p1 ",
    " from 'Users' as u where u.LastName = $p0 load $p1 as detail select { Name : u.Name, Detail : detail } ",
    " from index 'SpatialIndex' where spatial.within(Coordinates, spatial.circle($p0, $p1, $p2)) order by spatial.distance(Coordinates, spatial.wkt($p3)) ",
    " from index 'SomeClassIndex' where (Culture = $p0 and (true and not (ModelId = $p1))) or CatalogId = $p2 ",
    " from 'Documents' limit $p0, $p1 ",
    " from 'Orders' order by ShipTo.Country select distinct ShipTo.Country limit $p0, $p1 ",
    " from index 'CategoryIndex' where search(Name, $p0) order by Name select Name ",
    " from index 'PersonsIndex' where Name = $p0 limit $p1, $p2 ",
    " from index 'UsersReducedByName' where Count = $p0 limit $p1, $p2 ",
    " declare function output(document) {   \tvar status = load((id(document)+\"/status\"));   \tvar overriddenStatus = status!=null&&status.OverriddenStatus!==\"NotSet\";   \treturn { Id : id(document), Status : overriddenStatus?status.OverriddenStatus:document.Status, StatusOverridden : overriddenStatus&&status.OverriddenStatus!==document.Status };   }   from 'Documents' as document select output(document) limit $p0, $p1 ",
    " from index 'CommitByRevision' where Revision > $p0 ",
    " from index 'Product/Sales/ByMonth' where Count = $p0 ",
    " from 'TestDocs' as __alias0 select __alias0.'Offset' ",
    " from index 'EntitySpatialIndex' where spatial.within(Coordinates, spatial.circle($p0, $p1, $p2, 'Kilometers'), 0.01) ",
    " from index 'DecimalAggregationMap' select Total limit $p0, $p1 ",
    " from index 'PersonsIndex' ",
    " from 'Users' as u select { Name : (u.Name!=null?u.Name:\"\") } ",
    " from index 'FindByLatLng' where spatial.within(Coordinates, spatial.circle($p0, $p1, $p2)) ",
    " from 'Providers' where (Name = $p0) and (Categories[].Name = $p1) and (PracticeOffices[].Name = $p2) ",
    " from 'Addresses' group by City where TotalCount = $p0 select key() as City, count() as TotalCount ",
    " from index 'TransportsIndex' order by TransportId ",
    " from index 'CarIndex' where Cars_LeaseHistory_Id = $p0 limit $p1, $p2 ",
    " from 'EdgeCaseValues' where TimeSpanMinutes = $p0 ",
    " from index 'Appointments/Index' where ProductIds in ($p0) ",
    " from 'Users' select Name limit $p0, $p1 ",
    " from 'MultiOrders' as x select { OrderedBy : x.Info.sort(function (a, b){ return a.Address.ZipCode - b.Address.ZipCode;}) } limit $p0, $p1 ",
    " from 'OrderLines' group by ProductName order by TotalQuantity as long select key() as NameOfProduct, sum(Quantity) as TotalQuantity ",
    " declare function output(x) {   \tvar test = x.Value===\"Value1\";   \treturn { ShouldBeTrue : test };   }   from 'Articles' as x select output(x) ",
    " from 'Clients' where (((FirstName != $p0 and LastName = $p1)) and BirthDate = $p2) and Country = $p3 ",
    " from index 'Companies/ByName' where exact(Name = $p0) ",
    " from index 'MyClass/ByIndex' select Index, Prop1 ",
    " from 'EventsWithDates' where Events[].Key in ($p0) ",
    " from index 'TestIndexArraysContainsAndIndexOf' where ContainsOfMyShortArray = $p0 ",
    " from '@all_docs' limit $p0, $p1 ",
    " from 'MyDocs' as d order by id() select { HasValue : d.NullableInt != null } ",
    " declare function output(o, __alias0) {   \tvar update = __alias0;   \tvar include = load(o.Employee);   \treturn { Company : update.Name, Employee : include.FirstName };   }   from 'Orders' as o load o.Company as __alias0 select output(o, __alias0) ",
    " from index 'Companies/ByName' where Name = $p0 ",
    " from index 'BigIndexOutput/WithDictionaryUsage' ",
    " from 'People' where id() = $p0 select timeseries(from HeartRate first 90 Seconds group by '10 Seconds'   select average()) as __timeSeriesQueryFunction limit $p1, $p2 ",
    " from 'Companies' as c where id() = $p0 select timeseries(from c.StockPrices group by '7 Days'   select average()) as __timeSeriesQueryFunction0 limit $p1, $p2 ",
    " from index 'test' order by Name, Name select distinct Name limit $p0, $p1 ",
    " from index 'CommitByRevision' where Revision between $p0 and $p1 ",
    " from index 'Document/Index' ",
    " from index 'Buyers/Search' where IsActive = $p0 order by NameForSorting ",
    " from 'Entities' select id() as Id, Category.Title as CategoryTitle limit $p0, $p1 ",
    " from index 'MyJSIndex' where NameButDifferentName = $p0 select NewPropertyName, NameButDifferentName limit $p1, $p2 ",
    " from index 'PersonsIndex' where Name = $p0 select facet(Age) limit $p1, $p2 ",
    " from 'Users' select Age, Email ",
    " from 'Foos' where Data > $p0 select id() as FooId, Data ",
    " from 'Blogs' where Title = $p0 order by Category limit $p1, $p2 ",
    " from index 'Date' where Date = $p0 ",
    " from index 'MyIndex' where IsSecond = $p0 ",
    " from index 'Posts/Statistics/GroupByString' ",
    " from 'Outers' where Inner.Flag = $p0 limit $p1, $p2 ",
    " from 'Companies' include cmpxchg('ExternalId') ",
    " from index 'Index' select Values, Bars limit $p0, $p1 ",
    " from index 'OperationDoc/Index' where Quantity < $p0 ",
    " from 'Customers' limit $p0, $p1 ",
    " from 'OrderLines' group by ProductName where OrderedQuantity = $p0 select key() as NameOfProduct, sum(Quantity) as OrderedQuantity ",
    " from index 'NamedSpatialFieldIndex' where spatial.within(Location, spatial.circle($p0, $p1, $p2)) ",
    " from index 'test' order by Name, Name select distinct Name ",
    " from index 'ResourceViewModels/ByTag' ",
    " from 'Bunnies' where id() in ($p0) ",
    " from index 'TestIndex' where intersect(search(Description, $p0), Name = $p1)  ",
    " from index 'AccItems/Spatial' where spatial.within(Distance, spatial.circle($p0, $p1, $p2)) ",
    " from index 'IndexName' where startsWith(Name, $p0) ",
    " from index 'Companies/ByName' include explanations($p0) ",
    " from 'EdgeCaseValues' where TimeSpanMaxVal = $p0 ",
    " from index 'CommitByRevision' where Revision >= $p0 ",
    " from 'Dummies' where Boolean = $p0 or Object != $p1 ",
    " from index 'EntityIndex' where CaseId != $p0 or (OrganizationId = $p1 and HistoryCode = $p2) ",
    " from 'MyNewProfitsReferences' limit $p0, $p1 ",
    " from 'Foos' where Name in ($w0p0) ",
    " from 'Employees' where id() = $p0 ",
    " from 'Documents' as d select { Id : id(d), Targets : d.Targets.filter(function(x){return Object.keys($p0).length===0||$p1.hasOwnProperty(x);}) } ",
    " from index 'MultiMapReduceIndexWithNestedField' ",
    " from 'WithIntegers' where Sequence between $p0 and $p1 ",
    " from 'Orders' where Employee = $p0 select Employee, ShipTo.Country as Country, ShipTo.City as City ",
    " from index 'Product/Search' ",
    " from index 'TestIndex' where intersect(Name = $p0, search(Description, $p1))  ",
    " from index 'PropertiesSearchIndex' where BookingRequests_StartDay >= $p0 and BookingRequests_EndDay <= $p1 ",
    " from index 'CameraCost' select facet(avg(Cost), sum(Cost), max(Cost), min(Cost)) ",
    " from 'MobaroLocations' select timeseries(from DispatchEntries group by '1 Months'   select sum(), count()) as DispatchEntries, id() as LocationId, Name as LocationName ",
    " from index 'CameraCost' select facet(Manufacturer, $p0) ",
    " from index 'ContentSearchIndex' where boost(search(Slug, $p3), 15) or boost(search(Title, $p4), 12) or search(Content, $p5) include highlight(Title,128,2,$p0),highlight(Slug,128,2,$p1),highlight(Content,128,2,$p2) ",
    " from 'Users' order by random('seed2') ",
    " from index 'MyIndex' where Count = $p0 ",
    " from index 'OrderIndex' where Id in ($p0) limit $p1, $p2 ",
    " from index 'Events/SpatialIndex' where spatial.within(Coordinates, spatial.circle($p0, $p1, $p2, 'Miles')) select Name, Latitude, Longitude ",
    " from 'TestDocs' ",
    " from index 'Answers/ByAnswerEntity' order by Content limit $p0, $p1 ",
    " from index 'EmployeeByRegionAndSalary' where Region = $p0 select facet(Salary < $p1, Salary >= $p2 and Salary < $p3, Salary >= $p4 and Salary < $p5, Salary >= $p6 and Salary < $p7, Salary > $p8) ",
    " from index 'DocumentIndex' select id() as Id, Name limit $p0, $p1 ",
    " from index 'TimeSeriesIndex/Complex' ",
    " from 'Products' where Name = $p0 ",
    " from 'Results' limit $p0, $p1 ",
    " from 'People' as u select timeseries(from u.Heartrate between $p0 and $p1 group by '1 Hours' , tag with interpolation(Linear) select max(), average()) as __timeSeriesQueryFunction0 ",
    " from 'Foos' order by Age as long ",
    " from 'Users' include AddressId limit $p0, $p1 ",
    " from 'Orders' as o load $p0 as categoryList, $p1 as departmentList select { Id : id(o), Items : $p2.map(function(i){return {i:i,category:categoryList.Categories[i.CategoryId]};}).map(function(__rvn0){return {__rvn0:__rvn0,department:departmentList.Departments[__rvn0.i.DepartmentId]};}).map(function(__rvn1){return {Name:__rvn1.__rvn0.i.Name,CategoryName:__rvn1.__rvn0.category.Name,DepartmentName:__rvn1.department.Name};}) } limit $p3, $p4 ",
    " from 'Users' where Name = $p0 and Active = $p1 limit $p4, $p5 ",
    " from index 'EmployeeIndex' where FirstName = $p0 ",
    " from index 'Failing/index' ",
    " from index 'TracksIndex' order by Title as alphaNumeric select Title limit $p0, $p1 ",
    " from 'OrderItems' where (true and not Quantity in ($p0)) ",
    " from 'Companies' order by custom(Name, 'CanUseCustomSorter_3102') desc ",
    " from 'Companies' order by custom(Name, 'CanOverrideCustomSorter_402') ",
    " from index 'SimpleTimeSeriesMapReduce' ",
    " from 'Products' group by \"Name\" select sum(PricePerUnit) as TotalPrice, count() as ProductsCount ",
    " from index 'DynamicByNameIndex' order by Name ",
    " from 'Items' group by Tags order by Count as long select count(), key() as Tags ",
    " from index 'FooIndex' where (DateIn != $p0 and Age < $p1) select facet(DateIn < '2020-07-21T15:27:24.2586044', DateIn >= '2020-07-21T15:27:24.2586044' and DateIn < '2021-01-22T15:27:24.2586044', DateIn >= '2021-01-22T15:27:24.2586044') ",
    " from 'FinalFakeObjs' limit $p0, $p1 ",
    " declare function output(o, $p0, $p1, $p2, $p3) {   \tvar totalSpentOnOrder = function(order){return order.Lines.map(function(x){return x.PricePerUnit*x.Quantity*(1-$p0);}).reduce(function(a, b) { return a + b; }, 0);};   \treturn { Sum : totalSpentOnOrder(o), Any : o.Lines.some(function(x){return x.ProductName===$p1;}), NestedQuery : o.Lines.filter(function(x){return x.PricePerUnit<$p2;}).map(function(y){return y.ProductName;}), Company : load($p3).Name };   }   from 'Orders' as o select output(o, $p0, $p1, $p2, $p3) ",
    " from 'DesignResources' where DesignId = $p0 ",
    " from index 'CommitByRevision' where Revision = $p0 ",
    " from index 'AnimalsByName' where Name = $p0 ",
    " from index 'TheIndex' where ItemsCount > $p0 ",
    " from index 'PersonByDate' where Date_Month > $p0 and Date_Month <= $p1 ",
    " from index 'LogEntry/CountByDate' limit $p0, $p1 ",
    " from index 'MyIndex' limit $p0, $p1 ",
    " from 'Orders' where Lines[].ProductName = $p0 ",
    " from 'Users' as u where id() = $p0 select timeseries(from u.'HeartRate') as __timeSeriesQueryFunction0 limit $p1, $p2 ",
    " from 'DictItems' where NumericDict.1 >= $p0 ",
    " from 'ThirdOutput' ",
    " from 'Batches' as batch select { DeviceName : batch.Job.Equipment.Device!=null?batch.Job.Equipment.Device.Name:\"\", UnitName : batch.Job.Equipment.Device!=null&&batch.Job.Equipment.Device.IsBioUnitSelected?batch.Job.Equipment.Device.Unit.Name:\"\", BatchName : batch.Job.Details.Media.map((function(m){return m.Name;})).join(\", \") } ",
    " from index 'BlogsForHighlightingMRTests' where Title = $p1 and Category = $p2 select Title, Category include highlight(Title,18,2,$p0) ",
    " from 'Items' where Version = $p0 ",
    " from 'Users' as u where u.Active != $p0 select { Name : u.FirstName+\" \"+u.LastName, Active : u.Active } ",
    " from 'Orders' as x select { OrderByDescending : x.Lines.sort(function (a, b){ return b.Quantity - a.Quantity;}) } ",
    " declare timeseries __timeSeriesQueryFunction0(p) {   from p.Heartrate between $p3 and $p4 where (Values[0] > $p1) and (Tag != $p2)   }   declare timeseries __timeSeriesQueryFunction1(p) {   from p.Stocks between $p7 and $p8 where (Tag == $p5) and (Values[0] < $p6)   }   from 'People' as p where p.Age > $p0 select { Name : p.Name+\" \"+p.LastName, Heartrate : __timeSeriesQueryFunction0(p), Stocks : __timeSeriesQueryFunction1(p) } ",
    " from index 'TestIndexArraysLastIndexOf' where LastIndexOfOfMyDoubleArrayWithIndexWithCount = $p0 ",
    " from 'Bookings' as x where x.FirstName = $p0 select { StartDate : toStringWithFormat(x.Start, \"en-US\") } ",
    " from 'Test\\u000fUsers' ",
    " from index 'UsersIndex2' select School_Id ",
    " from index 'Companies/ByNameExact' where Names = $p0 limit $p1, $p2 ",
    " from 'TestDocuments' as item select { Chars1 : item.Name.split(''), Chars2 : item.Name.substr(3, 7).split('') } ",
    " from 'Users' as user select counter(user, Downloads) as DownloadsCount ",
    " from index 'UsersIndex' where Name != $p0 select Name, School.Id as SchoolId ",
    " from index 'MovieIndex' where moreLikeThis(id() = $p1, $p0) ",
    " from 'Users' as u select counter(u, Downloads) as Downloads limit $p0, $p1 ",
    " from 'Foos' limit $p0, $p1 ",
    " from 'Users' as u select { Name : u.Name+\" \"+u.LastName, Counter : counter(u, \"Downloads\") } limit $p0, $p1 ",
    " from index 'CustomerByName' where search(Name, $p0) limit $p1, $p2 ",
    " from index 'MultiMap' order by Date ",
    " from 'Companies' as c where id() = $p0 select timeseries(from c.StockPrices between $p2 and $p3 where (High > $p1)) as __timeSeriesQueryFunction0 limit $p4, $p5 ",
    " from 'TestDocs' where exists(StringArray) limit $p0, $p1 ",
    " from index 'SimpleIndex' where Key = $p0 and Value > $p1 ",
    " from index 'Document/Index' where id() in ($p0) limit $p1, $p2 ",
    " from index 'SampleSearchIndex' where NullableInt >= $p0 ",
    " from index 'TestIndexArraysContainsAndIndexOf' where IndexOfOfMyCharArray = $p0 ",
    " declare function output(__alias0) {   \tvar order = __alias0;   \tvar include = order.Company;   \tvar _load = load(include);   \tvar update = load(_load.EmployeesIds);   \tvar sum = order.Lines.map(function(l){return l.PricePerUnit*l.Quantity*_load.AccountsReceivable;}).reduce(function(a, b) { return a + b; }, 0);   \treturn { Comapny : _load, Sum : sum, Employees : update.map(function(e){return e.FirstName;}) };   }   from 'Orders' as __alias0 select output(__alias0) ",
    " from index 'PeopleIndex20' select Numbers limit $p0, $p1 ",
    " from 'Users' where boost(Name = $p0, 2) and boost(Name = $p1, 3) and boost(Name = $p2, 4) or boost(Name = $p3, 5) or boost(Name = $p4, 6) ",
    " declare function output(doc) {   \tvar p = doc.Lines.map(function(y){return load(y.Product);});   \treturn { p : p };   }   from 'Orders' as doc select output(doc) ",
    " from index 'Users/ByName' ",
    " from 'People' select BirthDate.Day as BirthDay, BirthDate.Month as BirthMonth, BirthDate.Year as BirthYear, SinceBirth.TotalMilliseconds as SinceBirthTotalMilliseconds ",
    " from 'EventsWithDates2s' where Events[].Value in ($p0) ",
    " from 'TestView2s' as x select { collectionWithListParameter : (x.Children!=null?x.Children:$p0), staticList : (x.Children!=null?x.Children:$p1) } limit $p2, $p3 ",
    " from 'domainobjects' where id() = $p0 ",
    " from index 'DogsIndex' where Age > $p0 and IsVaccinated = $p1 ",
    " from index 'PrimarySkills' where SkillId = $p0 ",
    " declare function output(x) {   \tvar purchasedQuantities = x.PurchasedQuantityByUser;   \treturn { Quantity : x.TotalQuantity, Quantities : Object.map(purchasedQuantities, function(v, k){ return v;}), QuantityTotal : Object.keys(purchasedQuantities).map(function(a){return{Key: a,Value:purchasedQuantities[a]};}).map(function(a){return a.Value;}).reduce(function(a, b) { return a + b; }, 0) };   }   from 'Purchases' as x where id() = $p0 select output(x) limit $p1, $p2 ",
    " from 'People' include AddressId ",
    " from 'Companies' as c where id() = $p0 select timeseries(from c.StockPrices between $p2 and $p3 where (High > $p1) group by '7 Days'   select max()) as __timeSeriesQueryFunction0 limit $p4, $p5 ",
    " from 'EdgeCaseValues' where TimeSpanSeconds = $p0 ",
    " from index 'test' where (exists(Tags) and not search(Tags, $p0)) and (Name = $p1) ",
    " from 'Users' where Name = $p0 and search(Age, $p1) or Age > $p2 ",
    " from index 'PersonsAnalyzed' where search(Name, $p0) ",
    " from index 'DocsIndex' where Id = $p0 select Id, StrVal ",
    " from 'GameServers' order by Name ",
    " from index 'UsersIndex' ",
    " from 'Orders' as x select { OrderByDescending : x.Lines.sort(function (a, b){ return b.Quantity - a.Quantity;}) } limit $p0, $p1 ",
    " from 'Users' as u where u.Name = $p0 select { Name : u.Name+\" \"+u.LastName, Counter : counter(u, \"Downloads\") } limit $p1, $p2 ",
    " from 'Users' where startsWith(Name, $p0) order by id() ",
    " from 'PersonAndDates' where Date.Second = $p0 ",
    " from index 'test' where (boost(search(Tags, $p0), 3) or boost(search(Tags, $p1), 20) or boost(search(Tags, $p2), 13)) ",
    " from index 'ContactsIndex' where (IsActive = $p0) and (Tags = $p1) order by CompanyId as alphaNumeric select facet(CompanyId, $p2) ",
    " from index 'Orders/ByCompanyMostFrequentShippingCountry' ",
    " from 'SampleDocs' limit $p0, $p1 ",
    " from 'DocumentationPages' where boost(search(Title, $p0), 50) or boost(search(TextContent, $p1), 35) ",
    " from index 'Companies/WithReferencedEmployees' ",
    " from index 'ProductSalesByZip' order by Zip, ProductId ",
    " from index 'SampleSearchIndex' where NullableInt < $p0 ",
    " from index 'Users/ByRoles' where RoleType != $p0 ",
    " from index 'ProcessStepIndex' where 'Group' = $p0 and LatestExecution = $p1 include StepExecutionsId ",
    " from 'Users' as u where u.Name != $p0 load u.DetailId as detail select { FullName : u.Name+\" \"+u.LastName, Detail : detail.Number } include timings() ",
    " from index 'ReducedCustomersIndex' where lucene(Occupation, $p0) select distinct CustomerId limit $p1, $p2 ",
    " from 'Users' where Age > $p0 select timeseries(from Heartrate between $p1 and $p2) as __timeSeriesQueryFunction limit $p3, $p4 ",
    " from 'MyClasses' order by whoops as long desc limit $p0, $p1 ",
    " from index 'Projects/Search' where SiteId = $p0 order by site-322-portfolio as long ",
    " from index 'TestIndexArraysContainsAndIndexOf' where IndexOfOfMyDoubleArrayWithIndex = $p0 ",
    " declare function output(o, company) {   \tvar employee = load(company.EmployeesIds)[0];   \tvar manager = load(employee.ReportsTo);   \treturn { Company : company.Name, Employee : employee.FirstName+\" \"+employee.LastName, Manager : manager.FirstName+\" \"+manager.LastName };   }   from 'Orders' as o load o.Company as company select output(o, company) ",
    " from 'Albums' ",
    " from 'WithIntegers' where Sequence > $p0 ",
    " from 'Items' order by Age as long ",
    " from index 'BlogIndex' select facet(id('facets/BlogFacets')) ",
    " from 'Employees' where ZipCodes2.Count = $p0 ",
    " from index 'ThorIndex' where Rel_Id = $p0 ",
    " from index 'eventsByLatLng' ",
    " from index 'EntitySpatialIndex' where spatial.within(Coordinates, spatial.wkt($p0)) ",
    " from index 'UsersAndProductsByNameAndCount' where Name = $p0 limit $p1, $p2 ",
    " from index 'StringReverseIndex' where startsWith(ReverseName, $p0) ",
    " from 'Users' as u where u.Age > $p0 select timeseries(from u.Heartrate where (Tag == $p1)) as __timeSeriesQueryFunction0 ",
    " from index 'test' where search(Text, $p0) ",
    " from index 'DocsIndex' where intersect((StrVal1 = $p0), StrVal2 = $p1)  ",
    " from 'Orders' order by ShipTo.Country desc ",
    " from index 'TestIndex2' ",
    " from index 'Matches/PlayerStats' where Player = $p0 limit $p1, $p2 ",
    " declare function output(u) {   \tvar detail = load((\"details/\"+u.DetailShortId));   \treturn { Name : u.Name, Detail : detail };   }   from 'Users' as u where u.LastName = $p0 select output(u) ",
    " from index 'Orders/All' select facet(Region), facet(Product, sum(Total) as T1, sum(Quantity) as Q1, avg(Total) as T1) ",
    " from index 'UsersByName' as u where u.Name = $p0 select { Name : u.Name+\" \"+u.LastName, Counter : counter(u, \"Downloads\") } limit $p1, $p2 ",
    " from index 'EntitySpatialIndex2' where spatial.within(Coordinates, spatial.circle($p0, $p1, $p2)) ",
    " from index 'EntityIndex' where CaseId != $p0 or CaseId != $p1 ",
    " from index 'RecurseIndexWithIEnumerable' ",
    " from index 'eventsByLatLng' where spatial.within(Coordinates, spatial.wkt($p0)) order by spatial.distance(Coordinates, spatial.point($p1, $p2)) ",
    " from index 'FoosTotalByBarDate' order by Date ",
    " from 'Foos' where Data > $p0 select id() as Id, Data ",
    " from 'UserWithIDictionaries' where Items[].Key = $p0 and Items[].Value = $p1 ",
    " from index 'BlogPostAll' ",
    " from index 'Index' where Name = $p0 limit $p1, $p2 ",
    " from index 'SpatialIndexForTest' where spatial.within(WKT, spatial.circle($p0, $p1, $p2)) select distinct Name ",
    " from 'Users' select Name as Id, Name limit $p0, $p1 ",
    " from index 'TracksIndex' order by Title as alphaNumeric desc limit $p0, $p1 ",
    " from 'Orders' group by Employee, Company order by Count as long select key() as GroupByEmployeeAndCompany, count() ",
    " from index 'SimpleMapReduceIndex' select FirstName, Count ",
    " from 'Items' where spatial.within(spatial.point(Latitude2, Longitude2), spatial.circle($p0, $p1, $p2)) ",
    " from index 'IndexName' where Name = $p0 and Email = $p1 ",
    " from 'Foos' where Bar > $p0 order by Bar as long desc ",
    " from 'Users' where ((id() = $p0 or id() = $p1) or id() = $p2) and (Age = $p3) ",
    " from index 'StockInfoIndex' where (Total > $p0 and Total != $p1) and (Delta < $p2 and Delta != $p3) select id() as Id, Quantity, Title, InStock, Total ",
    " from 'Test\\u001aUsers' ",
    " from 'Companies' as x select { Name : x.Name+\" \"+x.Name, TotalLikes : counter(x, \"Total Likes\") } ",
    " declare timeseries __timeSeriesQueryFunction0(name) {   from name where (Values[0] > $p1) and (Values[0] < $p2)   }   declare function output(p) {   \tvar tsFunc = function(name){return __timeSeriesQueryFunction0(name).Results;};   \treturn { Name : p.Name+\" \"+p.LastName, Heartrate : tsFunc(\"Heartrate\"), Stocks : tsFunc(\"Stocks\") };   }   from 'People' as p where p.Age > $p0 select output(p) ",
    " from index 'DocumentationPages/ByKey' ",
    " from 'Users' as user select { Name : user.Name+user.Age, Downloads : counter(user, \"Downloads\") } ",
    " from index 'DailyInvoicesIndex' limit $p0, $p1 ",
    " from index 'UsersIndex2' where Name != $p0 select Name, School_Id as SchoolId ",
    " from 'DictItems' where StringDict[].Key = $p0 ",
    " from index 'CommitByRevision' where Revision >= $p0 or Revision < $p1 ",
    " from 'Items' order by Numbers ",
    " from 'Addresses' order by City ",
    " from index 'Companies/CustomAnalyzers' where Name = $p0 ",
    " from index 'ExampleIndexCreationTask' select id() as Id, OwnerId, Name, Description limit $p0, $p1 ",
    " from 'ItineraryTrafficDemands' group by AirLineCode, Demands[].ItineraryDay select AirLineCode, Demands[].ItineraryDay as ItineraryDay, sum(Demands[].POOrigDemand) as SumOfPOOrigDemand ",
    " from 'Items' where Val = $p0 ",
    " from 'Items' where At < $p0 ",
    " from index 'CounterIndex' where CounterNames = $p0 ",
    " from 'Dogs' where (true and not exists(Awards)) ",
    " from 'SampleDocs' ",
    " from 'People' as p select id() as Id, Name, timeseries(from p.Heartrate where (Tag == $p0)) as HeartRate, timeseries(from p.BloodPressure where (Tag == $p1)) as BloodPressure limit $p2, $p3 ",
    " from 'FeedItems' where RelatedProfiles in ($p0) ",
    " from index 'Index2' where search(Field, $p1) include highlight(Field,128,2,$p0) ",
    " from index 'UsersByNameMapArrowSyntax' where Name = $p0 limit $p1, $p2 ",
    " from index 'Orders/All' select facet(Region), facet(Product, sum(Total) as T1, sum(Total) as T2, sum(Quantity) as Q1, avg(Total) as T2) ",
    " from index 'test' where Product_Name = $p0 ",
    " from index 'PersonsIndex' where (((((Name != $p0 and Name != $p1)) and Name != $p2)) and Name != $p3) limit $p4, $p5 ",
    " from index 'test1' limit $p0, $p1 ",
    " from index 'TestIndexArraysLastIndexOf' where LastIndexOfOfMyCharArrayWithIndex = $p0 ",
    " from index 'TracksIndex' order by Title as alphaNumeric, Year as long ",
    " from index 'TagsIndex' where exact(Tags = $p0) ",
    " from 'Items' where Name = $p0 or name = $p1 limit $p2, $p3 ",
    " from 'SeasonVarietyGradeGroups' ",
    " from index 'Orders/All' select facet(Region, max(Total), min(Total)) ",
    " from index 'FooIndex' select facet(DateIn < $p0) ",
    " from index 'CameraCost' where DateOfListing > $p0 select facet(id('facets/CameraFacets')) limit $p1, $p2 ",
    " from index 'TestIndexArraysContainsAndIndexOf' where IndexOfOfMyFloatArrayWithIndexWithCount = $p0 ",
    " from 'TestBlogs' order by Weighting as long ",
    " from 'Documents' as x where id() = $p0 select { FailedMin : x.Items.filter(function(i){return i.Failed;}).map(function(i){return i.Result;}).reduce(function(a, b) { return Raven_Min(a, b);}), FailedMax : x.Items.filter(function(i){return i.Failed;}).map(function(i){return i.Result;}).reduce(function(a, b) { return Raven_Max(a, b);}) } limit $p1, $p2 ",
    " from 'Accounts' select id() as Id, Profile.Name as Name, Profile.FavoriteColor as FavoriteColor ",
    " from 'Logfiles' where (StoreId != $p0 and SharedOnFacebookActionId != $p1) limit $p2, $p3 ",
    " from 'Blogs' order by SortWeight as long desc ",
    " from index 'Ent1Index/Dynamic' select Description, DescriptionNoStorage ",
    " from index 'OtherDataIndex' where moreLikeThis(id() = $p1, $p0) ",
    " from 'EdgeCaseValues' where LongMinVal = $p0 ",
    " from index 'Companies/CustomAnalyzers' where search(Address1, $p0) ",
    " declare function output(item) {   \tvar artists = Object.map(item.MusicCollection, function(v, k){ return v.map(function(x){return {Title:x.Title,ReleaseDate:x.ReleaseDate};});});   \treturn { Name : item.Name, AlbumsByArtists : artists };   }   from index 'TestDocumentByName' as item select output(item) ",
    " from index 'UsersByName' select suggest(Name, $p0) ",
    " from 'Orders' as o select { Any : o.Lines.some(function(x){return x.ProductName===$p0;}), NestedQuery : o.Lines.filter(function(x){return x.PricePerUnit<$p1;}).map(function(y){return y.ProductName;}) } ",
    " from index 'PeopleIndex22' limit $p0, $p1 ",
    " from 'People' where Age > $p0 select timeseries(from Heartrate between $p1 and $p2 load Tag as watch where (Value <= watch.Accuracy) group by '1 Months'   select average(), max()) as __timeSeriesQueryFunction limit $p3, $p4 ",
    " from 'Products' include Supplier ",
    " from 'Orders' group by ShipTo.Country order by Country select key() as Country, sum(Lines[].Quantity) as OrderedQuantity ",
    " from index 'LastAccessIndex' where LastAccess = $p0 ",
    " from 'Companies' as x select { TotalUses : cmpxchg(\"Total Uses\") } ",
    " from index 'PeopleIndex17' limit $p0, $p1 ",
    " from index 'SimpleMapReduceIndex' ",
    " from index 'PeopleIndex18' limit $p0, $p1 ",
    " from 'Companies' as x select { TotalUses : cmpxchg(\"Total Uses\") } limit $p0, $p1 ",
    " from 'Employees' as e where startsWith(id(), $p0) select { Id : id(e), CodingSkillLevel : e.Skills.filter((function(s){return s.Name===\"Coding\";}))[0].Level, Revision : e.Revision } limit $p1, $p2 ",
    " from index 'TestIndex' where Id = $p0 ",
    " from 'Blogs' where Title = $p0 ",
    " from 'Contacts' ",
    " from 'Users' where Age = $p0 ",
    " from 'Items' ",
    " from index 'Ent1Index' select Description ",
    " from index 'MyIndex' select Name, Value limit $p0, $p1 ",
    " from index 'TestIndexArraysLastIndexOf' where LastIndexOfOfMyCharArray = $p0 ",
    " from index 'TestIndexArraysContainsAndIndexOf' where ContainsOfMyFloatArray = $p0 ",
    " from index 'PersonByDate' where Date_Minute <= $p0 ",
    " from 'Users' as p where p.Age > $p0 select timeseries(from p.Heartrate between $p3 and $p4 where (Values[0] > $p1) and (Values[0] < $p2)) as __timeSeriesQueryFunction0 limit $p5, $p6 ",
    " from 'Companies' where Type = $p0 ",
    " from index 'Products/Stats' select facet(id('facets/StatsFacet')) ",
    " from index 'PersonIndex' select Name, Pet ",
    " from index 'PersonIndex' order by Surname desc ",
    " from 'Users' where (Name = $p0 or Name = $p1) or ((Name = $p2 and Name = $p3) and Name = $p4) ",
    " from 'Orders' as _load select { Employee : load(_load.Employee), Company : _load.Company } ",
    " from index 'BBoxIndex' where spatial.within(Shape, spatial.wkt($p0)) limit $p1, $p2 ",
    " from index 'Companies/CustomAnalyzers' where search(Desc, $p0) ",
    " from 'Posts' group by CreatedAt select sum(Comments.Length) as CommentsCount, count() as PostsCount ",
    " from 'MyDocs' order by id() ",
    " from 'Blogs' where Tags[].Name = $p0 ",
    " from 'Test\\'Users' ",
    " from index 'Toss/ByCreatedOn' ",
    " from index 'TimeSeries/Index/With/CompareExchange/MapReduce' ",
    " from 'Companies' where exact(endsWith(Name, $p0)) ",
    " from 'TestDocuments' where Name != $p0 and (true and not (search(Name, $p1)) and not (search(Name, $p2))) ",
    " from 'PersonAndDates' where Date.Day < $p0 ",
    " from 'Orders' as o load o.Employee as employee select employee ",
    " from index 'Product/Search' where boost(search(Name, $p0), 0) or Category in ($p1) order by score(), PricePerUnit as double desc limit $p2, $p3 ",
    " from index 'UsersByName' where Name = $p0 select facet(Name, sum(Count)) ",
    " from index 'test' ",
    " from index 'TheIndex' where Visibility = $p0 order by UpdatedAt desc limit $p1, $p2 ",
    " from index 'SampleData/Index' limit $p0, $p1 ",
    " from index 'SalesIndex' where IsCancelled = $p0 select facet(IsCancelled, sum(Nett), avg(Nett)) ",
    " from index 'IndexName' where Birthday >= $p0 select Name, Age ",
    " from 'People' where Gender = $p0 or Name = $p1 or Age = $p2 ",
    " from index 'TracksIndex' order by Title as alphaNumeric desc select Title ",
    " from index 'IndexReturningDictionary/QuerySyntax' where Age = $p0 ",
    " from index 'UsersIndexWithStoredArray' limit $p0, $p1 ",
    " from index 'Attachments/Unused' ",
    " from index 'TShirtNested' where intersect((Name = $p0), (Types_Color = $p1 and Types_Size = $p2), Types_Color = $p3 and Types_Size = $p4)  order by BarcodeNumber as long ",
    " from index 'ProfileByName' where lucene(Name, $p0) limit $p1, $p2 ",
    " from index 'TestIndex' where BoolProp = $p0 and StringProp in ($p1) ",
    " from index 'TestIndexArraysLastIndexOf' where LastIndexOfOfMyShortArrayWithIndexWithCount = $p0 ",
    " from 'Profits/References' limit $p0, $p1 ",
    " from 'Users' order by Name desc ",
    " from index 'Index1' where endsWith(Name, $p0) ",
    " from 'Users' where FirstName = $p0 limit $p1, $p2 ",
    " from index 'EntityIndex' where ((OrganizationId = $p0 and CaseId != $p1)) or HistoryCode = $p2 ",
    " from 'Test\\u001fUsers' ",
    " from index 'SearchIndex' limit $p0, $p1 ",
    " from 'IndexedUsers' where exists(Properties) ",
    " from 'Sections' order by Position as long desc select Position limit $p0, $p1 ",
    " from index 'MyIndex' where MyProperty = $p0 ",
    " from 'Commands' include cmpxchg('Id') limit $p0, $p1 ",
    " from index 'Tags/Count' where Name = $p0 and UserId = $p1 limit $p2, $p3 ",
    " from index 'StockInfoIndex' ",
    " from 'GeekPeople' where search(FavoritePrimes, $p0, and) ",
    " declare function output(doc) {   \tvar referenced = load(doc.References.map((function(x){return x.Document2Id;})));   \treturn { Data : referenced.map(function(x){return x.DataToUpdate;}) };   }   from 'Documents' as doc where id() = $p0 select output(doc) limit $p1, $p2 ",
    " from index 'AdviceSearch' where Sections = $p0 and search(SearchField, $p1) order by score() desc include Sections ",
    " from index 'ProviderAndTaxonomyCodeIndex1' where TaxonomyCode_EffectiveFrom = $p0 limit $p1, $p2 ",
    " from index 'SpatialIdx' where (Capacity >= $p0 and Capacity <= $p1) and spatial.within(Coordinates, spatial.circle($p2, $p3, $p4)) order by Date desc ",
    " from index 'Documents/TestIndex' select id() as Id ",
    " declare timeseries __timeSeriesQueryFunction0(person, watch) {   from person.Heartrate between $p3 and $p4 load Tag as watch where (Values[0] > $p1) and (watch.Accuracy >= $p2)   }   declare function output(person) {   \tvar customFunc = function(entries){return {Max:entries.map(function(entry){return entry.Values[0];}).reduce(function(a, b) { return Raven_Max(a, b);}),HasApple:entries.map(function(x){return x.Tag;}).indexOf(\"watches/apple\")>=0,Accuracies:Array.from(new Set(load(entries.map((function(e){return e.Tag;}))).map((function(doc){return doc.Accuracy;}))))};};   \tvar tsQuery = __timeSeriesQueryFunction0(person, watch);   \treturn { Series : tsQuery, Custom : customFunc(tsQuery.Results) };   }   from 'People' as person where person.Age > $p0 select output(person) limit $p5, $p6 ",
    " from 'Users' where Age > $p0 ",
    " from 'TestDocs' where (true and not (SomeProperty = $p0 or SomeProperty = $p1)) limit $p2, $p3 ",
    " from index 'TestIndexArraysContainsAndIndexOf' where IndexOfOfMyShortArrayWithIndex = $p0 ",
    " from 'EdgeCaseValues' where IntMinVal = $p0 ",
    " from index 'PurchaseHistoryIndex' limit $p0, $p1 ",
    " from index 'Users/ByName' where search(Name, $p0) limit $p1, $p2 ",
    " from 'Companies' where exact(startsWith(Name, $p0)) ",
    " from 'WithIntegers' where Sequence >= $p0 ",
    " from 'Orders' as _function select { Employee : load(_function.Employee), Company : _function.Company } ",
    " from index 'UsersReducedByNameReturnSyntax' where Count = $p0 limit $p1, $p2 ",
    " from 'Orders' group by Lines.Count select count(), key() as LinesLength ",
    " from 'Orders' as o select { Update : o.Company.substr(10), Include : o.Employee.substr(10) } ",
    " from index 'Articles/byArticleId' order by id() limit $p0, $p1 ",
    " from 'Bunnies' where (true and not id() in ($p0)) ",
    " from 'Test\\nUsers' ",
    " from 'OrderLines' group by ProductName order by TotalQuantity as long desc select key() as NameOfProduct, sum(Quantity) as TotalQuantity ",
    " from 'Clients' where (((FirstName != $p0 and LastName = $p1)) and BirthDate = $p2) and Country = $p3 limit $p4, $p5 ",
    " from 'People' as p select timeseries(from p.Heartrate between $p1 and $p2 where (Values[0] > $p0) group by '1 Months'   select average(), max(), min()) as __timeSeriesQueryFunction0 ",
    " from index 'IndexName' where Birthday < $p0 ",
    " from index 'Orders/ByProductAndCount/QuerySyntax' order by Count as long ",
    " from 'Foos' where id() in ($p0) limit $p1, $p2 ",
    " from 'EdgeCaseValues' where LongMaxVal = $p0 ",
    " from 'OrderItems' ",
    " from 'TestDocs' where SomeProperty = $p0 limit $p1, $p2 ",
    " from 'Books' ",
    " from index 'Posts/ByPostCategory' where moreLikeThis(id() = $p1, $p0) and Category = $p2 ",
    " from index 'test' where lucene(Name, $p0) ",
    " from 'Orders' as o select { OrderId : id(o), OrderItems : o.OrderItems.map(function(i){return {i:i,item:load(i.ItemId)};}).map(function(__rvn0){return {__rvn0:__rvn0,category:load(__rvn0.item.CategoryId)};}).map(function(__rvn1){return {__rvn1:__rvn1,revenueStream:load(__rvn1.__rvn0.item.RevenueStreamId)};}).map(function(__rvn2){return {ItemId:__rvn2.__rvn1.__rvn0.i.ItemId,Price:__rvn2.__rvn1.__rvn0.i.Price,ItemName:__rvn2.__rvn1.__rvn0.item.Name,CategoryName:__rvn2.__rvn1.category.Name,RevenueStreamName:__rvn2.revenueStream.Name};}) } limit $p0, $p1 ",
    " from 'Employees' where Address.Country = $p0 select distinct Address.Country as Country limit $p1, $p2 ",
    " from index 'IndexName' where Age > $p0 ",
    " from 'SectionDatas' ",
    " from index 'TimeSeriesIndex' ",
    " from index 'User/Index' ",
    " from index 'index' where Email = $p0 ",
    " from 'Blogs' where lucene(Title, $p2) or lucene(Category, $p3) include highlight(Title,18,2,$p0),highlight(Category,18,2,$p1) ",
    " from index 'Index1' ",
    " from index 'DecimalAggregationReduce' limit $p0, $p1 ",
    " from index 'Index1' as o load o.Company as c select c.Name ",
    " from 'EntityWithArrays' where Strings in ($p0) limit $p1, $p2 ",
    " from index 'test' where (search(Tags, $p0) or search(Users, $p1)) and (Name = $p2) ",
    " from index 'MilesGeoIndex' where spatial.within(Location, spatial.circle($p0, $p1, $p2, 'Kilometers')) limit $p3, $p4 ",
    " from index 'AccruedRevenueIndex' ",
    " from 'Companies' where endsWith(Name, $p0) ",
    " from index 'UsersByName' where FirstName = $p0 ",
    " from 'IndexedUsers' where Age >= $p0 ",
    " from index 'DynamicDictionaryTestMapIndexWithCount' select Count, Count2, ContainsIntInt, ContainsInt, ContainsDouble, ContainsShort, ContainsLong ",
    " from index 'TestIndexArraysLastIndexOf' where LastIndexOfOfMyFloatArray = $p0 ",
    " from index 'TagCloud' where spatial.within(Coordinates, spatial.circle($p0, $p1, $p2)) ",
    " from 'People' where FirstName = $p0 or FirstName = $p1 ",
    " from 'Users' where Name != $p0 order by random() limit $p1, $p2 ",
    " from 'Casinos' where id() = $p0 limit $p1, $p2 ",
    " from 'ModelWithEnums' where Category = $p0 limit $p1, $p2 ",
    " from index 'ClassWithDouble/Index' order by Rating as double desc ",
    " from 'People' select Face ",
    " from index 'TicketTimerIndex' where (LocationId in ($p0) and CriticalDate != $p1 and CriticalDate < $p2) select LocationId, DateUpdated, CriticalDate ",
    " from index 'Auto/Companies/ByPhone' ",
    " from 'Items' where Names in ($p0) ",
    " from index 'Users/ByName' limit $p0, $p1 ",
    " from index 'Posts/ByTitleAndDescription' where (search(Title, $p0) or search(Desc, $p1)) ",
    " from 'Users' where Name = $p0 order by Age as long ",
    " from index 'Foos/ByBarCount/Enumerable' where Bars_Count = $p0 ",
    " from 'MyClasses' order by ThisWillWork as long limit $p0, $p1 ",
    " from index 'Blog/Search' order by Price as double ",
    " from index 'People/ByName' select suggest(Name, $p0) ",
    " from index 'GeohashIndexLevel7' where spatial.intersects(WKT, spatial.wkt($p0)) limit $p1, $p2 ",
    " from index 'PeopleIndex2' limit $p0, $p1 ",
    " from 'Tests' ",
    " from index 'FanOutTestIndex' where Comment = $p0 and Tags = $p1 select InnerDocId, Comment, Tags limit $p2, $p3 ",
    " from index 'TestItemIndex' order by Letter desc limit $p0, $p1 ",
    " from 'Items' group by Tags2[] order by Count as long select count(), key() as Tag ",
    " from index 'SimpleIndex' limit $p0, $p1 ",
    " from 'Users' where user_address.city_name = $p0 ",
    " from 'Blogs' order by Title ",
    " from 'RegexMes' where regex(Text, $p0) select Text ",
    " from index 'SimpleMapReduceIndex' select Count, FirstName ",
    " from 'Companies' select facet('Colour with space') as 'Alias with space', facet(Ability) ",
    " from 'Orders' where OrderedAt < $p0 limit $p1, $p2 ",
    " from 'TestObjects' where (DateRangesWithNumbers[].From <= $p0 and DateRangesWithNumbers[].To >= $p1) or (DateRangesWithNumbers[].From <= $p2 and DateRangesWithNumbers[].To >= $p3) ",
    " from 'Users' order by random('seed1') ",
    " from 'TestView2s' as x select { EmptyHashSet : (x.Children!=null?x.Children:[]), HashSetWithInitializers : (x.Names!=null?x.Names:[\"john\",\"paul\",\"george\",\"ringo\"]) } limit $p0, $p1 ",
    " from index 'DefaultSuggestionIndex' ",
    " from index 'EmailSequenceWithStatusIndex' ",
    " from index 'IndexName' where Birthday = $p0 ",
    " from index 'TestIndexArraysContainsAndIndexOf' where IndexOfOfMyFloatArrayWithIndex = $p0 ",
    " from 'Companies' order by custom(Name, 'CanUseCustomSorter_Restart_3919') ",
    " from index 'FanoutByPaymentsWithReduce' where Amount = $p0 ",
    " from index 'Profits/Monthly' order by ProfitValue as double ",
    " from index 'Product/Search' where (lucene(Query, $p0)) and exact(Department = $p1) ",
    " declare function output(u) {   \tvar lastName = u.LastName;   \treturn { FullName : u.Name+\" \"+lastName };   }   from 'Users' as u select output(u) ",
    " from index 'UserByReverseName' where Name = $p0 ",
    " from index 'SpatialIdx' where spatial.within(Coordinates, spatial.circle($p0, $p1, $p2)) order by spatial.distance(Coordinates, spatial.point($p3, $p4)), Venue ",
    " from 'Entities' ",
    " from 'Orders' select Company as 'Load', Employee as 'Include' ",
    " from 'Users' where Name != $p0 limit $p1, $p2 ",
    " from index 'Index' where Active = $p0 select facet(Category), facet(Age >= 0 AND Age <= 1, Age >= 1 AND Age <= 2, Age >= 2 AND Age <= 3, Age >= 3 AND Age <= 4, Age >= 4 AND Age <= 5, Age >= 5 AND Age <= 6, Age >= 6 AND Age <= 7, Age >= 7 AND Age <= 8, Age >= 8 AND Age <= 9, Age >= 9 AND Age <= 10, Age >= 10 AND Age <= 11, Age >= 11 AND Age <= 12, Age >= 12 AND Age <= 13, Age >= 13 AND Age <= 14, Age >= 14 AND Age <= 15, Age >= 15 AND Age <= 16, Age >= 16 AND Age <= 17, Age >= 17 AND Age <= 18, Age >= 18 AND Age <= 19, Age >= 19 AND Age <= 20, Age >= 20 AND Age <= 21, Age >= 21 AND Age <= 22, Age >= 22 AND Age <= 23, Age >= 23 AND Age <= 24, Age >= 24 AND Age <= 25, Age >= 25 AND Age <= 26, Age >= 26 AND Age <= 27, Age >= 27 AND Age <= 28, Age >= 28 AND Age <= 29, Age >= 29 AND Age <= 30, Age >= 30 AND Age <= 31, Age >= 31 AND Age <= 32, Age >= 32 AND Age <= 33, Age >= 33 AND Age <= 34, Age >= 34 AND Age <= 35, Age >= 35 AND Age <= 36, Age >= 36 AND Age <= 37, Age >= 37 AND Age <= 38, Age >= 38 AND Age <= 39, Age >= 39 AND Age <= 40, Age >= 40 AND Age <= 41, Age >= 41 AND Age <= 42, Age >= 42 AND Age <= 43, Age >= 43 AND Age <= 44, Age >= 44 AND Age <= 45, Age >= 45 AND Age <= 46, Age >= 46 AND Age <= 47, Age >= 47 AND Age <= 48, Age >= 48 AND Age <= 49, Age >= 49 AND Age <= 50, Age >= 50 AND Age <= 51, Age >= 51 AND Age <= 52, Age >= 52 AND Age <= 53, Age >= 53 AND Age <= 54, Age >= 54 AND Age <= 55, Age >= 55 AND Age <= 56, Age >= 56 AND Age <= 57, Age >= 57 AND Age <= 58, Age >= 58 AND Age <= 59, Age >= 59 AND Age <= 60, Age >= 60 AND Age <= 61, Age >= 61 AND Age <= 62, Age >= 62 AND Age <= 63, Age >= 63 AND Age <= 64, Age >= 64 AND Age <= 65, Age >= 65 AND Age <= 66, Age >= 66 AND Age <= 67, Age >= 67 AND Age <= 68, Age >= 68 AND Age <= 69, Age >= 69 AND Age <= 70, Age >= 70 AND Age <= 71, Age >= 71 AND Age <= 72, Age >= 72 AND Age <= 73, Age >= 73 AND Age <= 74, Age >= 74 AND Age <= 75, Age >= 75 AND Age <= 76, Age >= 76 AND Age <= 77, Age >= 77 AND Age <= 78, Age >= 78 AND Age <= 79, Age >= 79 AND Age <= 80, Age >= 80 AND Age <= 81, Age >= 81 AND Age <= 82, Age >= 82 AND Age <= 83, Age >= 83 AND Age <= 84, Age >= 84 AND Age <= 85, Age >= 85 AND Age <= 86, Age >= 86 AND Age <= 87, Age >= 87 AND Age <= 88, Age >= 88 AND Age <= 89, Age >= 89 AND Age <= 90, Age >= 90 AND Age <= 91, Age >= 91 AND Age <= 92, Age >= 92 AND Age <= 93, Age >= 93 AND Age <= 94, Age >= 94 AND Age <= 95, Age >= 95 AND Age <= 96, Age >= 96 AND Age <= 97, Age >= 97 AND Age <= 98, Age >= 98 AND Age <= 99, Age >= 99 AND Age <= 100, Age >= 100 AND Age <= 101, Age >= 101 AND Age <= 102, Age >= 102 AND Age <= 103, Age >= 103 AND Age <= 104, Age >= 104 AND Age <= 105, Age >= 105 AND Age <= 106, Age >= 106 AND Age <= 107, Age >= 107 AND Age <= 108, Age >= 108 AND Age <= 109, Age >= 109 AND Age <= 110, Age >= 110 AND Age <= 111, Age >= 111 AND Age <= 112, Age >= 112 AND Age <= 113, Age >= 113 AND Age <= 114, Age >= 114 AND Age <= 115, Age >= 115 AND Age <= 116, Age >= 116 AND Age <= 117, Age >= 117 AND Age <= 118, Age >= 118 AND Age <= 119, Age >= 119 AND Age <= 120, Age >= 120 AND Age <= 121, Age >= 121 AND Age <= 122, Age >= 122 AND Age <= 123, Age >= 123 AND Age <= 124, Age >= 124 AND Age <= 125, Age >= 125 AND Age <= 126, Age >= 126 AND Age <= 127, Age >= 127 AND Age <= 128, Age >= 128 AND Age <= 129, Age >= 129 AND Age <= 130, Age >= 130 AND Age <= 131, Age >= 131 AND Age <= 132, Age >= 132 AND Age <= 133, Age >= 133 AND Age <= 134, Age >= 134 AND Age <= 135, Age >= 135 AND Age <= 136, Age >= 136 AND Age <= 137, Age >= 137 AND Age <= 138, Age >= 138 AND Age <= 139, Age >= 139 AND Age <= 140, Age >= 140 AND Age <= 141, Age >= 141 AND Age <= 142, Age >= 142 AND Age <= 143, Age >= 143 AND Age <= 144, Age >= 144 AND Age <= 145, Age >= 145 AND Age <= 146, Age >= 146 AND Age <= 147, Age >= 147 AND Age <= 148, Age >= 148 AND Age <= 149, Age >= 149 AND Age <= 150, Age >= 150 AND Age <= 151, Age >= 151 AND Age <= 152, Age >= 152 AND Age <= 153, Age >= 153 AND Age <= 154, Age >= 154 AND Age <= 155, Age >= 155 AND Age <= 156, Age >= 156 AND Age <= 157, Age >= 157 AND Age <= 158, Age >= 158 AND Age <= 159, Age >= 159 AND Age <= 160, Age >= 160 AND Age <= 161, Age >= 161 AND Age <= 162, Age >= 162 AND Age <= 163, Age >= 163 AND Age <= 164, Age >= 164 AND Age <= 165, Age >= 165 AND Age <= 166, Age >= 166 AND Age <= 167, Age >= 167 AND Age <= 168, Age >= 168 AND Age <= 169, Age >= 169 AND Age <= 170, Age >= 170 AND Age <= 171, Age >= 171 AND Age <= 172, Age >= 172 AND Age <= 173, Age >= 173 AND Age <= 174, Age >= 174 AND Age <= 175, Age >= 175 AND Age <= 176, Age >= 176 AND Age <= 177, Age >= 177 AND Age <= 178, Age >= 178 AND Age <= 179, Age >= 179 AND Age <= 180, Age >= 180 AND Age <= 181, Age >= 181 AND Age <= 182, Age >= 182 AND Age <= 183, Age >= 183 AND Age <= 184, Age >= 184 AND Age <= 185, Age >= 185 AND Age <= 186, Age >= 186 AND Age <= 187, Age >= 187 AND Age <= 188, Age >= 188 AND Age <= 189, Age >= 189 AND Age <= 190, Age >= 190 AND Age <= 191, Age >= 191 AND Age <= 192, Age >= 192 AND Age <= 193, Age >= 193 AND Age <= 194, Age >= 194 AND Age <= 195, Age >= 195 AND Age <= 196, Age >= 196 AND Age <= 197, Age >= 197 AND Age <= 198, Age >= 198 AND Age <= 199, Age >= 199 AND Age <= 200, Age >= 200 AND Age <= 201, Age >= 201 AND Age <= 202, Age >= 202 AND Age <= 203, Age >= 203 AND Age <= 204, Age >= 204 AND Age <= 205, Age >= 205 AND Age <= 206, Age >= 206 AND Age <= 207, Age >= 207 AND Age <= 208, Age >= 208 AND Age <= 209, Age >= 209 AND Age <= 210, Age >= 210 AND Age <= 211, Age >= 211 AND Age <= 212, Age >= 212 AND Age <= 213, Age >= 213 AND Age <= 214, Age >= 214 AND Age <= 215, Age >= 215 AND Age <= 216, Age >= 216 AND Age <= 217, Age >= 217 AND Age <= 218, Age >= 218 AND Age <= 219, Age >= 219 AND Age <= 220, Age >= 220 AND Age <= 221, Age >= 221 AND Age <= 222, Age >= 222 AND Age <= 223, Age >= 223 AND Age <= 224, Age >= 224 AND Age <= 225, Age >= 225 AND Age <= 226, Age >= 226 AND Age <= 227, Age >= 227 AND Age <= 228, Age >= 228 AND Age <= 229, Age >= 229 AND Age <= 230, Age >= 230 AND Age <= 231, Age >= 231 AND Age <= 232, Age >= 232 AND Age <= 233, Age >= 233 AND Age <= 234, Age >= 234 AND Age <= 235, Age >= 235 AND Age <= 236, Age >= 236 AND Age <= 237, Age >= 237 AND Age <= 238, Age >= 238 AND Age <= 239, Age >= 239 AND Age <= 240, Age >= 240 AND Age <= 241, Age >= 241 AND Age <= 242, Age >= 242 AND Age <= 243, Age >= 243 AND Age <= 244, Age >= 244 AND Age <= 245, Age >= 245 AND Age <= 246, Age >= 246 AND Age <= 247, Age >= 247 AND Age <= 248, Age >= 248 AND Age <= 249, Age >= 249 AND Age <= 250, Age >= 250 AND Age <= 251, Age >= 251 AND Age <= 252, Age >= 252 AND Age <= 253, Age >= 253 AND Age <= 254, Age >= 254 AND Age <= 255, Age >= 255 AND Age <= 256, Age >= 256 AND Age <= 257, Age >= 257 AND Age <= 258, Age >= 258 AND Age <= 259, Age >= 259 AND Age <= 260, Age >= 260 AND Age <= 261, Age >= 261 AND Age <= 262, Age >= 262 AND Age <= 263, Age >= 263 AND Age <= 264, Age >= 264 AND Age <= 265, Age >= 265 AND Age <= 266, Age >= 266 AND Age <= 267, Age >= 267 AND Age <= 268, Age >= 268 AND Age <= 269, Age >= 269 AND Age <= 270, Age >= 270 AND Age <= 271, Age >= 271 AND Age <= 272, Age >= 272 AND Age <= 273, Age >= 273 AND Age <= 274, Age >= 274 AND Age <= 275, Age >= 275 AND Age <= 276, Age >= 276 AND Age <= 277, Age >= 277 AND Age <= 278, Age >= 278 AND Age <= 279, Age >= 279 AND Age <= 280, Age >= 280 AND Age <= 281, Age >= 281 AND Age <= 282, Age >= 282 AND Age <= 283, Age >= 283 AND Age <= 284, Age >= 284 AND Age <= 285, Age >= 285 AND Age <= 286, Age >= 286 AND Age <= 287, Age >= 287 AND Age <= 288, Age >= 288 AND Age <= 289, Age >= 289 AND Age <= 290, Age >= 290 AND Age <= 291, Age >= 291 AND Age <= 292, Age >= 292 AND Age <= 293, Age >= 293 AND Age <= 294, Age >= 294 AND Age <= 295, Age >= 295 AND Age <= 296, Age >= 296 AND Age <= 297, Age >= 297 AND Age <= 298, Age >= 298 AND Age <= 299, Age >= 299 AND Age <= 300, Age >= 300 AND Age <= 301, Age >= 301 AND Age <= 302, Age >= 302 AND Age <= 303, Age >= 303 AND Age <= 304, Age >= 304 AND Age <= 305, Age >= 305 AND Age <= 306, Age >= 306 AND Age <= 307, Age >= 307 AND Age <= 308, Age >= 308 AND Age <= 309, Age >= 309 AND Age <= 310, Age >= 310 AND Age <= 311, Age >= 311 AND Age <= 312, Age >= 312 AND Age <= 313, Age >= 313 AND Age <= 314, Age >= 314 AND Age <= 315, Age >= 315 AND Age <= 316, Age >= 316 AND Age <= 317, Age >= 317 AND Age <= 318, Age >= 318 AND Age <= 319, Age >= 319 AND Age <= 320, Age >= 320 AND Age <= 321, Age >= 321 AND Age <= 322, Age >= 322 AND Age <= 323, Age >= 323 AND Age <= 324, Age >= 324 AND Age <= 325, Age >= 325 AND Age <= 326, Age >= 326 AND Age <= 327, Age >= 327 AND Age <= 328, Age >= 328 AND Age <= 329, Age >= 329 AND Age <= 330, Age >= 330 AND Age <= 331, Age >= 331 AND Age <= 332, Age >= 332 AND Age <= 333, Age >= 333 AND Age <= 334, Age >= 334 AND Age <= 335, Age >= 335 AND Age <= 336, Age >= 336 AND Age <= 337, Age >= 337 AND Age <= 338, Age >= 338 AND Age <= 339, Age >= 339 AND Age <= 340, Age >= 340 AND Age <= 341, Age >= 341 AND Age <= 342, Age >= 342 AND Age <= 343, Age >= 343 AND Age <= 344, Age >= 344 AND Age <= 345, Age >= 345 AND Age <= 346, Age >= 346 AND Age <= 347, Age >= 347 AND Age <= 348, Age >= 348 AND Age <= 349, Age >= 349 AND Age <= 350, Age >= 350 AND Age <= 351, Age >= 351 AND Age <= 352, Age >= 352 AND Age <= 353, Age >= 353 AND Age <= 354, Age >= 354 AND Age <= 355, Age >= 355 AND Age <= 356, Age >= 356 AND Age <= 357, Age >= 357 AND Age <= 358, Age >= 358 AND Age <= 359, Age >= 359 AND Age <= 360, Age >= 360 AND Age <= 361, Age >= 361 AND Age <= 362, Age >= 362 AND Age <= 363, Age >= 363 AND Age <= 364, Age >= 364 AND Age <= 365, Age >= 365 AND Age <= 366, Age >= 366 AND Age <= 367, Age >= 367 AND Age <= 368, Age >= 368 AND Age <= 369, Age >= 369 AND Age <= 370, Age >= 370 AND Age <= 371, Age >= 371 AND Age <= 372, Age >= 372 AND Age <= 373, Age >= 373 AND Age <= 374, Age >= 374 AND Age <= 375, Age >= 375 AND Age <= 376, Age >= 376 AND Age <= 377, Age >= 377 AND Age <= 378, Age >= 378 AND Age <= 379, Age >= 379 AND Age <= 380, Age >= 380 AND Age <= 381, Age >= 381 AND Age <= 382, Age >= 382 AND Age <= 383, Age >= 383 AND Age <= 384, Age >= 384 AND Age <= 385, Age >= 385 AND Age <= 386, Age >= 386 AND Age <= 387, Age >= 387 AND Age <= 388, Age >= 388 AND Age <= 389, Age >= 389 AND Age <= 390, Age >= 390 AND Age <= 391, Age >= 391 AND Age <= 392, Age >= 392 AND Age <= 393, Age >= 393 AND Age <= 394, Age >= 394 AND Age <= 395, Age >= 395 AND Age <= 396, Age >= 396 AND Age <= 397, Age >= 397 AND Age <= 398, Age >= 398 AND Age <= 399, Age >= 399 AND Age <= 400, Age >= 400 AND Age <= 401, Age >= 401 AND Age <= 402, Age >= 402 AND Age <= 403, Age >= 403 AND Age <= 404, Age >= 404 AND Age <= 405, Age >= 405 AND Age <= 406, Age >= 406 AND Age <= 407, Age >= 407 AND Age <= 408, Age >= 408 AND Age <= 409, Age >= 409 AND Age <= 410, Age >= 410 AND Age <= 411, Age >= 411 AND Age <= 412, Age >= 412 AND Age <= 413, Age >= 413 AND Age <= 414, Age >= 414 AND Age <= 415, Age >= 415 AND Age <= 416, Age >= 416 AND Age <= 417, Age >= 417 AND Age <= 418, Age >= 418 AND Age <= 419, Age >= 419 AND Age <= 420, Age >= 420 AND Age <= 421, Age >= 421 AND Age <= 422, Age >= 422 AND Age <= 423, Age >= 423 AND Age <= 424, Age >= 424 AND Age <= 425, Age >= 425 AND Age <= 426, Age >= 426 AND Age <= 427, Age >= 427 AND Age <= 428, Age >= 428 AND Age <= 429, Age >= 429 AND Age <= 430, Age >= 430 AND Age <= 431, Age >= 431 AND Age <= 432, Age >= 432 AND Age <= 433, Age >= 433 AND Age <= 434, Age >= 434 AND Age <= 435, Age >= 435 AND Age <= 436, Age >= 436 AND Age <= 437, Age >= 437 AND Age <= 438, Age >= 438 AND Age <= 439, Age >= 439 AND Age <= 440, Age >= 440 AND Age <= 441, Age >= 441 AND Age <= 442, Age >= 442 AND Age <= 443, Age >= 443 AND Age <= 444, Age >= 444 AND Age <= 445, Age >= 445 AND Age <= 446, Age >= 446 AND Age <= 447, Age >= 447 AND Age <= 448, Age >= 448 AND Age <= 449, Age >= 449 AND Age <= 450, Age >= 450 AND Age <= 451, Age >= 451 AND Age <= 452, Age >= 452 AND Age <= 453, Age >= 453 AND Age <= 454, Age >= 454 AND Age <= 455, Age >= 455 AND Age <= 456, Age >= 456 AND Age <= 457, Age >= 457 AND Age <= 458, Age >= 458 AND Age <= 459, Age >= 459 AND Age <= 460, Age >= 460 AND Age <= 461, Age >= 461 AND Age <= 462, Age >= 462 AND Age <= 463, Age >= 463 AND Age <= 464, Age >= 464 AND Age <= 465, Age >= 465 AND Age <= 466, Age >= 466 AND Age <= 467, Age >= 467 AND Age <= 468, Age >= 468 AND Age <= 469, Age >= 469 AND Age <= 470, Age >= 470 AND Age <= 471, Age >= 471 AND Age <= 472, Age >= 472 AND Age <= 473, Age >= 473 AND Age <= 474, Age >= 474 AND Age <= 475, Age >= 475 AND Age <= 476, Age >= 476 AND Age <= 477, Age >= 477 AND Age <= 478, Age >= 478 AND Age <= 479, Age >= 479 AND Age <= 480, Age >= 480 AND Age <= 481, Age >= 481 AND Age <= 482, Age >= 482 AND Age <= 483, Age >= 483 AND Age <= 484, Age >= 484 AND Age <= 485, Age >= 485 AND Age <= 486, Age >= 486 AND Age <= 487, Age >= 487 AND Age <= 488, Age >= 488 AND Age <= 489, Age >= 489 AND Age <= 490, Age >= 490 AND Age <= 491, Age >= 491 AND Age <= 492, Age >= 492 AND Age <= 493, Age >= 493 AND Age <= 494, Age >= 494 AND Age <= 495, Age >= 495 AND Age <= 496, Age >= 496 AND Age <= 497, Age >= 497 AND Age <= 498, Age >= 498 AND Age <= 499, Age >= 499 AND Age <= 500, Age >= 500 AND Age <= 501, Age >= 501 AND Age <= 502, Age >= 502 AND Age <= 503, Age >= 503 AND Age <= 504, Age >= 504 AND Age <= 505, Age >= 505 AND Age <= 506, Age >= 506 AND Age <= 507, Age >= 507 AND Age <= 508, Age >= 508 AND Age <= 509, Age >= 509 AND Age <= 510, Age >= 510 AND Age <= 511, Age >= 511 AND Age <= 512, Age >= 512 AND Age <= 513, Age >= 513 AND Age <= 514, Age >= 514 AND Age <= 515, Age >= 515 AND Age <= 516, Age >= 516 AND Age <= 517, Age >= 517 AND Age <= 518, Age >= 518 AND Age <= 519, Age >= 519 AND Age <= 520, Age >= 520 AND Age <= 521, Age >= 521 AND Age <= 522, Age >= 522 AND Age <= 523, Age >= 523 AND Age <= 524, Age >= 524 AND Age <= 525, Age >= 525 AND Age <= 526, Age >= 526 AND Age <= 527, Age >= 527 AND Age <= 528, Age >= 528 AND Age <= 529, Age >= 529 AND Age <= 530, Age >= 530 AND Age <= 531, Age >= 531 AND Age <= 532, Age >= 532 AND Age <= 533, Age >= 533 AND Age <= 534, Age >= 534 AND Age <= 535, Age >= 535 AND Age <= 536, Age >= 536 AND Age <= 537, Age >= 537 AND Age <= 538, Age >= 538 AND Age <= 539, Age >= 539 AND Age <= 540, Age >= 540 AND Age <= 541, Age >= 541 AND Age <= 542, Age >= 542 AND Age <= 543, Age >= 543 AND Age <= 544, Age >= 544 AND Age <= 545, Age >= 545 AND Age <= 546, Age >= 546 AND Age <= 547, Age >= 547 AND Age <= 548, Age >= 548 AND Age <= 549, Age >= 549 AND Age <= 550, Age >= 550 AND Age <= 551, Age >= 551 AND Age <= 552, Age >= 552 AND Age <= 553, Age >= 553 AND Age <= 554, Age >= 554 AND Age <= 555, Age >= 555 AND Age <= 556, Age >= 556 AND Age <= 557, Age >= 557 AND Age <= 558, Age >= 558 AND Age <= 559, Age >= 559 AND Age <= 560, Age >= 560 AND Age <= 561, Age >= 561 AND Age <= 562, Age >= 562 AND Age <= 563, Age >= 563 AND Age <= 564, Age >= 564 AND Age <= 565, Age >= 565 AND Age <= 566, Age >= 566 AND Age <= 567, Age >= 567 AND Age <= 568, Age >= 568 AND Age <= 569, Age >= 569 AND Age <= 570, Age >= 570 AND Age <= 571, Age >= 571 AND Age <= 572, Age >= 572 AND Age <= 573, Age >= 573 AND Age <= 574, Age >= 574 AND Age <= 575, Age >= 575 AND Age <= 576, Age >= 576 AND Age <= 577, Age >= 577 AND Age <= 578, Age >= 578 AND Age <= 579, Age >= 579 AND Age <= 580, Age >= 580 AND Age <= 581, Age >= 581 AND Age <= 582, Age >= 582 AND Age <= 583, Age >= 583 AND Age <= 584, Age >= 584 AND Age <= 585, Age >= 585 AND Age <= 586, Age >= 586 AND Age <= 587, Age >= 587 AND Age <= 588, Age >= 588 AND Age <= 589, Age >= 589 AND Age <= 590, Age >= 590 AND Age <= 591, Age >= 591 AND Age <= 592, Age >= 592 AND Age <= 593, Age >= 593 AND Age <= 594, Age >= 594 AND Age <= 595, Age >= 595 AND Age <= 596, Age >= 596 AND Age <= 597, Age >= 597 AND Age <= 598, Age >= 598 AND Age <= 599, Age >= 599 AND Age <= 600, Age >= 600 AND Age <= 601, Age >= 601 AND Age <= 602, Age >= 602 AND Age <= 603, Age >= 603 AND Age <= 604, Age >= 604 AND Age <= 605, Age >= 605 AND Age <= 606, Age >= 606 AND Age <= 607, Age >= 607 AND Age <= 608, Age >= 608 AND Age <= 609, Age >= 609 AND Age <= 610, Age >= 610 AND Age <= 611, Age >= 611 AND Age <= 612, Age >= 612 AND Age <= 613, Age >= 613 AND Age <= 614, Age >= 614 AND Age <= 615, Age >= 615 AND Age <= 616, Age >= 616 AND Age <= 617, Age >= 617 AND Age <= 618, Age >= 618 AND Age <= 619, Age >= 619 AND Age <= 620, Age >= 620 AND Age <= 621, Age >= 621 AND Age <= 622, Age >= 622 AND Age <= 623, Age >= 623 AND Age <= 624, Age >= 624 AND Age <= 625, Age >= 625 AND Age <= 626, Age >= 626 AND Age <= 627, Age >= 627 AND Age <= 628, Age >= 628 AND Age <= 629, Age >= 629 AND Age <= 630, Age >= 630 AND Age <= 631, Age >= 631 AND Age <= 632, Age >= 632 AND Age <= 633, Age >= 633 AND Age <= 634, Age >= 634 AND Age <= 635, Age >= 635 AND Age <= 636, Age >= 636 AND Age <= 637, Age >= 637 AND Age <= 638, Age >= 638 AND Age <= 639, Age >= 639 AND Age <= 640, Age >= 640 AND Age <= 641, Age >= 641 AND Age <= 642, Age >= 642 AND Age <= 643, Age >= 643 AND Age <= 644, Age >= 644 AND Age <= 645, Age >= 645 AND Age <= 646, Age >= 646 AND Age <= 647, Age >= 647 AND Age <= 648, Age >= 648 AND Age <= 649, Age >= 649 AND Age <= 650, Age >= 650 AND Age <= 651, Age >= 651 AND Age <= 652, Age >= 652 AND Age <= 653, Age >= 653 AND Age <= 654, Age >= 654 AND Age <= 655, Age >= 655 AND Age <= 656, Age >= 656 AND Age <= 657, Age >= 657 AND Age <= 658, Age >= 658 AND Age <= 659, Age >= 659 AND Age <= 660, Age >= 660 AND Age <= 661, Age >= 661 AND Age <= 662, Age >= 662 AND Age <= 663, Age >= 663 AND Age <= 664, Age >= 664 AND Age <= 665, Age >= 665 AND Age <= 666, Age >= 666 AND Age <= 667, Age >= 667 AND Age <= 668, Age >= 668 AND Age <= 669, Age >= 669 AND Age <= 670, Age >= 670 AND Age <= 671, Age >= 671 AND Age <= 672, Age >= 672 AND Age <= 673, Age >= 673 AND Age <= 674, Age >= 674 AND Age <= 675, Age >= 675 AND Age <= 676, Age >= 676 AND Age <= 677, Age >= 677 AND Age <= 678, Age >= 678 AND Age <= 679, Age >= 679 AND Age <= 680, Age >= 680 AND Age <= 681, Age >= 681 AND Age <= 682, Age >= 682 AND Age <= 683, Age >= 683 AND Age <= 684, Age >= 684 AND Age <= 685, Age >= 685 AND Age <= 686, Age >= 686 AND Age <= 687, Age >= 687 AND Age <= 688, Age >= 688 AND Age <= 689, Age >= 689 AND Age <= 690, Age >= 690 AND Age <= 691, Age >= 691 AND Age <= 692, Age >= 692 AND Age <= 693, Age >= 693 AND Age <= 694, Age >= 694 AND Age <= 695, Age >= 695 AND Age <= 696, Age >= 696 AND Age <= 697, Age >= 697 AND Age <= 698, Age >= 698 AND Age <= 699, Age >= 699 AND Age <= 700, Age >= 700 AND Age <= 701, Age >= 701 AND Age <= 702, Age >= 702 AND Age <= 703, Age >= 703 AND Age <= 704, Age >= 704 AND Age <= 705, Age >= 705 AND Age <= 706, Age >= 706 AND Age <= 707, Age >= 707 AND Age <= 708, Age >= 708 AND Age <= 709, Age >= 709 AND Age <= 710, Age >= 710 AND Age <= 711, Age >= 711 AND Age <= 712, Age >= 712 AND Age <= 713, Age >= 713 AND Age <= 714, Age >= 714 AND Age <= 715, Age >= 715 AND Age <= 716, Age >= 716 AND Age <= 717, Age >= 717 AND Age <= 718, Age >= 718 AND Age <= 719, Age >= 719 AND Age <= 720, Age >= 720 AND Age <= 721, Age >= 721 AND Age <= 722, Age >= 722 AND Age <= 723, Age >= 723 AND Age <= 724, Age >= 724 AND Age <= 725, Age >= 725 AND Age <= 726, Age >= 726 AND Age <= 727, Age >= 727 AND Age <= 728, Age >= 728 AND Age <= 729, Age >= 729 AND Age <= 730, Age >= 730 AND Age <= 731, Age >= 731 AND Age <= 732, Age >= 732 AND Age <= 733, Age >= 733 AND Age <= 734, Age >= 734 AND Age <= 735, Age >= 735 AND Age <= 736, Age >= 736 AND Age <= 737, Age >= 737 AND Age <= 738, Age >= 738 AND Age <= 739, Age >= 739 AND Age <= 740, Age >= 740 AND Age <= 741, Age >= 741 AND Age <= 742, Age >= 742 AND Age <= 743, Age >= 743 AND Age <= 744, Age >= 744 AND Age <= 745, Age >= 745 AND Age <= 746, Age >= 746 AND Age <= 747, Age >= 747 AND Age <= 748, Age >= 748 AND Age <= 749, Age >= 749 AND Age <= 750, Age >= 750 AND Age <= 751, Age >= 751 AND Age <= 752, Age >= 752 AND Age <= 753, Age >= 753 AND Age <= 754, Age >= 754 AND Age <= 755, Age >= 755 AND Age <= 756, Age >= 756 AND Age <= 757, Age >= 757 AND Age <= 758, Age >= 758 AND Age <= 759, Age >= 759 AND Age <= 760, Age >= 760 AND Age <= 761, Age >= 761 AND Age <= 762, Age >= 762 AND Age <= 763, Age >= 763 AND Age <= 764, Age >= 764 AND Age <= 765, Age >= 765 AND Age <= 766, Age >= 766 AND Age <= 767, Age >= 767 AND Age <= 768, Age >= 768 AND Age <= 769, Age >= 769 AND Age <= 770, Age >= 770 AND Age <= 771, Age >= 771 AND Age <= 772, Age >= 772 AND Age <= 773, Age >= 773 AND Age <= 774, Age >= 774 AND Age <= 775, Age >= 775 AND Age <= 776, Age >= 776 AND Age <= 777, Age >= 777 AND Age <= 778, Age >= 778 AND Age <= 779, Age >= 779 AND Age <= 780, Age >= 780 AND Age <= 781, Age >= 781 AND Age <= 782, Age >= 782 AND Age <= 783, Age >= 783 AND Age <= 784, Age >= 784 AND Age <= 785, Age >= 785 AND Age <= 786, Age >= 786 AND Age <= 787, Age >= 787 AND Age <= 788, Age >= 788 AND Age <= 789, Age >= 789 AND Age <= 790, Age >= 790 AND Age <= 791, Age >= 791 AND Age <= 792, Age >= 792 AND Age <= 793, Age >= 793 AND Age <= 794, Age >= 794 AND Age <= 795, Age >= 795 AND Age <= 796, Age >= 796 AND Age <= 797, Age >= 797 AND Age <= 798, Age >= 798 AND Age <= 799, Age >= 799 AND Age <= 800, Age >= 800 AND Age <= 801, Age >= 801 AND Age <= 802, Age >= 802 AND Age <= 803, Age >= 803 AND Age <= 804, Age >= 804 AND Age <= 805, Age >= 805 AND Age <= 806, Age >= 806 AND Age <= 807, Age >= 807 AND Age <= 808, Age >= 808 AND Age <= 809, Age >= 809 AND Age <= 810, Age >= 810 AND Age <= 811, Age >= 811 AND Age <= 812, Age >= 812 AND Age <= 813, Age >= 813 AND Age <= 814, Age >= 814 AND Age <= 815, Age >= 815 AND Age <= 816, Age >= 816 AND Age <= 817, Age >= 817 AND Age <= 818, Age >= 818 AND Age <= 819, Age >= 819 AND Age <= 820, Age >= 820 AND Age <= 821, Age >= 821 AND Age <= 822, Age >= 822 AND Age <= 823, Age >= 823 AND Age <= 824, Age >= 824 AND Age <= 825, Age >= 825 AND Age <= 826, Age >= 826 AND Age <= 827, Age >= 827 AND Age <= 828, Age >= 828 AND Age <= 829, Age >= 829 AND Age <= 830, Age >= 830 AND Age <= 831, Age >= 831 AND Age <= 832, Age >= 832 AND Age <= 833, Age >= 833 AND Age <= 834, Age >= 834 AND Age <= 835, Age >= 835 AND Age <= 836, Age >= 836 AND Age <= 837, Age >= 837 AND Age <= 838, Age >= 838 AND Age <= 839, Age >= 839 AND Age <= 840, Age >= 840 AND Age <= 841, Age >= 841 AND Age <= 842, Age >= 842 AND Age <= 843, Age >= 843 AND Age <= 844, Age >= 844 AND Age <= 845, Age >= 845 AND Age <= 846, Age >= 846 AND Age <= 847, Age >= 847 AND Age <= 848, Age >= 848 AND Age <= 849, Age >= 849 AND Age <= 850, Age >= 850 AND Age <= 851, Age >= 851 AND Age <= 852, Age >= 852 AND Age <= 853, Age >= 853 AND Age <= 854, Age >= 854 AND Age <= 855, Age >= 855 AND Age <= 856, Age >= 856 AND Age <= 857, Age >= 857 AND Age <= 858, Age >= 858 AND Age <= 859, Age >= 859 AND Age <= 860, Age >= 860 AND Age <= 861, Age >= 861 AND Age <= 862, Age >= 862 AND Age <= 863, Age >= 863 AND Age <= 864, Age >= 864 AND Age <= 865, Age >= 865 AND Age <= 866, Age >= 866 AND Age <= 867, Age >= 867 AND Age <= 868, Age >= 868 AND Age <= 869, Age >= 869 AND Age <= 870, Age >= 870 AND Age <= 871, Age >= 871 AND Age <= 872, Age >= 872 AND Age <= 873, Age >= 873 AND Age <= 874, Age >= 874 AND Age <= 875, Age >= 875 AND Age <= 876, Age >= 876 AND Age <= 877, Age >= 877 AND Age <= 878, Age >= 878 AND Age <= 879, Age >= 879 AND Age <= 880, Age >= 880 AND Age <= 881, Age >= 881 AND Age <= 882, Age >= 882 AND Age <= 883, Age >= 883 AND Age <= 884, Age >= 884 AND Age <= 885, Age >= 885 AND Age <= 886, Age >= 886 AND Age <= 887, Age >= 887 AND Age <= 888, Age >= 888 AND Age <= 889, Age >= 889 AND Age <= 890, Age >= 890 AND Age <= 891, Age >= 891 AND Age <= 892, Age >= 892 AND Age <= 893, Age >= 893 AND Age <= 894, Age >= 894 AND Age <= 895, Age >= 895 AND Age <= 896, Age >= 896 AND Age <= 897, Age >= 897 AND Age <= 898, Age >= 898 AND Age <= 899, Age >= 899 AND Age <= 900, Age >= 900 AND Age <= 901, Age >= 901 AND Age <= 902, Age >= 902 AND Age <= 903, Age >= 903 AND Age <= 904, Age >= 904 AND Age <= 905, Age >= 905 AND Age <= 906, Age >= 906 AND Age <= 907, Age >= 907 AND Age <= 908, Age >= 908 AND Age <= 909, Age >= 909 AND Age <= 910, Age >= 910 AND Age <= 911, Age >= 911 AND Age <= 912, Age >= 912 AND Age <= 913, Age >= 913 AND Age <= 914, Age >= 914 AND Age <= 915, Age >= 915 AND Age <= 916, Age >= 916 AND Age <= 917, Age >= 917 AND Age <= 918, Age >= 918 AND Age <= 919, Age >= 919 AND Age <= 920, Age >= 920 AND Age <= 921, Age >= 921 AND Age <= 922, Age >= 922 AND Age <= 923, Age >= 923 AND Age <= 924, Age >= 924 AND Age <= 925, Age >= 925 AND Age <= 926, Age >= 926 AND Age <= 927, Age >= 927 AND Age <= 928, Age >= 928 AND Age <= 929, Age >= 929 AND Age <= 930, Age >= 930 AND Age <= 931, Age >= 931 AND Age <= 932, Age >= 932 AND Age <= 933, Age >= 933 AND Age <= 934, Age >= 934 AND Age <= 935, Age >= 935 AND Age <= 936, Age >= 936 AND Age <= 937, Age >= 937 AND Age <= 938, Age >= 938 AND Age <= 939, Age >= 939 AND Age <= 940, Age >= 940 AND Age <= 941, Age >= 941 AND Age <= 942, Age >= 942 AND Age <= 943, Age >= 943 AND Age <= 944, Age >= 944 AND Age <= 945, Age >= 945 AND Age <= 946, Age >= 946 AND Age <= 947, Age >= 947 AND Age <= 948, Age >= 948 AND Age <= 949, Age >= 949 AND Age <= 950, Age >= 950 AND Age <= 951, Age >= 951 AND Age <= 952, Age >= 952 AND Age <= 953, Age >= 953 AND Age <= 954, Age >= 954 AND Age <= 955, Age >= 955 AND Age <= 956, Age >= 956 AND Age <= 957, Age >= 957 AND Age <= 958, Age >= 958 AND Age <= 959, Age >= 959 AND Age <= 960, Age >= 960 AND Age <= 961, Age >= 961 AND Age <= 962, Age >= 962 AND Age <= 963, Age >= 963 AND Age <= 964, Age >= 964 AND Age <= 965, Age >= 965 AND Age <= 966, Age >= 966 AND Age <= 967, Age >= 967 AND Age <= 968, Age >= 968 AND Age <= 969, Age >= 969 AND Age <= 970, Age >= 970 AND Age <= 971, Age >= 971 AND Age <= 972, Age >= 972 AND Age <= 973, Age >= 973 AND Age <= 974, Age >= 974 AND Age <= 975, Age >= 975 AND Age <= 976, Age >= 976 AND Age <= 977, Age >= 977 AND Age <= 978, Age >= 978 AND Age <= 979, Age >= 979 AND Age <= 980, Age >= 980 AND Age <= 981, Age >= 981 AND Age <= 982, Age >= 982 AND Age <= 983, Age >= 983 AND Age <= 984, Age >= 984 AND Age <= 985, Age >= 985 AND Age <= 986, Age >= 986 AND Age <= 987, Age >= 987 AND Age <= 988, Age >= 988 AND Age <= 989, Age >= 989 AND Age <= 990, Age >= 990 AND Age <= 991, Age >= 991 AND Age <= 992, Age >= 992 AND Age <= 993, Age >= 993 AND Age <= 994, Age >= 994 AND Age <= 995, Age >= 995 AND Age <= 996, Age >= 996 AND Age <= 997, Age >= 997 AND Age <= 998, Age >= 998 AND Age <= 999, Age >= 999 AND Age <= 1000, Age >= 1000 AND Age <= 1001, Age >= 1001 AND Age <= 1002, Age >= 1002 AND Age <= 1003, Age >= 1003 AND Age <= 1004, Age >= 1004 AND Age <= 1005, Age >= 1005 AND Age <= 1006, Age >= 1006 AND Age <= 1007, Age >= 1007 AND Age <= 1008, Age >= 1008 AND Age <= 1009, Age >= 1009 AND Age <= 1010, Age >= 1010 AND Age <= 1011, Age >= 1011 AND Age <= 1012, Age >= 1012 AND Age <= 1013, Age >= 1013 AND Age <= 1014, Age >= 1014 AND Age <= 1015, Age >= 1015 AND Age <= 1016, Age >= 1016 AND Age <= 1017, Age >= 1017 AND Age <= 1018, Age >= 1018 AND Age <= 1019, Age >= 1019 AND Age <= 1020, Age >= 1020 AND Age <= 1021, Age >= 1021 AND Age <= 1022, Age >= 1022 AND Age <= 1023, Age >= 1023 AND Age <= 1024, Age >= 1024 AND Age <= 1025, Age >= 1025 AND Age <= 1026, Age >= 1026 AND Age <= 1027, Age >= 1027 AND Age <= 1028, Age >= 1028 AND Age <= 1029, Age >= 1029 AND Age <= 1030, Age >= 1030 AND Age <= 1031, Age >= 1031 AND Age <= 1032, Age >= 1032 AND Age <= 1033, Age >= 1033 AND Age <= 1034, Age >= 1034 AND Age <= 1035, Age >= 1035 AND Age <= 1036, Age >= 1036 AND Age <= 1037, Age >= 1037 AND Age <= 1038, Age >= 1038 AND Age <= 1039, Age >= 1039 AND Age <= 1040, Age >= 1040 AND Age <= 1041, Age >= 1041 AND Age <= 1042, Age >= 1042 AND Age <= 1043, Age >= 1043 AND Age <= 1044, Age >= 1044 AND Age <= 1045, Age >= 1045 AND Age <= 1046, Age >= 1046 AND Age <= 1047, Age >= 1047 AND Age <= 1048, Age >= 1048 AND Age <= 1049, Age >= 1049 AND Age <= 1050, Age >= 1050 AND Age <= 1051, Age >= 1051 AND Age <= 1052, Age >= 1052 AND Age <= 1053, Age >= 1053 AND Age <= 1054, Age >= 1054 AND Age <= 1055, Age >= 1055 AND Age <= 1056, Age >= 1056 AND Age <= 1057, Age >= 1057 AND Age <= 1058, Age >= 1058 AND Age <= 1059, Age >= 1059 AND Age <= 1060, Age >= 1060 AND Age <= 1061, Age >= 1061 AND Age <= 1062, Age >= 1062 AND Age <= 1063, Age >= 1063 AND Age <= 1064, Age >= 1064 AND Age <= 1065, Age >= 1065 AND Age <= 1066, Age >= 1066 AND Age <= 1067, Age >= 1067 AND Age <= 1068, Age >= 1068 AND Age <= 1069, Age >= 1069 AND Age <= 1070, Age >= 1070 AND Age <= 1071, Age >= 1071 AND Age <= 1072, Age >= 1072 AND Age <= 1073, Age >= 1073 AND Age <= 1074, Age >= 1074 AND Age <= 1075, Age >= 1075 AND Age <= 1076, Age >= 1076 AND Age <= 1077, Age >= 1077 AND Age <= 1078, Age >= 1078 AND Age <= 1079, Age >= 1079 AND Age <= 1080, Age >= 1080 AND Age <= 1081, Age >= 1081 AND Age <= 1082, Age >= 1082 AND Age <= 1083, Age >= 1083 AND Age <= 1084, Age >= 1084 AND Age <= 1085, Age >= 1085 AND Age <= 1086, Age >= 1086 AND Age <= 1087, Age >= 1087 AND Age <= 1088, Age >= 1088 AND Age <= 1089, Age >= 1089 AND Age <= 1090, Age >= 1090 AND Age <= 1091, Age >= 1091 AND Age <= 1092, Age >= 1092 AND Age <= 1093, Age >= 1093 AND Age <= 1094, Age >= 1094 AND Age <= 1095, Age >= 1095 AND Age <= 1096, Age >= 1096 AND Age <= 1097, Age >= 1097 AND Age <= 1098, Age >= 1098 AND Age <= 1099, Age >= 1099 AND Age <= 1100, Age >= 1100 AND Age <= 1101, Age >= 1101 AND Age <= 1102, Age >= 1102 AND Age <= 1103, Age >= 1103 AND Age <= 1104, Age >= 1104 AND Age <= 1105, Age >= 1105 AND Age <= 1106, Age >= 1106 AND Age <= 1107, Age >= 1107 AND Age <= 1108, Age >= 1108 AND Age <= 1109, Age >= 1109 AND Age <= 1110, Age >= 1110 AND Age <= 1111, Age >= 1111 AND Age <= 1112, Age >= 1112 AND Age <= 1113, Age >= 1113 AND Age <= 1114, Age >= 1114 AND Age <= 1115, Age >= 1115 AND Age <= 1116, Age >= 1116 AND Age <= 1117, Age >= 1117 AND Age <= 1118, Age >= 1118 AND Age <= 1119, Age >= 1119 AND Age <= 1120, Age >= 1120 AND Age <= 1121, Age >= 1121 AND Age <= 1122, Age >= 1122 AND Age <= 1123, Age >= 1123 AND Age <= 1124, Age >= 1124 AND Age <= 1125, Age >= 1125 AND Age <= 1126, Age >= 1126 AND Age <= 1127, Age >= 1127 AND Age <= 1128, Age >= 1128 AND Age <= 1129, Age >= 1129 AND Age <= 1130, Age >= 1130 AND Age <= 1131, Age >= 1131 AND Age <= 1132, Age >= 1132 AND Age <= 1133, Age >= 1133 AND Age <= 1134, Age >= 1134 AND Age <= 1135, Age >= 1135 AND Age <= 1136, Age >= 1136 AND Age <= 1137, Age >= 1137 AND Age <= 1138, Age >= 1138 AND Age <= 1139, Age >= 1139 AND Age <= 1140, Age >= 1140 AND Age <= 1141, Age >= 1141 AND Age <= 1142, Age >= 1142 AND Age <= 1143, Age >= 1143 AND Age <= 1144, Age >= 1144 AND Age <= 1145, Age >= 1145 AND Age <= 1146, Age >= 1146 AND Age <= 1147, Age >= 1147 AND Age <= 1148, Age >= 1148 AND Age <= 1149, Age >= 1149 AND Age <= 1150, Age >= 1150 AND Age <= 1151, Age >= 1151 AND Age <= 1152, Age >= 1152 AND Age <= 1153, Age >= 1153 AND Age <= 1154, Age >= 1154 AND Age <= 1155, Age >= 1155 AND Age <= 1156, Age >= 1156 AND Age <= 1157, Age >= 1157 AND Age <= 1158, Age >= 1158 AND Age <= 1159, Age >= 1159 AND Age <= 1160, Age >= 1160 AND Age <= 1161, Age >= 1161 AND Age <= 1162, Age >= 1162 AND Age <= 1163, Age >= 1163 AND Age <= 1164, Age >= 1164 AND Age <= 1165, Age >= 1165 AND Age <= 1166, Age >= 1166 AND Age <= 1167, Age >= 1167 AND Age <= 1168, Age >= 1168 AND Age <= 1169, Age >= 1169 AND Age <= 1170, Age >= 1170 AND Age <= 1171, Age >= 1171 AND Age <= 1172, Age >= 1172 AND Age <= 1173, Age >= 1173 AND Age <= 1174, Age >= 1174 AND Age <= 1175, Age >= 1175 AND Age <= 1176, Age >= 1176 AND Age <= 1177, Age >= 1177 AND Age <= 1178, Age >= 1178 AND Age <= 1179, Age >= 1179 AND Age <= 1180, Age >= 1180 AND Age <= 1181, Age >= 1181 AND Age <= 1182, Age >= 1182 AND Age <= 1183, Age >= 1183 AND Age <= 1184, Age >= 1184 AND Age <= 1185, Age >= 1185 AND Age <= 1186, Age >= 1186 AND Age <= 1187, Age >= 1187 AND Age <= 1188, Age >= 1188 AND Age <= 1189, Age >= 1189 AND Age <= 1190, Age >= 1190 AND Age <= 1191, Age >= 1191 AND Age <= 1192, Age >= 1192 AND Age <= 1193, Age >= 1193 AND Age <= 1194, Age >= 1194 AND Age <= 1195, Age >= 1195 AND Age <= 1196, Age >= 1196 AND Age <= 1197, Age >= 1197 AND Age <= 1198, Age >= 1198 AND Age <= 1199, Age >= 1199 AND Age <= 1200, Age >= 1200 AND Age <= 1201, Age >= 1201 AND Age <= 1202, Age >= 1202 AND Age <= 1203, Age >= 1203 AND Age <= 1204, Age >= 1204 AND Age <= 1205, Age >= 1205 AND Age <= 1206, Age >= 1206 AND Age <= 1207, Age >= 1207 AND Age <= 1208, Age >= 1208 AND Age <= 1209, Age >= 1209 AND Age <= 1210, Age >= 1210 AND Age <= 1211, Age >= 1211 AND Age <= 1212, Age >= 1212 AND Age <= 1213, Age >= 1213 AND Age <= 1214, Age >= 1214 AND Age <= 1215, Age >= 1215 AND Age <= 1216, Age >= 1216 AND Age <= 1217, Age >= 1217 AND Age <= 1218, Age >= 1218 AND Age <= 1219, Age >= 1219 AND Age <= 1220, Age >= 1220 AND Age <= 1221, Age >= 1221 AND Age <= 1222, Age >= 1222 AND Age <= 1223, Age >= 1223 AND Age <= 1224, Age >= 1224 AND Age <= 1225, Age >= 1225 AND Age <= 1226, Age >= 1226 AND Age <= 1227, Age >= 1227 AND Age <= 1228, Age >= 1228 AND Age <= 1229, Age >= 1229 AND Age <= 1230, Age >= 1230 AND Age <= 1231, Age >= 1231 AND Age <= 1232, Age >= 1232 AND Age <= 1233, Age >= 1233 AND Age <= 1234, Age >= 1234 AND Age <= 1235, Age >= 1235 AND Age <= 1236, Age >= 1236 AND Age <= 1237, Age >= 1237 AND Age <= 1238, Age >= 1238 AND Age <= 1239, Age >= 1239 AND Age <= 1240, Age >= 1240 AND Age <= 1241, Age >= 1241 AND Age <= 1242, Age >= 1242 AND Age <= 1243, Age >= 1243 AND Age <= 1244, Age >= 1244 AND Age <= 1245, Age >= 1245 AND Age <= 1246, Age >= 1246 AND Age <= 1247, Age >= 1247 AND Age <= 1248, Age >= 1248 AND Age <= 1249, Age >= 1249 AND Age <= 1250, Age >= 1250 AND Age <= 1251, Age >= 1251 AND Age <= 1252, Age >= 1252 AND Age <= 1253, Age >= 1253 AND Age <= 1254, Age >= 1254 AND Age <= 1255, Age >= 1255 AND Age <= 1256, Age >= 1256 AND Age <= 1257, Age >= 1257 AND Age <= 1258, Age >= 1258 AND Age <= 1259, Age >= 1259 AND Age <= 1260, Age >= 1260 AND Age <= 1261, Age >= 1261 AND Age <= 1262, Age >= 1262 AND Age <= 1263, Age >= 1263 AND Age <= 1264, Age >= 1264 AND Age <= 1265, Age >= 1265 AND Age <= 1266, Age >= 1266 AND Age <= 1267, Age >= 1267 AND Age <= 1268, Age >= 1268 AND Age <= 1269, Age >= 1269 AND Age <= 1270, Age >= 1270 AND Age <= 1271, Age >= 1271 AND Age <= 1272, Age >= 1272 AND Age <= 1273, Age >= 1273 AND Age <= 1274, Age >= 1274 AND Age <= 1275, Age >= 1275 AND Age <= 1276, Age >= 1276 AND Age <= 1277, Age >= 1277 AND Age <= 1278, Age >= 1278 AND Age <= 1279, Age >= 1279 AND Age <= 1280, Age >= 1280 AND Age <= 1281, Age >= 1281 AND Age <= 1282, Age >= 1282 AND Age <= 1283, Age >= 1283 AND Age <= 1284, Age >= 1284 AND Age <= 1285, Age >= 1285 AND Age <= 1286, Age >= 1286 AND Age <= 1287, Age >= 1287 AND Age <= 1288, Age >= 1288 AND Age <= 1289, Age >= 1289 AND Age <= 1290, Age >= 1290 AND Age <= 1291, Age >= 1291 AND Age <= 1292, Age >= 1292 AND Age <= 1293, Age >= 1293 AND Age <= 1294, Age >= 1294 AND Age <= 1295, Age >= 1295 AND Age <= 1296, Age >= 1296 AND Age <= 1297, Age >= 1297 AND Age <= 1298, Age >= 1298 AND Age <= 1299, Age >= 1299 AND Age <= 1300, Age >= 1300 AND Age <= 1301, Age >= 1301 AND Age <= 1302, Age >= 1302 AND Age <= 1303, Age >= 1303 AND Age <= 1304, Age >= 1304 AND Age <= 1305, Age >= 1305 AND Age <= 1306, Age >= 1306 AND Age <= 1307, Age >= 1307 AND Age <= 1308, Age >= 1308 AND Age <= 1309, Age >= 1309 AND Age <= 1310, Age >= 1310 AND Age <= 1311, Age >= 1311 AND Age <= 1312, Age >= 1312 AND Age <= 1313, Age >= 1313 AND Age <= 1314, Age >= 1314 AND Age <= 1315, Age >= 1315 AND Age <= 1316, Age >= 1316 AND Age <= 1317, Age >= 1317 AND Age <= 1318, Age >= 1318 AND Age <= 1319, Age >= 1319 AND Age <= 1320, Age >= 1320 AND Age <= 1321, Age >= 1321 AND Age <= 1322, Age >= 1322 AND Age <= 1323, Age >= 1323 AND Age <= 1324, Age >= 1324 AND Age <= 1325, Age >= 1325 AND Age <= 1326, Age >= 1326 AND Age <= 1327, Age >= 1327 AND Age <= 1328, Age >= 1328 AND Age <= 1329, Age >= 1329 AND Age <= 1330, Age >= 1330 AND Age <= 1331, Age >= 1331 AND Age <= 1332, Age >= 1332 AND Age <= 1333, Age >= 1333 AND Age <= 1334, Age >= 1334 AND Age <= 1335, Age >= 1335 AND Age <= 1336, Age >= 1336 AND Age <= 1337, Age >= 1337 AND Age <= 1338, Age >= 1338 AND Age <= 1339, Age >= 1339 AND Age <= 1340, Age >= 1340 AND Age <= 1341, Age >= 1341 AND Age <= 1342, Age >= 1342 AND Age <= 1343, Age >= 1343 AND Age <= 1344, Age >= 1344 AND Age <= 1345, Age >= 1345 AND Age <= 1346, Age >= 1346 AND Age <= 1347, Age >= 1347 AND Age <= 1348, Age >= 1348 AND Age <= 1349, Age >= 1349 AND Age <= 1350, Age >= 1350 AND Age <= 1351, Age >= 1351 AND Age <= 1352, Age >= 1352 AND Age <= 1353, Age >= 1353 AND Age <= 1354, Age >= 1354 AND Age <= 1355, Age >= 1355 AND Age <= 1356, Age >= 1356 AND Age <= 1357, Age >= 1357 AND Age <= 1358, Age >= 1358 AND Age <= 1359, Age >= 1359 AND Age <= 1360, Age >= 1360 AND Age <= 1361, Age >= 1361 AND Age <= 1362, Age >= 1362 AND Age <= 1363, Age >= 1363 AND Age <= 1364, Age >= 1364 AND Age <= 1365, Age >= 1365 AND Age <= 1366, Age >= 1366 AND Age <= 1367, Age >= 1367 AND Age <= 1368, Age >= 1368 AND Age <= 1369, Age >= 1369 AND Age <= 1370, Age >= 1370 AND Age <= 1371, Age >= 1371 AND Age <= 1372, Age >= 1372 AND Age <= 1373, Age >= 1373 AND Age <= 1374, Age >= 1374 AND Age <= 1375, Age >= 1375 AND Age <= 1376, Age >= 1376 AND Age <= 1377, Age >= 1377 AND Age <= 1378, Age >= 1378 AND Age <= 1379, Age >= 1379 AND Age <= 1380, Age >= 1380 AND Age <= 1381, Age >= 1381 AND Age <= 1382, Age >= 1382 AND Age <= 1383, Age >= 1383 AND Age <= 1384, Age >= 1384 AND Age <= 1385, Age >= 1385 AND Age <= 1386, Age >= 1386 AND Age <= 1387, Age >= 1387 AND Age <= 1388, Age >= 1388 AND Age <= 1389, Age >= 1389 AND Age <= 1390, Age >= 1390 AND Age <= 1391, Age >= 1391 AND Age <= 1392, Age >= 1392 AND Age <= 1393, Age >= 1393 AND Age <= 1394, Age >= 1394 AND Age <= 1395, Age >= 1395 AND Age <= 1396, Age >= 1396 AND Age <= 1397, Age >= 1397 AND Age <= 1398, Age >= 1398 AND Age <= 1399, Age >= 1399 AND Age <= 1400, Age >= 1400 AND Age <= 1401, Age >= 1401 AND Age <= 1402, Age >= 1402 AND Age <= 1403, Age >= 1403 AND Age <= 1404, Age >= 1404 AND Age <= 1405, Age >= 1405 AND Age <= 1406, Age >= 1406 AND Age <= 1407, Age >= 1407 AND Age <= 1408, Age >= 1408 AND Age <= 1409, Age >= 1409 AND Age <= 1410, Age >= 1410 AND Age <= 1411, Age >= 1411 AND Age <= 1412, Age >= 1412 AND Age <= 1413, Age >= 1413 AND Age <= 1414, Age >= 1414 AND Age <= 1415, Age >= 1415 AND Age <= 1416, Age >= 1416 AND Age <= 1417, Age >= 1417 AND Age <= 1418, Age >= 1418 AND Age <= 1419, Age >= 1419 AND Age <= 1420, Age >= 1420 AND Age <= 1421, Age >= 1421 AND Age <= 1422, Age >= 1422 AND Age <= 1423, Age >= 1423 AND Age <= 1424, Age >= 1424 AND Age <= 1425, Age >= 1425 AND Age <= 1426, Age >= 1426 AND Age <= 1427, Age >= 1427 AND Age <= 1428, Age >= 1428 AND Age <= 1429, Age >= 1429 AND Age <= 1430, Age >= 1430 AND Age <= 1431, Age >= 1431 AND Age <= 1432, Age >= 1432 AND Age <= 1433, Age >= 1433 AND Age <= 1434, Age >= 1434 AND Age <= 1435, Age >= 1435 AND Age <= 1436, Age >= 1436 AND Age <= 1437, Age >= 1437 AND Age <= 1438, Age >= 1438 AND Age <= 1439, Age >= 1439 AND Age <= 1440, Age >= 1440 AND Age <= 1441, Age >= 1441 AND Age <= 1442, Age >= 1442 AND Age <= 1443, Age >= 1443 AND Age <= 1444, Age >= 1444 AND Age <= 1445, Age >= 1445 AND Age <= 1446, Age >= 1446 AND Age <= 1447, Age >= 1447 AND Age <= 1448, Age >= 1448 AND Age <= 1449, Age >= 1449 AND Age <= 1450, Age >= 1450 AND Age <= 1451, Age >= 1451 AND Age <= 1452, Age >= 1452 AND Age <= 1453, Age >= 1453 AND Age <= 1454, Age >= 1454 AND Age <= 1455, Age >= 1455 AND Age <= 1456, Age >= 1456 AND Age <= 1457, Age >= 1457 AND Age <= 1458, Age >= 1458 AND Age <= 1459, Age >= 1459 AND Age <= 1460, Age >= 1460 AND Age <= 1461, Age >= 1461 AND Age <= 1462, Age >= 1462 AND Age <= 1463, Age >= 1463 AND Age <= 1464, Age >= 1464 AND Age <= 1465, Age >= 1465 AND Age <= 1466, Age >= 1466 AND Age <= 1467, Age >= 1467 AND Age <= 1468, Age >= 1468 AND Age <= 1469, Age >= 1469 AND Age <= 1470, Age >= 1470 AND Age <= 1471, Age >= 1471 AND Age <= 1472, Age >= 1472 AND Age <= 1473, Age >= 1473 AND Age <= 1474, Age >= 1474 AND Age <= 1475, Age >= 1475 AND Age <= 1476, Age >= 1476 AND Age <= 1477, Age >= 1477 AND Age <= 1478, Age >= 1478 AND Age <= 1479, Age >= 1479 AND Age <= 1480, Age >= 1480 AND Age <= 1481, Age >= 1481 AND Age <= 1482, Age >= 1482 AND Age <= 1483, Age >= 1483 AND Age <= 1484, Age >= 1484 AND Age <= 1485, Age >= 1485 AND Age <= 1486, Age >= 1486 AND Age <= 1487, Age >= 1487 AND Age <= 1488, Age >= 1488 AND Age <= 1489, Age >= 1489 AND Age <= 1490, Age >= 1490 AND Age <= 1491, Age >= 1491 AND Age <= 1492, Age >= 1492 AND Age <= 1493, Age >= 1493 AND Age <= 1494, Age >= 1494 AND Age <= 1495, Age >= 1495 AND Age <= 1496, Age >= 1496 AND Age <= 1497, Age >= 1497 AND Age <= 1498, Age >= 1498 AND Age <= 1499, Age >= 1499 AND Age <= 1500, Age >= 1500 AND Age <= 1501, Age >= 1501 AND Age <= 1502, Age >= 1502 AND Age <= 1503, Age >= 1503 AND Age <= 1504, Age >= 1504 AND Age <= 1505, Age >= 1505 AND Age <= 1506, Age >= 1506 AND Age <= 1507, Age >= 1507 AND Age <= 1508, Age >= 1508 AND Age <= 1509, Age >= 1509 AND Age <= 1510, Age >= 1510 AND Age <= 1511, Age >= 1511 AND Age <= 1512, Age >= 1512 AND Age <= 1513, Age >= 1513 AND Age <= 1514, Age >= 1514 AND Age <= 1515, Age >= 1515 AND Age <= 1516, Age >= 1516 AND Age <= 1517, Age >= 1517 AND Age <= 1518, Age >= 1518 AND Age <= 1519, Age >= 1519 AND Age <= 1520, Age >= 1520 AND Age <= 1521, Age >= 1521 AND Age <= 1522, Age >= 1522 AND Age <= 1523, Age >= 1523 AND Age <= 1524, Age >= 1524 AND Age <= 1525, Age >= 1525 AND Age <= 1526, Age >= 1526 AND Age <= 1527, Age >= 1527 AND Age <= 1528, Age >= 1528 AND Age <= 1529, Age >= 1529 AND Age <= 1530, Age >= 1530 AND Age <= 1531, Age >= 1531 AND Age <= 1532, Age >= 1532 AND Age <= 1533, Age >= 1533 AND Age <= 1534, Age >= 1534 AND Age <= 1535, Age >= 1535 AND Age <= 1536, Age >= 1536 AND Age <= 1537, Age >= 1537 AND Age <= 1538, Age >= 1538 AND Age <= 1539, Age >= 1539 AND Age <= 1540, Age >= 1540 AND Age <= 1541, Age >= 1541 AND Age <= 1542, Age >= 1542 AND Age <= 1543, Age >= 1543 AND Age <= 1544, Age >= 1544 AND Age <= 1545, Age >= 1545 AND Age <= 1546, Age >= 1546 AND Age <= 1547, Age >= 1547 AND Age <= 1548, Age >= 1548 AND Age <= 1549, Age >= 1549 AND Age <= 1550, Age >= 1550 AND Age <= 1551, Age >= 1551 AND Age <= 1552, Age >= 1552 AND Age <= 1553, Age >= 1553 AND Age <= 1554, Age >= 1554 AND Age <= 1555, Age >= 1555 AND Age <= 1556, Age >= 1556 AND Age <= 1557, Age >= 1557 AND Age <= 1558, Age >= 1558 AND Age <= 1559, Age >= 1559 AND Age <= 1560, Age >= 1560 AND Age <= 1561, Age >= 1561 AND Age <= 1562, Age >= 1562 AND Age <= 1563, Age >= 1563 AND Age <= 1564, Age >= 1564 AND Age <= 1565, Age >= 1565 AND Age <= 1566, Age >= 1566 AND Age <= 1567, Age >= 1567 AND Age <= 1568, Age >= 1568 AND Age <= 1569, Age >= 1569 AND Age <= 1570, Age >= 1570 AND Age <= 1571, Age >= 1571 AND Age <= 1572, Age >= 1572 AND Age <= 1573, Age >= 1573 AND Age <= 1574, Age >= 1574 AND Age <= 1575, Age >= 1575 AND Age <= 1576, Age >= 1576 AND Age <= 1577, Age >= 1577 AND Age <= 1578, Age >= 1578 AND Age <= 1579, Age >= 1579 AND Age <= 1580, Age >= 1580 AND Age <= 1581, Age >= 1581 AND Age <= 1582, Age >= 1582 AND Age <= 1583, Age >= 1583 AND Age <= 1584, Age >= 1584 AND Age <= 1585, Age >= 1585 AND Age <= 1586, Age >= 1586 AND Age <= 1587, Age >= 1587 AND Age <= 1588, Age >= 1588 AND Age <= 1589, Age >= 1589 AND Age <= 1590, Age >= 1590 AND Age <= 1591, Age >= 1591 AND Age <= 1592, Age >= 1592 AND Age <= 1593, Age >= 1593 AND Age <= 1594, Age >= 1594 AND Age <= 1595, Age >= 1595 AND Age <= 1596, Age >= 1596 AND Age <= 1597, Age >= 1597 AND Age <= 1598, Age >= 1598 AND Age <= 1599, Age >= 1599 AND Age <= 1600, Age >= 1600 AND Age <= 1601, Age >= 1601 AND Age <= 1602, Age >= 1602 AND Age <= 1603, Age >= 1603 AND Age <= 1604, Age >= 1604 AND Age <= 1605, Age >= 1605 AND Age <= 1606, Age >= 1606 AND Age <= 1607, Age >= 1607 AND Age <= 1608, Age >= 1608 AND Age <= 1609, Age >= 1609 AND Age <= 1610, Age >= 1610 AND Age <= 1611, Age >= 1611 AND Age <= 1612, Age >= 1612 AND Age <= 1613, Age >= 1613 AND Age <= 1614, Age >= 1614 AND Age <= 1615, Age >= 1615 AND Age <= 1616, Age >= 1616 AND Age <= 1617, Age >= 1617 AND Age <= 1618, Age >= 1618 AND Age <= 1619, Age >= 1619 AND Age <= 1620, Age >= 1620 AND Age <= 1621, Age >= 1621 AND Age <= 1622, Age >= 1622 AND Age <= 1623, Age >= 1623 AND Age <= 1624, Age >= 1624 AND Age <= 1625, Age >= 1625 AND Age <= 1626, Age >= 1626 AND Age <= 1627, Age >= 1627 AND Age <= 1628, Age >= 1628 AND Age <= 1629, Age >= 1629 AND Age <= 1630, Age >= 1630 AND Age <= 1631, Age >= 1631 AND Age <= 1632, Age >= 1632 AND Age <= 1633, Age >= 1633 AND Age <= 1634, Age >= 1634 AND Age <= 1635, Age >= 1635 AND Age <= 1636, Age >= 1636 AND Age <= 1637, Age >= 1637 AND Age <= 1638, Age >= 1638 AND Age <= 1639, Age >= 1639 AND Age <= 1640, Age >= 1640 AND Age <= 1641, Age >= 1641 AND Age <= 1642, Age >= 1642 AND Age <= 1643, Age >= 1643 AND Age <= 1644, Age >= 1644 AND Age <= 1645, Age >= 1645 AND Age <= 1646, Age >= 1646 AND Age <= 1647, Age >= 1647 AND Age <= 1648, Age >= 1648 AND Age <= 1649, Age >= 1649 AND Age <= 1650, Age >= 1650 AND Age <= 1651, Age >= 1651 AND Age <= 1652, Age >= 1652 AND Age <= 1653, Age >= 1653 AND Age <= 1654, Age >= 1654 AND Age <= 1655, Age >= 1655 AND Age <= 1656, Age >= 1656 AND Age <= 1657, Age >= 1657 AND Age <= 1658, Age >= 1658 AND Age <= 1659, Age >= 1659 AND Age <= 1660, Age >= 1660 AND Age <= 1661, Age >= 1661 AND Age <= 1662, Age >= 1662 AND Age <= 1663, Age >= 1663 AND Age <= 1664, Age >= 1664 AND Age <= 1665, Age >= 1665 AND Age <= 1666, Age >= 1666 AND Age <= 1667, Age >= 1667 AND Age <= 1668, Age >= 1668 AND Age <= 1669, Age >= 1669 AND Age <= 1670, Age >= 1670 AND Age <= 1671, Age >= 1671 AND Age <= 1672, Age >= 1672 AND Age <= 1673, Age >= 1673 AND Age <= 1674, Age >= 1674 AND Age <= 1675, Age >= 1675 AND Age <= 1676, Age >= 1676 AND Age <= 1677, Age >= 1677 AND Age <= 1678, Age >= 1678 AND Age <= 1679, Age >= 1679 AND Age <= 1680, Age >= 1680 AND Age <= 1681, Age >= 1681 AND Age <= 1682, Age >= 1682 AND Age <= 1683, Age >= 1683 AND Age <= 1684, Age >= 1684 AND Age <= 1685, Age >= 1685 AND Age <= 1686, Age >= 1686 AND Age <= 1687, Age >= 1687 AND Age <= 1688, Age >= 1688 AND Age <= 1689, Age >= 1689 AND Age <= 1690, Age >= 1690 AND Age <= 1691, Age >= 1691 AND Age <= 1692, Age >= 1692 AND Age <= 1693, Age >= 1693 AND Age <= 1694, Age >= 1694 AND Age <= 1695, Age >= 1695 AND Age <= 1696, Age >= 1696 AND Age <= 1697, Age >= 1697 AND Age <= 1698, Age >= 1698 AND Age <= 1699, Age >= 1699 AND Age <= 1700, Age >= 1700 AND Age <= 1701, Age >= 1701 AND Age <= 1702, Age >= 1702 AND Age <= 1703, Age >= 1703 AND Age <= 1704, Age >= 1704 AND Age <= 1705, Age >= 1705 AND Age <= 1706, Age >= 1706 AND Age <= 1707, Age >= 1707 AND Age <= 1708, Age >= 1708 AND Age <= 1709, Age >= 1709 AND Age <= 1710, Age >= 1710 AND Age <= 1711, Age >= 1711 AND Age <= 1712, Age >= 1712 AND Age <= 1713, Age >= 1713 AND Age <= 1714, Age >= 1714 AND Age <= 1715, Age >= 1715 AND Age <= 1716, Age >= 1716 AND Age <= 1717, Age >= 1717 AND Age <= 1718, Age >= 1718 AND Age <= 1719, Age >= 1719 AND Age <= 1720, Age >= 1720 AND Age <= 1721, Age >= 1721 AND Age <= 1722, Age >= 1722 AND Age <= 1723, Age >= 1723 AND Age <= 1724, Age >= 1724 AND Age <= 1725, Age >= 1725 AND Age <= 1726, Age >= 1726 AND Age <= 1727, Age >= 1727 AND Age <= 1728, Age >= 1728 AND Age <= 1729, Age >= 1729 AND Age <= 1730, Age >= 1730 AND Age <= 1731, Age >= 1731 AND Age <= 1732, Age >= 1732 AND Age <= 1733, Age >= 1733 AND Age <= 1734, Age >= 1734 AND Age <= 1735, Age >= 1735 AND Age <= 1736, Age >= 1736 AND Age <= 1737, Age >= 1737 AND Age <= 1738, Age >= 1738 AND Age <= 1739, Age >= 1739 AND Age <= 1740, Age >= 1740 AND Age <= 1741, Age >= 1741 AND Age <= 1742, Age >= 1742 AND Age <= 1743, Age >= 1743 AND Age <= 1744, Age >= 1744 AND Age <= 1745, Age >= 1745 AND Age <= 1746, Age >= 1746 AND Age <= 1747, Age >= 1747 AND Age <= 1748, Age >= 1748 AND Age <= 1749, Age >= 1749 AND Age <= 1750, Age >= 1750 AND Age <= 1751, Age >= 1751 AND Age <= 1752, Age >= 1752 AND Age <= 1753, Age >= 1753 AND Age <= 1754, Age >= 1754 AND Age <= 1755, Age >= 1755 AND Age <= 1756, Age >= 1756 AND Age <= 1757, Age >= 1757 AND Age <= 1758, Age >= 1758 AND Age <= 1759, Age >= 1759 AND Age <= 1760, Age >= 1760 AND Age <= 1761, Age >= 1761 AND Age <= 1762, Age >= 1762 AND Age <= 1763, Age >= 1763 AND Age <= 1764, Age >= 1764 AND Age <= 1765, Age >= 1765 AND Age <= 1766, Age >= 1766 AND Age <= 1767, Age >= 1767 AND Age <= 1768, Age >= 1768 AND Age <= 1769, Age >= 1769 AND Age <= 1770, Age >= 1770 AND Age <= 1771, Age >= 1771 AND Age <= 1772, Age >= 1772 AND Age <= 1773, Age >= 1773 AND Age <= 1774, Age >= 1774 AND Age <= 1775, Age >= 1775 AND Age <= 1776, Age >= 1776 AND Age <= 1777, Age >= 1777 AND Age <= 1778, Age >= 1778 AND Age <= 1779, Age >= 1779 AND Age <= 1780, Age >= 1780 AND Age <= 1781, Age >= 1781 AND Age <= 1782, Age >= 1782 AND Age <= 1783, Age >= 1783 AND Age <= 1784, Age >= 1784 AND Age <= 1785, Age >= 1785 AND Age <= 1786, Age >= 1786 AND Age <= 1787, Age >= 1787 AND Age <= 1788, Age >= 1788 AND Age <= 1789, Age >= 1789 AND Age <= 1790, Age >= 1790 AND Age <= 1791, Age >= 1791 AND Age <= 1792, Age >= 1792 AND Age <= 1793, Age >= 1793 AND Age <= 1794, Age >= 1794 AND Age <= 1795, Age >= 1795 AND Age <= 1796, Age >= 1796 AND Age <= 1797, Age >= 1797 AND Age <= 1798, Age >= 1798 AND Age <= 1799, Age >= 1799 AND Age <= 1800, Age >= 1800 AND Age <= 1801, Age >= 1801 AND Age <= 1802, Age >= 1802 AND Age <= 1803, Age >= 1803 AND Age <= 1804, Age >= 1804 AND Age <= 1805, Age >= 1805 AND Age <= 1806, Age >= 1806 AND Age <= 1807, Age >= 1807 AND Age <= 1808, Age >= 1808 AND Age <= 1809, Age >= 1809 AND Age <= 1810, Age >= 1810 AND Age <= 1811, Age >= 1811 AND Age <= 1812, Age >= 1812 AND Age <= 1813, Age >= 1813 AND Age <= 1814, Age >= 1814 AND Age <= 1815, Age >= 1815 AND Age <= 1816, Age >= 1816 AND Age <= 1817, Age >= 1817 AND Age <= 1818, Age >= 1818 AND Age <= 1819, Age >= 1819 AND Age <= 1820, Age >= 1820 AND Age <= 1821, Age >= 1821 AND Age <= 1822, Age >= 1822 AND Age <= 1823, Age >= 1823 AND Age <= 1824, Age >= 1824 AND Age <= 1825, Age >= 1825 AND Age <= 1826, Age >= 1826 AND Age <= 1827, Age >= 1827 AND Age <= 1828, Age >= 1828 AND Age <= 1829, Age >= 1829 AND Age <= 1830, Age >= 1830 AND Age <= 1831, Age >= 1831 AND Age <= 1832, Age >= 1832 AND Age <= 1833, Age >= 1833 AND Age <= 1834, Age >= 1834 AND Age <= 1835, Age >= 1835 AND Age <= 1836, Age >= 1836 AND Age <= 1837, Age >= 1837 AND Age <= 1838, Age >= 1838 AND Age <= 1839, Age >= 1839 AND Age <= 1840, Age >= 1840 AND Age <= 1841, Age >= 1841 AND Age <= 1842, Age >= 1842 AND Age <= 1843, Age >= 1843 AND Age <= 1844, Age >= 1844 AND Age <= 1845, Age >= 1845 AND Age <= 1846, Age >= 1846 AND Age <= 1847, Age >= 1847 AND Age <= 1848, Age >= 1848 AND Age <= 1849, Age >= 1849 AND Age <= 1850, Age >= 1850 AND Age <= 1851, Age >= 1851 AND Age <= 1852, Age >= 1852 AND Age <= 1853, Age >= 1853 AND Age <= 1854, Age >= 1854 AND Age <= 1855, Age >= 1855 AND Age <= 1856, Age >= 1856 AND Age <= 1857, Age >= 1857 AND Age <= 1858, Age >= 1858 AND Age <= 1859, Age >= 1859 AND Age <= 1860, Age >= 1860 AND Age <= 1861, Age >= 1861 AND Age <= 1862, Age >= 1862 AND Age <= 1863, Age >= 1863 AND Age <= 1864, Age >= 1864 AND Age <= 1865, Age >= 1865 AND Age <= 1866, Age >= 1866 AND Age <= 1867, Age >= 1867 AND Age <= 1868, Age >= 1868 AND Age <= 1869, Age >= 1869 AND Age <= 1870, Age >= 1870 AND Age <= 1871, Age >= 1871 AND Age <= 1872, Age >= 1872 AND Age <= 1873, Age >= 1873 AND Age <= 1874, Age >= 1874 AND Age <= 1875, Age >= 1875 AND Age <= 1876, Age >= 1876 AND Age <= 1877, Age >= 1877 AND Age <= 1878, Age >= 1878 AND Age <= 1879, Age >= 1879 AND Age <= 1880, Age >= 1880 AND Age <= 1881, Age >= 1881 AND Age <= 1882, Age >= 1882 AND Age <= 1883, Age >= 1883 AND Age <= 1884, Age >= 1884 AND Age <= 1885, Age >= 1885 AND Age <= 1886, Age >= 1886 AND Age <= 1887, Age >= 1887 AND Age <= 1888, Age >= 1888 AND Age <= 1889, Age >= 1889 AND Age <= 1890, Age >= 1890 AND Age <= 1891, Age >= 1891 AND Age <= 1892, Age >= 1892 AND Age <= 1893, Age >= 1893 AND Age <= 1894, Age >= 1894 AND Age <= 1895, Age >= 1895 AND Age <= 1896, Age >= 1896 AND Age <= 1897, Age >= 1897 AND Age <= 1898, Age >= 1898 AND Age <= 1899, Age >= 1899 AND Age <= 1900, Age >= 1900 AND Age <= 1901, Age >= 1901 AND Age <= 1902, Age >= 1902 AND Age <= 1903, Age >= 1903 AND Age <= 1904, Age >= 1904 AND Age <= 1905, Age >= 1905 AND Age <= 1906, Age >= 1906 AND Age <= 1907, Age >= 1907 AND Age <= 1908, Age >= 1908 AND Age <= 1909, Age >= 1909 AND Age <= 1910, Age >= 1910 AND Age <= 1911, Age >= 1911 AND Age <= 1912, Age >= 1912 AND Age <= 1913, Age >= 1913 AND Age <= 1914, Age >= 1914 AND Age <= 1915, Age >= 1915 AND Age <= 1916, Age >= 1916 AND Age <= 1917, Age >= 1917 AND Age <= 1918, Age >= 1918 AND Age <= 1919, Age >= 1919 AND Age <= 1920, Age >= 1920 AND Age <= 1921, Age >= 1921 AND Age <= 1922, Age >= 1922 AND Age <= 1923, Age >= 1923 AND Age <= 1924, Age >= 1924 AND Age <= 1925, Age >= 1925 AND Age <= 1926, Age >= 1926 AND Age <= 1927, Age >= 1927 AND Age <= 1928, Age >= 1928 AND Age <= 1929, Age >= 1929 AND Age <= 1930, Age >= 1930 AND Age <= 1931, Age >= 1931 AND Age <= 1932, Age >= 1932 AND Age <= 1933, Age >= 1933 AND Age <= 1934, Age >= 1934 AND Age <= 1935, Age >= 1935 AND Age <= 1936, Age >= 1936 AND Age <= 1937, Age >= 1937 AND Age <= 1938, Age >= 1938 AND Age <= 1939, Age >= 1939 AND Age <= 1940, Age >= 1940 AND Age <= 1941, Age >= 1941 AND Age <= 1942, Age >= 1942 AND Age <= 1943, Age >= 1943 AND Age <= 1944, Age >= 1944 AND Age <= 1945, Age >= 1945 AND Age <= 1946, Age >= 1946 AND Age <= 1947, Age >= 1947 AND Age <= 1948, Age >= 1948 AND Age <= 1949, Age >= 1949 AND Age <= 1950, Age >= 1950 AND Age <= 1951, Age >= 1951 AND Age <= 1952, Age >= 1952 AND Age <= 1953, Age >= 1953 AND Age <= 1954, Age >= 1954 AND Age <= 1955, Age >= 1955 AND Age <= 1956, Age >= 1956 AND Age <= 1957, Age >= 1957 AND Age <= 1958, Age >= 1958 AND Age <= 1959, Age >= 1959 AND Age <= 1960, Age >= 1960 AND Age <= 1961, Age >= 1961 AND Age <= 1962, Age >= 1962 AND Age <= 1963, Age >= 1963 AND Age <= 1964, Age >= 1964 AND Age <= 1965, Age >= 1965 AND Age <= 1966, Age >= 1966 AND Age <= 1967, Age >= 1967 AND Age <= 1968, Age >= 1968 AND Age <= 1969, Age >= 1969 AND Age <= 1970, Age >= 1970 AND Age <= 1971, Age >= 1971 AND Age <= 1972, Age >= 1972 AND Age <= 1973, Age >= 1973 AND Age <= 1974, Age >= 1974 AND Age <= 1975, Age >= 1975 AND Age <= 1976, Age >= 1976 AND Age <= 1977, Age >= 1977 AND Age <= 1978, Age >= 1978 AND Age <= 1979, Age >= 1979 AND Age <= 1980, Age >= 1980 AND Age <= 1981, Age >= 1981 AND Age <= 1982, Age >= 1982 AND Age <= 1983, Age >= 1983 AND Age <= 1984, Age >= 1984 AND Age <= 1985, Age >= 1985 AND Age <= 1986, Age >= 1986 AND Age <= 1987, Age >= 1987 AND Age <= 1988, Age >= 1988 AND Age <= 1989, Age >= 1989 AND Age <= 1990, Age >= 1990 AND Age <= 1991, Age >= 1991 AND Age <= 1992, Age >= 1992 AND Age <= 1993, Age >= 1993 AND Age <= 1994, Age >= 1994 AND Age <= 1995, Age >= 1995 AND Age <= 1996, Age >= 1996 AND Age <= 1997, Age >= 1997 AND Age <= 1998, Age >= 1998 AND Age <= 1999, Age >= 1999 AND Age <= 2000, Age >= 2000 AND Age <= 2001, Age >= 2001 AND Age <= 2002, Age >= 2002 AND Age <= 2003, Age >= 2003 AND Age <= 2004, Age >= 2004 AND Age <= 2005, Age >= 2005 AND Age <= 2006, Age >= 2006 AND Age <= 2007, Age >= 2007 AND Age <= 2008, Age >= 2008 AND Age <= 2009, Age >= 2009 AND Age <= 2010, Age >= 2010 AND Age <= 2011, Age >= 2011 AND Age <= 2012, Age >= 2012 AND Age <= 2013, Age >= 2013 AND Age <= 2014, Age >= 2014 AND Age <= 2015, Age >= 2015 AND Age <= 2016, Age >= 2016 AND Age <= 2017, Age >= 2017 AND Age <= 2018, Age >= 2018 AND Age <= 2019, Age >= 2019 AND Age <= 2020, Age >= 2020 AND Age <= 2021, Age >= 2021 AND Age <= 2022, Age >= 2022 AND Age <= 2023, Age >= 2023 AND Age <= 2024, Age >= 2024 AND Age <= 2025, Age >= 2025 AND Age <= 2026, Age >= 2026 AND Age <= 2027, Age >= 2027 AND Age <= 2028, Age >= 2028 AND Age <= 2029, Age >= 2029 AND Age <= 2030, Age >= 2030 AND Age <= 2031, Age >= 2031 AND Age <= 2032, Age >= 2032 AND Age <= 2033, Age >= 2033 AND Age <= 2034, Age >= 2034 AND Age <= 2035, Age >= 2035 AND Age <= 2036, Age >= 2036 AND Age <= 2037, Age >= 2037 AND Age <= 2038, Age >= 2038 AND Age <= 2039, Age >= 2039 AND Age <= 2040, Age >= 2040 AND Age <= 2041, Age >= 2041 AND Age <= 2042, Age >= 2042 AND Age <= 2043, Age >= 2043 AND Age <= 2044, Age >= 2044 AND Age <= 2045, Age >= 2045 AND Age <= 2046, Age >= 2046 AND Age <= 2047, Age >= 2047 AND Age <= 2048) ",
    " from 'Users' where FullName = $p0 ",
    " from 'Orders' group by Lines[].Product, ShipTo.Country select Lines[].Product as ProductName, ShipTo.Country as Country, count() ",
    " from 'Users' select timeseries(from small group by '1 Minutes'   select max(), min(), average()) as HeartRate limit $p0, $p1 ",
    " from index 'RecurseIndexWithICollection' ",
    " from index 'CommitByRevision' where Revision > $p0 or Revision < $p1 ",
    " from index 'PlacesByTermsAndLocation' where (search(Name, $p2) or search(Terms, $p3)) order by spatial.distance(Coordinates, spatial.point($p0, $p1)) limit $p4, $p5 ",
    " from index 'Users/ByName' select suggest(Name, $p0) ",
    " from 'Documents' where startsWith(id(), $p0) ",
    " from index 'CameraCost' where Manufacturer = $p0 select facet(id('facets/CameraFacets')) ",
    " from index 'CommitByRevision' where Revision > $p0 and Revision <= $p1 ",
    " from index 'Client/ImportSummaryByDate/3' order by Date ",
    " declare function output(x) {   \tvar test = 1;   \treturn { DateTime : x.DateTime, DateTimeMinValue : new Date(-62135596800000), DateTimeMaxValue : new Date(253402297199999) };   }   from 'Articles' as x select output(x) ",
    " from '@all_docs' where @metadata.@collection = $p0 limit $p1, $p2 ",
    " from index 'Index/With/CompareExchange/JavaScript' select City ",
    " from 'People' as p select id() as Id, Name, timeseries(from p.Heartrate where (Tag == $p0) group by '1 Months'   select max(), count()) as HeartRate limit $p1, $p2 ",
    " from 'Users' where Name != $p0 ",
    " from index 'Counters/Index/With/CompareExchange/MapReduce' ",
    " from 'DictItems' where StringDict.a = $p0 ",
    " from index 'DocsIndex' select facet(IntVal < $p0, IntVal >= $p1 and IntVal < $p2, IntVal >= $p3) ",
    " from index 'MySpatialIndex' where spatial.within(Coordinates, spatial.circle($p0, $p1, $p2)) order by spatial.distance(Coordinates, spatial.point($p3, $p4)) limit $p5, $p6 ",
    " from index 'TestIndexArraysContainsAndIndexOf' where IndexOfOfMyIntArrayWithIndex = $p0 ",
    " declare function output(item) {   \tvar georgeAlbums = Object.keys(item.MusicCollection).map(function(a){return{Key: a,Value:item.MusicCollection[a]};}).filter(function(x){return x.Key.startsWith(\"G\");}).map(function(s){return s.Value.map(function(x){return {Title:x.Title,ReleaseDate:x.ReleaseDate};});});   \treturn { Name : item.Name, GeorgeAlbums : georgeAlbums };   }   from index 'TestDocumentByName' as item select output(item) ",
    " from index 'test' where IsActive = $p0 and BookVendor = $p1 select facet(id('facets/test')) ",
    " from 'Users' where search(Name, $p0) ",
    " from index 'TimeSeriesWithCompareExchangeIndex' where CompanyName = $p0 limit $p1, $p2 ",
    " from index 'TracksIndex' order by Title as alphaNumeric, Artist as alphaNumeric desc ",
    " from index 'MyIndex' where Title = $p0 and CustomFields_Age >= $p1 ",
    " from index 'DefaultSuggestionIndex' select suggest(Name, $p0, $p1) ",
    " from 'Orders' group by Employee, Company order by Count as long select Employee, Company, count() ",
    " from index 'Regs' select RegisteredAt, id() as Id limit $p0, $p1 ",
    " declare timeseries __timeSeriesQueryFunction0(p) {   from p.Heartrate between $p5 and $p6 where (Tag == $p4) group by '1 Months'   select average(), max()   }   from 'People' as p where p.Age > $p0 select { Heartrate : __timeSeriesQueryFunction0(p), Name : p.Name+\" \"+p.LastName } ",
    " from 'Users' as __alias0 select __alias0.'Group' ",
    " from 'Items' where Active = $p0 ",
    " from index 'FooIndex' where search(Name, $p0) and (Resolutions between $p1 and $p2) select Name, Resolutions ",
    " from 'Orders' order by OrderedAt desc ",
    " from index 'Orders/Totals' where Company = $p0 select facet(Employee) include Employee ",
    " from index 'test' where Email = $p0 order by Name, score() desc ",
    " from 'Users' where startsWith(id(), $p0) limit $p1, $p2 ",
    " from index 'Article/Index' where (CampaignId = $p0) and (VisibleTo = $p1 or VisibleTo = $p2) ",
    " from 'Companies' where Name in ($p0) ",
    " from 'SampleDocs' select Name, Number ",
    " from index 'TestIndexArraysContainsAndIndexOf' where IndexOfOfMyCharArrayWithIndexWithCount = $p0 ",
    " from index 'TestIndexArraysLastIndexOf' where LastIndexOfOfMyCharArrayWithIndexWithCount = $p0 ",
    " from index 'IndexWithArrowFunctionDynamicAndStaticParameter' ",
    " from index 'CatsAndDogs' where CatsOnlyProperty = $p0 ",
    " from index 'foo' ",
    " from 'Bookings' as x where x.FirstName = $p0 select { Number : toStringWithFormat(x.Number, \"en-US\") } ",
    " from 'Users' where startsWith(Name, $p0) limit $p1, $p2 ",
    " from 'Items' order by spatial.distance('spatial.point(Lat, Lng)', spatial.point($p1, $p2), $p0) ",
    " from index 'TestIndexArraysContainsAndIndexOf' where ContainsOfMyDoubleArray = $p0 ",
    " declare function output(user) {   \tvar first = user.name;   \tvar last = user.lastName;   \tvar format = function(){return first+\" \"+last;};   \treturn { FullName : format() };   }   from 'Users' as user select output(user) ",
    " from index 'Sales/ByLocation' ",
    " from index 'ItemsWithDynamicFieldsIndex' select facet(prop_brand) ",
    " from 'Users' as u select { Predicate : compareDates(u.Birthday, $p0, 'LessThan') } ",
    " from index 'IndexName' where Name = $p0 ",
    " from index 'Index2' limit $p0, $p1 ",
    " from 'Documents' where id() = $p0 ",
    " from 'Users' as user load user.FriendId as f select { Name : user.Name, Downloads : counter(user, \"Downloads\"), FriendsDownloads : counter(f, \"Downloads\") } ",
    " from index 'CasinosSuspensionsIndex' where CityId = $p0 order by DateTime desc select CityId, CasinoId, CasinoAddress, id() as Id, DateTime, Exemptions limit $p1, $p2 ",
    " from index 'DocsIndex' limit $p0, $p1 ",
    " from 'Employees' where id() in ($p0) limit $p1, $p2 ",
    " from index 'TestIndex' ",
    " from 'Companies' as x select counter(x, 'Total Likes') as TotalLikes limit $p0, $p1 ",
    " from index 'Buyers/Search' order by NameForSorting ",
    " from index 'Customers/ByName' select Name, Address as OtherThanName ",
    " from index 'test' where search(Tags, $p0) order by Name ",
    " from index 'NullDynamicValueIndexPercentOperation' where Age = $p0 ",
    " from index 'SuggestionIndex' select suggest(Name, $p0, $p1) ",
    " from index 'ProfileByName' ",
    " from 'TestViews' as x select { Children : (x.Children!=null?x.Children:[null,null,null]), Nums : [0,0,0,0], Bools : [false,false,false,false,false] } limit $p0, $p1 ",
    " from 'Songs' where Tags = $p0 ",
    " from 'Items' where Key in ($p0) ",
    " from 'WithLongs' where Sequence > $p0 ",
    " from 'Providers' where (Name = $p0) and (Categories[].Name = $p1) ",
    " from index 'BlogsForHighlightingTests' where Title = $p1 and Category = $p2 select Title, Category include highlight(Title,18,2,$p0) ",
    " from index 'MultiLocationsCustomFieldName' where spatial.within(someField, spatial.circle($p0, $p1, $p2)) ",
    " from index 'PostCountsByUser/WithName' ",
    " from index 'LastAccessPerUserDateTimeIndex' select Name, LastAccess ",
    " from 'Bunnies' where id() between $p0 and $p1 ",
    " from index 'CameraCost' where Megapixels > $p0 and Cost < $p1 select facet(Manufacturer), facet(Cost <= $p2, Cost between $p3 and $p4, Cost between $p5 and $p6, Cost between $p7 and $p8, Cost >= $p9), facet(Megapixels <= $p10, Megapixels between $p11 and $p12, Megapixels between $p13 and $p14, Megapixels >= $p15) ",
    " from 'Users' where Age <= $p0 ",
    " declare function output(membership) {   \tvar organizationId = \"organizations/1\";   \tvar organization = load(organizationId);   \tvar userGroups = load(membership.UserGroups).filter(function(x){return x.Organization===organizationId;});   \treturn { Id : id(membership), Organization : id(organization), UserGroups : userGroups.map(function(x){return id(x);}) };   }   from index 'MembershipIndex' as membership select output(membership) limit $p0, $p1 ",
    " from 'Orders' where lucene(Name, $p0) ",
    " from 'Cameras' where Cost between $p0 and $p1 select facet(id('facets/CameraFacets')) ",
    " from 'TestDocuments' where id() in ($p0) limit $p1, $p2 ",
    " from 'Builds' as entry where (entry.ProductKey in ($p0) and entry.IsPublic = $p1) and (entry.Channel in ($p2)) load entry.TeamCityBuildLocalId as build select { Build : build, Downloads : load(build.DownloadsIds) } ",
    " declare function output(d, $p1) {   \tvar externalDocument = id(d)==null?null:load($p1);   \tvar x = id(d)==null?0:10;   \treturn { Id : id(d), Int1 : x, Int2 : externalDocument.Int+1 };   }   from 'RavenDocuments' as d where id() = $p0 select output(d, $p1) ",
    " from 'EdgeCaseValues' where TimeSpanMiliseconds = $p0 ",
    " declare timeseries __timeSeriesQueryFunction0(p, name, f, t, src) {   from name between f and t load Tag as src where (Values[0] < $p1) and (src != $p2) group by '1 Months'   select max(), average()   }   declare function output(p, $p3, $p4, $p5) {   \tvar tsFunc = function(name,f,t){return __timeSeriesQueryFunction0(p, name, f, t, src).Results.filter(function(range){return range.Average[0]>$p3;});};   \treturn { Name : p.Name+\" \"+p.LastName, Series : tsFunc(\"Heartrate\", $p4, $p5).map(function(r){return {Max:r.Max[0],Avg:r.Average[0]};}) };   }   from 'People' as p where p.Age > $p0 select output(p, $p3, $p4, $p5) limit $p6, $p7 ",
    " from 'Documents' as d where (id() in ($p0)) and (d.Deleted = $p1) select { Id : id(d), Deleted : d.Deleted, Values : d.SubDocuments.filter(function(x){return $p2==null||x.TargetId===$p3;}).map(function(x){return {TargetId:x.TargetId,TargetValue:x.TargetValue};}) } ",
    " from index 'test' select suggest(Name, $p0), suggest(Company, $p1) ",
    " from index 'FooIndex' where DateIn != $p0 select facet(DateIn < $p1, DateIn >= $p2 and DateIn < $p3, DateIn >= $p4) ",
    " from 'SpatialDocs' limit $p0, $p1 ",
    " from index 'WithDynamicIndex' order by T1 desc ",
    " from 'Orders' group by Employee, Company order by Count as long select Employee as RenamedEmployee, Company, count() ",
    " from index 'ZC/CountryCityStateCodeACIndex' where CountryCode = $p0 and startsWith(City, $p1) order by CityOrder ",
    " from 'Users' as u load u.FriendId as f select counter(f, Downloads) as Downloads ",
    " from index 'EntityIndex' where OrganizationId = $p0 or ((CaseId != $p1 and HistoryCode = $p2)) ",
    " from index 'IdentityProjectionIndex1' limit $p0, $p1 ",
    " declare function output(membership, userGroups) {   \tvar organizationId = \"organizations/1\";   \tvar organization = load(organizationId);   \treturn { Organization : id(organization) };   }   from index 'MembershipIndex' as membership load membership.UserGroups as userGroups[] select output(membership, userGroups) ",
    " from index 'TestIndexArraysContainsAndIndexOf' where IndexOfOfMyCharArrayWithIndex = $p0 ",
    " from 'TestDocs' where StringArray in ($p0) and SomeProperty = $p1 ",
    " from 'Companies' where Country = $p0 ",
    " from index 'SortOnNullableEntity/Search' order by Num as long ",
    " from 'Orders' include Company,timeseries('Heartrate', null,null) limit $p0, $p1 ",
    " from index 'FormOpenByDateAndMediaSourceAndVersion' ",
    " from '@all_docs' order by random('seed2') ",
    " from index 'Product/AvailableForSale3' where lucene(Any, $p0) select id() as Id, Name, Brand ",
    " from 'Times' as x select { TimeSpan1 : convertToTimeSpanString(x.Ticks), TimeSpan2 : convertToTimeSpanString(x.Hours, x.Minutes, x.Seconds), TimeSpan3 : convertToTimeSpanString(x.Days, x.Hours, x.Minutes, x.Seconds), TimeSpan4 : convertToTimeSpanString(x.Days, x.Hours, x.Minutes, x.Seconds, x.Milliseconds), TimeSpan5 : convertToTimeSpanString($p0, x.Minutes, $p1), TimeSpan6 : convertToTimeSpanString($p2, x.Hours, $p3, x.Seconds), TimeSpan7 : convertToTimeSpanString($p4, $p5, $p6, $p7, $p8), TimeSpan8 : convertToTimeSpanString(x.Summary.reduce(function(a, b) { return a + b; }, 0)), TimeSpan9 : convertToTimeSpanString(x.TimeSummary.map(function(t){return t.Ticks;}).reduce(function(a, b) { return a + b; }, 0)) } ",
    " from 'TestDocs' where IsLocked = $p0 ",
    " from 'Foos' order by Start as long desc ",
    " declare function output(u) {   \tvar format = function(user){return user.Name+\" \"+u.LastName;};   \tvar detail = load(u.DetailId);   \treturn { FullName : format(u), DetailNumber : detail.Number };   }   from 'Users' as u select output(u) ",
    " from 'Orders' limit $p0, $p1 ",
    " from 'TestDocuments' where Prop1 = $p0 and Prop2 = $p1 limit $p2, $p3 ",
    " from index 'Family/MultiMap' where PersonId = $p0 select PersonId, Name, Children ",
    " from index 'LargeKeysInVoronFunction' ",
    " from index 'NullDynamicValueIndexDivideOperation' where Age = $p0 ",
    " from 'TestDocs' as __alias0 select __alias0.'Limit' ",
    " from index 'Companies/CustomAnalyzers' where search(Name, $p0) include highlight(Name,128,1) ",
    " from 'People' as p where id() = $p0 select timeseries(from p.HeartRate between $p1 and $p2 group by '1 Minutes'  with interpolation(Next) select max()) as __timeSeriesQueryFunction0 limit $p3, $p4 ",
    " from index 'VersionedDocuments' select Id, Version, Document limit $p0, $p1 ",
    " from index 'EntityIndex' where OrganizationId = $p0 or ((HistoryCode = $p1 and CaseId != $p2)) ",
    " from index 'Orders/All' select facet(Region, max(Tax), min(Tax)) ",
    " from index 'UserByFirstName' where FirstName = $p0 limit $p1, $p2 ",
    " from 'Orders' as o load o.Employee as employee select o.ShipTo.Country ",
    " from index 'DummyIndex' where Guid = $p0 ",
    " from 'Items' where Product.Name = $p0 ",
    " from 'Users' as u select { DayOfBirth : new Date(Date.parse(u.Birthday)).getDate(), MonthOfBirth : new Date(Date.parse(u.Birthday)).getMonth()+1, Age : new Date().getFullYear()-new Date(Date.parse(u.Birthday)).getFullYear() } ",
    " from 'Bookings' as x where x.FirstName = $p0 select { StartDate : toStringWithFormat(x.Start) } limit $p1, $p2 ",
    " match (Person as f)-[Relationships as r select TargetId]->(Person as t) ",
    " from 'Users' where Items.Color = $p0 ",
    " from index 'FooIndex' order by Num as long ",
    " from index 'EntityIndex' where (id() != $p0 and id() != $p1) ",
    " from index 'Companies/CustomAnalyzers' where Desc = $p0 ",
    " from 'EdgeCaseValues' where DoubleNan = $p0 ",
    " from 'Tests' select Headers.'ABC.DEF' limit $p0, $p1 ",
    " from 'Documents' as x where id() = $p0 select { Children : x.Children.map(function(c){return {Id:id(c),Name:c.Name};}) } ",
    " from 'Foos' order by Double as double ",
    " from index 'Sites/ByAdminData' order by Admin_GroupName select distinct Admin_GroupName ",
    " from 'Users' where exact(Name = $p0) limit $p1, $p2 ",
    " from 'Companies' where Name != $p0 ",
    " from 'People' as p select timeseries(from p.HeartRate select count(), standarddeviation()) as __timeSeriesQueryFunction0 limit $p0, $p1 ",
    " from 'SampleDocs' where Number = $p0 ",
    " from 'CalcSystems' where Server != $p0 select distinct Server ",
    " declare function output(o, __alias0) {   \tvar update = __alias0;   \tvar employees = load(update.EmployeesIds);   \treturn { Company : update.Name, Employees : employees.map(function(e){return e.FirstName;}) };   }   from 'Orders' as o load o.Company as __alias0 select output(o, __alias0) ",
    " from index 'UserIndex' where search(id(), $p0) ",
    " from index 'PeopleByName' limit $p0, $p1 ",
    " from 'Users' where Country in ($p0) ",
    " from index 'DocsIndex' select facet(DateVal < $p0, DateVal >= $p1 and DateVal < $p2, DateVal >= $p3 and DateVal < $p4, DateVal >= $p5 and DateVal < $p6, DateVal >= $p7 and DateVal < $p8, DateVal >= $p9) ",
    " from 'MyDocs' where Foo = $p0 and ((ItemListOne[].MyProp = $p1 or ItemListTwo[].MyProp = $p2) or ItemListThree[].MyProp = $p3) order by CreatedDate desc ",
    " from index 'IndexReturningDictionaryWithComplexObjects/QuerySyntax' where search(Address, $p0) ",
    " from 'Orders' where OrderedAt >= $p0 ",
    " from 'Employees' where ZipCodes.Length = $p0 ",
    " from index 'SampleIndex' select id() as Id, PropBase, Prop1, Prop2, Str ",
    " from 'Packages' as package load package.SomethingElseReference as somethingElse, package.ComplexRuleReference.Id as rule select { PackageId : id(package), RuleName : rule.Name, SomethingElseName : somethingElse.Name } ",
    " from 'Orders' where Lines[].PricePerUnit >= $p0 ",
    " from 'Companies' where Name != $p0 include timings() ",
    " from index 'PeopleIndex12' select Combined limit $p0, $p1 ",
    " from index 'Posts/ByTitle' where search(Title, $p0) ",
    " from 'TestableSubDTOs' limit $p0, $p1 ",
    " from index 'TestDocumentByName' as item load item.Categories as categories[] select { Key : id(item).split(new RegExp(\"/\", \"g\")).slice(-1)[0], Name : item.Name, Nested : categories.map(function(cat){return {cat:cat,name:cat.Name[$p0]};}).map(function(__rvn0){return {Key:id(__rvn0.cat).split(new RegExp(\"/\", \"g\")).slice(-1)[0],Name:__rvn0.name};}) } limit $p1, $p2 ",
    " from 'Builds' as entry where (entry.ProductKey in ($p0) and entry.IsPublic = $p1) and (entry.Channel in ($p2)) load entry.TeamCityBuildLocalId as build select build.BuildDate ",
    " from index 'MultiMap' order by Date desc ",
    " from 'Test\\u0015Users' ",
    " from index 'Product/ByNumericAttribute' where Color > $p0 ",
    " from index 'PersonWithCompanyIndex' as p where p.LastName = $p0 load p.CompanyReference.Id as company select { PersonId : id(p), CompanyName : company.Name } limit $p1, $p2 ",
    " from 'Companies' as o select { Id : id(o), ChangeVector : getMetadata(o)['@change-vector'] } ",
    " from index 'TestIndexArraysContainsAndIndexOf' where IndexOfOfMyStringArrayWithIndexWithCount = $p0 ",
    " from 'TestClasses' ",
    " declare timeseries __timeSeriesQueryFunction0(p, company) {   from company.Stock between $p2 and $p3 where (Tag == $p1) group by '1 Months'   select average(), max()   }   from 'People' as p where p.Age > $p0 load p.WorksAt as company select { Heartrate : __timeSeriesQueryFunction0(p, company), Name : p.Name+\" \"+p.LastName } ",
    " from 'Foos' order by Decimal as double ",
    " from index 'Companies/AllProperties' where Query = $p0 ",
    " from index 'Animal/Index' where (Type = $p0 or (search(Name, $p1) and search(Name, $p2))) ",
    " from index 'indexes/users/default2' select Friend ",
    " from 'UserTalks' select UserDefs ",
    " from 'People' as p select timeseries(from p.HeartRate between $p0 and $p1 group by '1 Hours'  with interpolation(Linear) select percentile(10.404390753435152)) as __timeSeriesQueryFunction0 limit $p2, $p3 ",
    " from index 'MapReduceIndexReturningDictionaryWithComplexObjects/QuerySyntax' where search(Address, $p0) ",
    " from 'Orders' as x select { SortedLines : x.Lines.sort(function (a, b){ return ((a.ProductName < b.ProductName) ? -1 : (a.ProductName > b.ProductName)? 1 : 0);}) } limit $p0, $p1 ",
    " from index 'Index/With/CompareExchange' select City ",
    " from 'TestCustomers' ",
    " from 'TestDocs' where (Birthday < $p0 and Birthday != $p1) ",
    " from index 'MapReduceIndexWithNestedField' ",
    " from index 'BookSearch' where Keywords in ($p0) ",
    " declare timeseries __timeSeriesQueryFunction0(p) {   from p.Heartrate between $p2 and $p3 where (Tag == $p1) group by '1 Months'   select average(), max()   }   declare function output(p) {   \tvar heartrate = __timeSeriesQueryFunction0(p);   \treturn { Heartrate : heartrate, Name : p.Name+\" \"+p.LastName };   }   from 'People' as p where p.Age > $p0 select output(p) ",
    " from index 'DogsIndex' where Age > $p0 order by Name as alphaNumeric ",
    " from index 'TestIndexArraysContainsAndIndexOf' where ContainsOfMyIntArray = $p0 ",
    " from index 'VacancyCampaignsIndex' where Active = $p0 select id() as Id, Category, CampaignId, Title, Active ",
    " from index 'Posts/ByTitleAndDescription' where search(Title, $p0) and search(Desc, $p1) ",
    " from index 'ETIS/NewsDocumentIndex' where AuthorNamesStr = $p0 ",
    " from index 'test' where (search(Tags, $p0) or search(Tags, $p1)) ",
    " from index 'PaymentAll' where AmountLeft <= $p0 select id() as Id, AmountLeft ",
    " from 'Companies' where lucene(ExternalId, $p0) ",
    " from index 'MyIndex' where Count < $p0 ",
    " from 'Documents' as x where id() = $p0 select { ProjectedMean : x.ResultLookup!=null?x.ResultLookup[(x.NullableDecision!=null?x.NullableDecision:true)?(x.PlotTypeDecision?\"Type2\":\"Type4\"):x.PlotTypeDecision?\"Type1\":\"Type3\"].Mean:null } limit $p1, $p2 ",
    " from index 'Books/Search' where boost(PrimaryTag = $p0, 4) or boost(SecondayTag = $p1, 4) select distinct Author limit $p2, $p3 ",
    " from index 'FindByLatLng' where spatial.within(Coordinates, spatial.circle($p0, $p1, $p2, 'Kilometers')) ",
    " from index 'CommitByRevision' where Revision >= $p0 or Revision <= $p1 ",
    " from index 'Index1' where startsWith(Name, $p0) ",
    " from index 'TracksIndex' order by Title as alphaNumeric limit $p0, $p1 ",
    " from 'Documents' select IdCollection.Length as IdCount limit $p0, $p1 ",
    " from 'Users' where FirstName = $p0 ",
    " from index 'BookingIndex' as x where x.FullName = $p0 select { FullName : x.FullName, StartDate : toStringWithFormat(x.Start, \"dd.MM.yyyy\") } limit $p1, $p2 ",
    " from index 'Users/ByUsers' ",
    " declare function output(s, $p0, $p1) {   \tvar source = s.Children;   \treturn { Id : id(s), Matched : source.filter(function(x){return !$p0||$p1.hasOwnProperty(id(x));}) };   }   from 'Documents' as s select output(s, $p0, $p1) limit $p2, $p3 ",
    " from index 'IndexName' where search(Name, $p0) ",
    " from index 'IndexName' where Birthday >= $p0 ",
    " from 'Invoices' limit $p0, $p1 ",
    " from 'Users' where Name <= $p0 ",
    " from index 'test' where Email = $p0 order by score(), Name ",
    " from 'Invoices' as i select { Id : id(i), Orders : i.Orders.map(function(orderRef){return {orderRef:orderRef,order:load(id(orderRef))};}).map(function(__rvn0){return {__rvn0:__rvn0,customer:load(__rvn0.order.CustomerId)};}).map(function(__rvn1){return {__rvn1:__rvn1,test:\"test\"};}).map(function(__rvn2){return {__rvn2:__rvn2,test2:\"test2\"};}).map(function(__rvn3){return {Id:id(__rvn3.__rvn2.__rvn1.__rvn0.order),CustomerName:__rvn3.__rvn2.__rvn1.customer.Name,Items:__rvn3.__rvn2.__rvn1.__rvn0.order.Items.map(function(item){return {item:item,category:load(item.CategoryId)};}).map(function(__rvn0){return {__rvn0:__rvn0,test3:\"test3\"};}).map(function(__rvn1){return {__rvn1:__rvn1,test4:\"test4\"};}).map(function(__rvn2){return {ItemName:__rvn2.__rvn1.__rvn0.item.Name,CategoryName:__rvn2.__rvn1.__rvn0.category.Name,Test:__rvn3.__rvn2.test.substr(2),Test2:__rvn3.test2.substr(2),Test3:__rvn2.__rvn1.test3.substr(2),Test4:__rvn2.test4.substr(2)};}),Instructions:__rvn3.__rvn2.__rvn1.__rvn0.order.Instructions.map(function(instruction){return {instruction:instruction,test5:\"test5\"};}).map(function(__rvn0){return {__rvn0:__rvn0,test6:\"test6\"};}).map(function(__rvn1){return {Title:__rvn1.__rvn0.instruction.Title,Test5:__rvn1.__rvn0.test5.substr(2),Test6:__rvn1.test6.substr(2)};})};}) } ",
    " with {from 'Foos' where Name in ($w0p0)} as Foo   with {from 'Bars' where Age >= $w1p0} as Bar   match (Foo)-[Bars as _]->(Bars as Bar) ",
    " from 'Users' where Age > $p0 select timeseries(   from Heartrate between $start and $end   where Tag = 'watches/fitbit'   group by '1 month'   select min(), max(), avg()   ) as __timeSeriesQueryFunction ",
    " from 'People' as p select timeseries(from p.HeartRate group by '1 Hours'   select standarddeviation()) as __timeSeriesQueryFunction0 limit $p0, $p1 ",
    " from index 'CarIndex' limit $p0, $p1 ",
    " from 'Users' as customer select { CustomerName : customer.GivenName+\" \"+customer.FamilyName, Phone : Object.keys(customer.Phones2).map(function(a){return{Key: a,Value:customer.Phones2[a]};}).filter(function(phone){return phone.Key===\"Work\";}) } ",
    " from index 'TestIndexWithThenBy' ",
    " from index 'TestIndexArraysLastIndexOf' where LastIndexOfOfMyIntArray = $p0 ",
    " from 'Companies' where Phone > $p0 ",
    " from index 'SampleDataIndex' where search(Query, $p0) limit $p1, $p2 ",
    " from index 'FTSIndex' where lucene(MyProp, $p0) ",
    " from 'EntityWithArrays' where Strings all in ($p0) limit $p1, $p2 ",
    " from index 'NestedPropertyIndex1' where Zip = $p0 limit $p1, $p2 ",
    " from index 'Orders/All' select facet(Total < $p0, Total >= $p1 and Total < $p2, Total >= $p3 and Total < $p4, Total >= $p5, sum(Total) as T1, sum(Quantity) as Q1, avg(Total) as T1) ",
    " declare function output(x) {   \tvar test = 1;   \treturn { CheckGroup : (((x.Quantity!=null?x.Quantity:0))!==0?2:3)===2?1:0, CheckGroup1 : (x.Quantity==null?1:2)===1?1:2, CheckGroup2 : (x.Quantity!=null?x.Quantity:0), CheckGroup3 : (x.Quantity!=null?x.Quantity:0), CheckGroup4 : ((x.Quantity!=null?x.Quantity:0))!==0?2:3, CheckGroup5 : x.Quantity!=null?x.Quantity:0 };   }   from 'Articles' as x select output(x) ",
    " from index 'Posts/ByTitle' where (exists(Title) and not search(Title, $p0)) ",
    " from 'People' as u select timeseries(from u.Heartrate between $p0 and $p1 load Tag as w group by '1 Months' , w.Year  select average(), max()) as __timeSeriesQueryFunction0 limit $p2, $p3 ",
    " from '@all_docs' where @metadata.MyCustomProperty = $p0 limit $p1, $p2 ",
    " from index 'Employees/Query' where search(Query, $p0) ",
    " from index 'MultiMapIndex' limit $p0, $p1 ",
    " from index 'FooBarIndex' where startsWith(Bar, $p0) limit $p1, $p2 ",
    " from index 'DynamicSpatial' where spatial.within(Location, spatial.circle($p0, $p1, $p2)) and Description = $p3 limit $p4, $p5 ",
    " from index 'AmazingIndex' select id() as Id, Name limit $p0, $p1 ",
    " from index 'Person/IdCopy/Index' select id() as Id, UserId, Family_Dad_Id ",
    " from 'Blogs' where lucene(Title.Length, $p0) and lucene(Category, $p1) ",
    " from index 'BarnIndex' where Name = $p0 ",
    " from 'Users' where Name >= $p0 ",
    " from index 'ProfileByName' limit $p0, $p1 ",
    " from index 'Product/AvailableForSale' where lucene(Name, $p0) ",
    " from index 'IndexReturningDictionary/MethodSyntax' ",
    " from index 'Students/ByEmailDomain' where EmailDomain in ($p0) limit $p1, $p2 ",
    " from index 'PeopleIndex8' limit $p0, $p1 ",
    " from index 'User/Search' where Email = $p0 ",
    " from index 'PeopleIndex3' limit $p0, $p1 ",
    " from index 'BookingIndexFullNameIsFullNameMapStartToBegin' as x where x.FullName = $p0 select { Start : x.Begin.toString() } limit $p1, $p2 ",
    " from 'Cameras' order by Megapixels as double ",
    " from 'Users' where Name = $p0 include timeseries('speed2', '0001-01-01T00:00:00.0000000', '9999-12-31T23:59:59.9999999') ",
    " from 'Users' where (((Name = $p0 or Name = $p1) or Name = $p2) or Name = $p3) or Name = $p4 ",
    " from index 'PersonsIndex' where Name = $p0 ",
    " from 'Documents' as d select { Id : id(d), ContainsKey : d.Dict.hasOwnProperty($p0) } ",
    " from 'Orders' as x select { SortedLines : x.Lines.sort(function (a, b){ return a.Quantity - b.Quantity;}) } limit $p0, $p1 ",
    " from index 'Companies/ByName/Counters' select Name limit $p0, $p1 ",
    " from index 'User/Entity' where (CreatedDate >= $p0) and (CreatedDate <= $p1) order by CreatedDate limit $p2, $p3 ",
    " from index 'Person/IdCopy/Index' where search(Family_Dad_Id, $p0) ",
    " from 'Employees' where Address.Country = $p0 select distinct Address.Country as Country ",
    " from 'RegexMes' where regex(Text, $p0) ",
    " from 'Companies' order by custom(Name, 'CanUseCustomSorter_Restart_Faulty_3017') desc ",
    " from index 'DocsIndex' select facet(DateVal < $p0, DateVal >= $p1 and DateVal < $p2, DateVal >= $p3) ",
    " from 'Articles' where intersect(Deleted = $p0, TenantId = $p1)  ",
    " from index 'TransactionBalances/ByYear' where Year <= $p0 ",
    " from index 'Person/IdCopy/Index' select id() as Id, UserId, Family_dad_Id ",
    " from 'TestDocs' where (SomeProperty = $p0 or SomeProperty = $p1) limit $p2, $p3 ",
    " from index 'Companies/ByName' select Name limit $p0, $p1 ",
    " from index 'Index/With/CompareExchange/MapReduce' ",
    " from index 'UsersIndex' limit $p0, $p1 ",
    " from 'People' where id() = $p0 select timeseries(from HeartRate last 12 Hours) as __timeSeriesQueryFunction limit $p1, $p2 ",
    " from index 'MyCounterIndex' ",
    " from index 'SampleSearchIndex' where NullableInt = $p0 ",
    " from index 'EntitySpatialIndex' where spatial.within(Coordinates, spatial.circle($p0, $p1, $p2, 'Kilometers')) ",
    " from index 'EntityIndex' where (CaseId != $p0 and CaseId != $p1) ",
    " from index 'DemoIndex' where Hash = $p0 limit $p1, $p2 ",
    " from 'Articles' where id() in ($p0) and PublishDate > $p1 limit $p2, $p3 ",
    " from 'Items' where Fields.1-A = $p0 ",
    " from 'IndexedUsers' where (Name != $p0 and Name != $p1) ",
    " from index 'KeywordsIndex' where this = $p0 ",
    " from 'MyDocs' order by id() select null as SomeProp, id() as DocId ",
    " from index 'GetMultipleStringFieldsIndex' ",
    " from index 'DocumentIndex' as doc select { IntegerSum : doc.IntegerNumber1+doc.IntegerNumber2, IntegerDup : doc.IntegerNumber1*doc.IntegerNumber2, DecimalSum : doc.DecimalNumber1+doc.DecimalNumber2, DoubleSum : doc.DoubleNumber1+doc.DoubleNumber2, DoubleAndStringSum : doc.String+doc.DoubleNumber2, DoubleAndIntSum : doc.IntegerNumber1+doc.DoubleNumber2, StringSum : doc.String+doc.IntegerNumber2 } limit $p0, $p1 ",
    " from index 'Users_ByName' limit $p0, $p1 ",
    " from index 'Counters/Index/With/CompareExchange' select City ",
    " from 'DictItems' where StringDict[].Value = $p0 or StringDict[].Key = $p1 ",
    " from index 'TestIndex' where LastName = $p0 limit $p1, $p2 ",
    " from 'TestAccounts' where Types = $p0 ",
    " from index 'Customers/ByName' ",
    " from 'Orders' include Company,counters('Downloads') ",
    " from index 'Profits/Monthly2' order by ProfitValue as double ",
    " from index 'ComplexDataIndex' where moreLikeThis($p1, $p0) ",
    " from 'Projects' limit $p0, $p1 ",
    " from 'Users' as u select { Name : u.Name, Metadata : getMetadata(u) } ",
    " from index 'Events/ByActiveStagingPublishOnSaleAndStartDate' where StartDate = $p0 include PerformerIds,VenueId limit $p1, $p2 ",
    " from 'Bookings' as x where x.FirstName = $p0 select { Number : toStringWithFormat(x.Number, \"000\") } ",
    " from index 'PersonAndAddressIndex' limit $p0, $p1 ",
    " from index 'FanoutByNumbers' where Sum = $p0 limit $p1, $p2 ",
    " from index 'PeopleByEmail' where Email = $p0 limit $p1, $p2 ",
    " from index 'ByVehicle' where spatial.within(Coordinates, spatial.circle($p0, $p1, $p2)) select facet(id('facets/Vehicle')) ",
    " from index 'DocIndex' select facet(IntVal) ",
    " from index 'Users/ByCity' where City = $p0 ",
    " from 'Builds' as entry load entry.TeamCityBuildLocalId as __load select __load.Object1.Object2.Name ",
    " from index 'Tester/Search' where (lucene(Query, $p0)) and Email = $p1 order by Query, LastName limit $p2, $p3 ",
    " from index 'Cars' where Year = $p0 select facet(Make, min(Price)) ",
    " from 'EdgeCaseValues' where UlongMaxVal = $p0 ",
    " from index 'EmailIndex' where startsWith(Body, $p0) limit $p1, $p2 ",
    " from index 'LatestBuildsIndex' as entry where (entry.ProductKey in ($p0) and entry.IsPublic = $p1) and (entry.Channel in ($p2)) load entry.TeamCityBuildLocalId as build select { Build : build, Downloads : load(build.DownloadsIds) } ",
    " from index 'Contract/ToContractListViewModel' ",
    " from 'Users' as customer select { CustomerName : customer.Name, Phones : Object.map(customer.Phones, function(v, k){ return {Label:k,Prefix:v.CountryPrefix,Phone:v.Value};}) } ",
    " from index 'test' where RefName = $p0 limit $p1, $p2 ",
    " from index 'TestIndexArraysContainsAndIndexOf' where IndexOfOfMyIntArray = $p0 ",
    " from 'Albums' where Tags4D = $p0 ",
    " from 'IndexedUsers' where Birthday >= $p0 select Name, Age ",
    " from 'Users' as __alias0 select __alias0.FirstName, __alias0.'Group', __alias0.LastName ",
    " from 'TestDocs' where StringArray all in ($p0) ",
    " from index 'MySpatialIndex' where spatial.within(Coordinates, spatial.circle($p0, $p1, $p2)) limit $p3, $p4 ",
    " from 'WithLongs' where Sequence >= $p0 ",
    " from 'IndexedUsers' where Age = $p0 ",
    " from 'Documents' where id() in ($p0) ",
    " from index 'Invoices/Search' ",
    " from index 'MessageIndex' where (id() = $p0) and (Recipients_HasReadInt = $p1 and Recipients_To = $p2) limit $p3, $p4 ",
    " from index 'SeasonHarvestEstimates/ByDeliverySite' limit $p0, $p1 ",
    " from index 'NullDynamicValueIndexMinusOperation' where Age = $p0 ",
    " from 'People' as p select timeseries(from p.HeartRate between $p0 and $p1 select percentile(10.400618477911044), min(), max() scale 0.001) as __timeSeriesQueryFunction0 limit $p2, $p3 ",
    " from index 'DocsIndex' where search(StrVal, $p0) limit $p1, $p2 ",
    " from index 'PersonnelAll' ",
    " from '@all_docs' order by random('seed1') ",
    " from 'Companies' where exact(lucene(ExternalId, $p0)) ",
    " from 'Users' as u select { RolesList : u.Roles.map(function(a){return {Id:a};}), RolesArray : u.Roles.map(function(a){return {Id:a};}) } ",
    " from index 'DocsIndex' where boost(search(StrVal, $p0), 2) limit $p1, $p2 ",
    " from 'Items' where Name = $p0 and spatial.within(spatial.point(Latitude, Longitude), spatial.circle($p1, $p2, $p3)) order by spatial.distance(someField, spatial.point($p4, $p5)) desc ",
    " from index 'eventsByLatLng' where spatial.within(Coordinates, spatial.circle($p0, $p1, $p2)) ",
    " from index 'Index1' limit $p0, $p1 ",
    " from index 'OldIndex' where LastName = $p0 limit $p1, $p2 ",
    " from index 'PeopleIndex7' limit $p0, $p1 ",
    " from index 'IndexReturningDictionaryWithComplexObjects/QuerySyntax' where search(DictField, $p0) ",
    " from 'Orders' as x select { OrderByDescending : x.Lines.sort(function (a, b){ return ((a.ProductName < b.ProductName) ? 1 : (a.ProductName > b.ProductName)? -1 : 0);}) } ",
    " from index 'FooIndex' where DynamicKey >= $p0 ",
    " from index 'users/byname' where Name != $p0 ",
    " from 'Bookings' as x where x.FirstName = $p0 select { StartDate : toStringWithFormat(x.Start, \"dd.MM.yyyy\") } limit $p1, $p2 ",
    " from 'Blogs' where Title = $p0 limit $p1, $p2 ",
    " from index 'Orders/All' select facet(Product, max(Region), min(Region)) ",
    " from index 'Filter/key/Index' ",
    " from index 'test' order by Name select distinct Name ",
    " from index 'DynamicDictionaryTestMapIndexWithExtensionMethods' select Id, DictionaryAggregateOne, DictionarySumOne, DictionaryOfIntegers, DictionaryAggregateTwo, DictionarySumTwo, IsDictionaryOfInt, LongCount ",
    " from index 'SalesIndex' where IsCancelled = $p0 select facet(IsCancelled, sum(Nett), avg(Val)) ",
    " from index 'Index' where CategoryId = $p0 ",
    " from 'Items' where Name = $p0 limit $p1, $p2 ",
    " from index 'Posts/ByTitleAndDescription' where ((exists(Title) and not search(Title, $p0)) or search(Desc, $p1)) ",
    " from index 'Companies/ByPhone' where true and not exists(Phone) ",
    " from index 'Posts/Statistics/QuerySyntax/GroupByString' ",
    " from index 'Companies/ByEmployeeLastName' ",
    " from index 'Users/ByCity' limit $p0, $p1 ",
    " from index 'TracksIndex' order by Year as long, Title as alphaNumeric desc ",
    " from 'MyDocs' where Foo = $p0 and (((ItemListOne[].MyProp = $p1 or ItemListTwo[].MyProp = $p2) or ItemListThree[].MyProp = $p3) or ItemListFour[].MyProp = $p4) order by CreatedDate desc ",
    " from 'IndexedUsers' where Birthday < $p0 ",
    " from index 'GetMultipleStringFieldsIndex' where (search(StringA, $p0) or search(StringB, $p1) or search(StringC, $p2) or search(StringD, $p3)) ",
    " from 'Foos' where Data > $p0 select id() as FooId, Data as Data2 ",
    " from 'Orders' group by Array(Lines[].Product) order by Count as long select count(), key() as Products ",
    " from index 'Dogs/Owners/ByBreed' where Owners = $p0 ",
    " from 'Orders' as x select { OrderByDescending : x.Lines.sort(function (a, b){ return ((a.ProductName < b.ProductName) ? 1 : (a.ProductName > b.ProductName)? -1 : 0);}) } limit $p0, $p1 ",
    " from index 'SpatialIndex' limit $p0, $p1 ",
    " from 'Articles' as x select { HasProperties : x.Properties.length > 0 } ",
    " from 'Items' include Parent ",
    " from 'EntityWithNullableDateTimeOffsets' where At = $p0 limit $p1, $p2 ",
    " from index 'DogsIndex' where Name != $p0 order by id() as alphaNumeric desc ",
    " from 'PersistentCacheKeys' where Hash = $p0 limit $p1, $p2 ",
    " from index 'Companies/ByName' where exact(startsWith(Name, $p0)) ",
    " from 'Orders' as x include counters(x, 'Likes'),counters(x.Employee, 'Downloads') ",
    " from index 'DefaultSuggestionIndex' select suggest(Name, $p0) ",
    " from 'Bookings' as x where x.FirstName = $p0 select { Number : toStringWithFormat(x.Number) } limit $p1, $p2 ",
    " from 'Items' where Name = $p0 or search(name, $p1) limit $p2, $p3 ",
    " from index 'Buyers/Search' where IsActive = $p0 order by NameForSorting desc ",
    " from 'FooDocumentWithoutIdProperties' limit $p0, $p1 ",
    " from 'Orders' include Company,timeseries('Heartrate', '2020-01-01T00:00:00.0000000', null) limit $p0, $p1 ",
    " from index 'EntityIndex' where (OrganizationId = $p0 or CaseId = $p1) and ((CaseId != $p2 and HistoryCode = $p3)) ",
    " from index 'GeoIndex' where spatial.intersects(WKT, spatial.wkt($p0)) limit $p1, $p2 ",
    " from 'SampleDatas' where Date = $p0 ",
    " from 'Rations' where Composition[].Value = $p0 ",
    " from index 'UsersByName' as u where u.Name = $p0 select counter(u, Downloads) as Downloads limit $p1, $p2 ",
    " from 'People' where Name in ($p0) limit $p1, $p2 ",
    " from index 'Companies/ByName' order by Name select Name ",
    " from index 'Documents/ByTime' limit $p0, $p1 ",
    " from index 'DateTime' where TimeOfDay > $p0 limit $p1, $p2 ",
    " from index 'OrgIndex' select facet(id('facets/TestFacet')) ",
    " from index 'MySearchIndexTask' where Name = $p0 ",
    " from 'OrderHardwares' limit $p0, $p1 ",
    " from index 'MusicSearchIndex' where lucene(Title, $p0) and lucene(Album, $p1) and lucene(Keywords, $p2) limit $p3, $p4 ",
    " from index 'Index1' where exact(lucene(ExternalId, $p0)) ",
    " from 'Products' group by True select sum(PricePerUnit) as TotalPrice, count() as ProductsCount ",
    " from index 'IndexChildren' order by Name select id() as Id, Address, Name ",
    " from index 'TestDocumentIndex' ",
    " from 'Blogs' select Category ",
    " from 'MyEntities' where StringCollection = $p0 limit $p1, $p2 ",
    " from 'EdgeCaseValues' where DoubleNegativeInfinity = $p0 ",
    " from index 'ToDictionarySelectOrderBySumIndex' select id() as Id, SelectSum, OrderBySum, DateTimeIntDictionary ",
    " from 'Companies' where search(Name, $p0) include explanations() ",
    " from index 'Product/Search' where search(Name, $p0) or Category in ($p1) order by score(), PricePerUnit as double desc limit $p2, $p3 ",
    " from 'Profits2' limit $p0, $p1 ",
    " from 'DeliverySiteEstimates' limit $p0, $p1 ",
    " from 'EdgeCaseValues' where UintMaxVal = $p0 ",
    " from 'Locations' as location select { Id : id(location), Depth : location.LocationParents.length, Name : location.Name } ",
    " from index 'MultiMapIndex' where search(Content, $p0) ",
    " from 'IndexedUsers' where Rate between $p0 and $p1 ",
    " from index 'DocsIndex' select facet(DateValNullable < $p0, DateValNullable >= $p1 and DateValNullable < $p2, DateValNullable >= $p3) ",
    " from 'Companies' select id() as Id ",
    " from index 'EventsBySimpleLocation' ",
    " from index 'Users/AllProperties' where Query = $p0 ",
    " from 'Companies' order by custom(Name, 'CanUseCustomSorterWithOperations_697') ",
    " from index 'SalesIndex' where IsCancelled = $p0 select facet(IsCancelled, sum(Nett)), facet(IsCancelled, avg(Val)) as AndAggregateOnName ",
    " from 'MyDocs' ",
    " from index 'test' where Amount >= $p0 ",
    " from 'OrderItems' where Country in ($p0) ",
    " from 'Users' where Name = $p0 limit $p1, $p2 ",
    " from index 'Orders/All' select facet(Region, max(Quantity), min(Quantity)) ",
    " from index 'TemplateTests/Search' limit $p0, $p1 ",
    " from index 'DocumentIndex' as doc select { Id : id(doc)+\" test\", Name : doc.Name } ",
    " from index 'SampleData/Index' select facet(IntegerAge, min(IntegerAge)) ",
    " from 'TestDocs' where (true and not exists(StringArray)) limit $p0, $p1 ",
    " from 'EventsWithDates' where CreationTime in ($p0) ",
    " from 'Companies' where exact(startsWith(Name, $p0)) and exact(endsWith(Name, $p1)) ",
    " from 'Users' order by Age as long, random() ",
    " from index 'CameraCost' where Cost between $p0 and $p1 select facet(id('facets/CameraFacets')) ",
    " from 'Users' group by Name where exact(Name = $p0) select key() as Name, count() ",
    " from index 'QuestionIndex' where search(QuestionText, $p0) order by score() include highlight(QuestionText,100,1) limit $p1, $p2 ",
    " from index 'Users/ByName' where moreLikeThis(id() = $p1, $p0) include AddressId ",
    " from 'Addresses' group by City where Count = $p0 select key() as City, count() ",
    " from index 'BarnIndex' where MembersName = $p0 ",
    " from 'AnyBugs' ",
    " from 'Users' where Email = $p0 ",
    " from index 'Date' where lucene(Date, $p0) ",
    " from index 'UserIndex' where Name = $p0 limit $p1, $p2 ",
    " from 'Users' where FirstName = $p0 include LastName ",
    " from 'Users' group by Age, Name select key(), count() ",
    " from 'OrderLines' group by ProductName order by TotalPricePerUnit as double desc select key() as NameOfProduct, sum(PricePerUnit) as TotalPricePerUnit ",
    " from 'EdgeCaseValues' where DoublePositiveInfinity = $p0 ",
    " from index 'Companies/ByName' where endsWith(Name, $p0) ",
    " from 'MasterBedrooms' ",
    " from 'Users' include timeseries('Heartrate', last(11)) ",
    " from 'EdgeCaseValues' where TimeSpanHours = $p0 ",
    " from 'People' as p where id() = $p0 select timeseries(from p.HeartRate first 12 Hours where (Tag == $p1) group by '1 Hours'   select min(), max(), average()) as __timeSeriesQueryFunction0 limit $p2, $p3 ",
    " from index 'MyIndex' where NameButDifferentName = $p0 select NewPropertyName, NameButDifferentName ",
    " from index 'EntityIndex' where id() = $p0 select id() as Id, SubEntities include 'SubEntities[].Id' limit $p1, $p2 ",
    " from index 'test' where Wheels > $p0 ",
    " from 'DataResults' where SiteId = $p0 limit $p1, $p2 ",
    " from index 'Courses/ByCourseLesson' where CourseId = $p0 select CourseId, Index, LessonId ",
    " from index 'DummyIndexCount' where IntCount = $p0 ",
    " from index 'Users/ByActive' ",
    " from index 'SingleMapIndex' limit $p0, $p1 ",
    " from index 'CartesianIndex' where spatial.within(WKT, spatial.circle($p0, $p1, $p2)) limit $p3, $p4 ",
    " from index 'UserIndex' where Age = $p0 limit $p1, $p2 ",
    " from index 'EntitiesByLocation' where spatial.within(Coordinates, spatial.circle($p0, $p1, $p2)) order by spatial.distance(Coordinates, spatial.point($p3, $p4)) ",
    " from 'EdgeCaseValues' where DoubleMaxVal = $p0 ",
    " from 'YearlyInvoices' limit $p0, $p1 ",
    " from index 'TestAttributesByAttributes' where intersect((Attributes_Key = $p0 and Attributes_Value = $p1), Attributes_Key = $p2 and Attributes_Value = $p3)  order by id() limit $p4, $p5 ",
    " from index 'EntityIndex' where (OrganizationId = $p0 and HistoryCode = $p1) or CaseId != $p2 ",
    " from 'Blogs' order by Title desc ",
    " from 'Users' as u select timeseries(from u.Heartrate between $p0 and $p1 group by '1 Hours' , tag  select first(), max(), min(), last()) as __timeSeriesQueryFunction0 limit $p2, $p3 ",
    " from index 'UserIndex' where Name = $p0 and Active = $p1 ",
    " from 'EntityWithNullableDateTimeOffsets' where (At > $p0 and At != $p1) limit $p2, $p3 ",
    " from index 'SpatialIdx' where Date <= $p0 and spatial.within(Coordinates, spatial.circle($p1, $p2, $p3)) order by Date desc ",
    " from 'Users' as u select timeseries(from u.StockPrices select first(), last(), min(), max(), sum(), count(), average()) as __timeSeriesQueryFunction0 limit $p0, $p1 ",
    " from 'IndexedUsers' where Age <= $p0 ",
    " from index 'ProviderSearchIndex2' where (Name = $p0) and (Categories_Name = $p1) and (PracticeOffices_Name = $p2) ",
    " from 'Users' ",
    " from index 'MyIndex/WithoutAnalyzer' where search(Name, $p0) limit $p1, $p2 ",
    " from index 'ClassWithDouble/Index' order by Rating as double ",
    " from index 'Employees/CurrentCount' ",
    " from index 'IndexReturningDictionaryWithComplexObjects/MethodSyntax' ",
    " from index 'Companies/ByName' select Name, Fax limit $p0, $p1 ",
    " declare function output(__alias0) {   \tvar order = __alias0;   \tvar sum = order.Lines.map(function(l){return l.PricePerUnit*l.Quantity;}).reduce(function(a, b) { return a + b; }, 0);   \treturn { Sum : sum };   }   from 'Orders' as __alias0 where __alias0.Company = $p0 select output(__alias0) ",
    " from 'SampleClasses' where To = $p0 and Kind = $p1 limit $p2, $p3 ",
    " from 'MultiOrders' as x select { SortedOrdersByDate : x.Orders.sort(function (a, b){ return ((a.OrderedAt < b.OrderedAt) ? -1 : (a.OrderedAt > b.OrderedAt)? 1 : 0);}) } ",
    " from index 'BooksSearch' where lucene(Text, $p0) ",
    " from '@all_docs' order by Value desc ",
    " from 'Users' where Active = $p0 limit $p1, $p2 ",
    " from index 'FooIndex' where (DateIn != $p0 and Age < $p1) select facet(id('facets/FooFacets')) ",
    " from index 'Companies/ByName' order by Name desc select Name ",
    " from 'SampleDocs' where Number = $p0 select Name ",
    " from 'Documents' ",
    " from 'SampleClasses' where To = $p0 and Kind = $p1 select To limit $p2, $p3 ",
    " from 'Test\\\"Users' ",
    " from 'TestDocs' where (SomeProperty != $p0 and SomeProperty != $p1) limit $p2, $p3 ",
    " from index 'SpatialIdx' where (Capacity >= $p0 and Capacity <= $p1) and spatial.within(Coordinates, spatial.circle($p2, $p3, $p4)) order by Date ",
    " from index 'Companies/ByName' select Fax limit $p0, $p1 ",
    " from index 'Motorbikes/PolicySearch' where PolicyNumbers in ($p0) and (lucene(EngineNumber, $p1) or lucene(Vin, $p2)) ",
    " from 'Companies' where search(Name, $p0) ",
    " from index 'TestDocumentsIndex' where Language = $p0 ",
    " declare function output(purchase, $p0) {   \tvar isPrinted = purchase.Events.filter(function(a){return a.Type===\"Printed\"&&a.Handled===true;});   \tvar isChecked = purchase.Events.filter(function(a){return a.Sort===\"Checked\";}).map(function(a){return a.Quantity;}).reduce(function(a, b) { return a + b; }, 0)>=$p0;   \treturn { IsPrinted : isPrinted };   }   from 'Purchases' as purchase select output(purchase, $p0) ",
    " from 'Profits' limit $p0, $p1 ",
    " from index 'MyIndex' where Values = $p0 limit $p1, $p2 ",
    " from index 'FooIndex' where DynamicKey = $p0 ",
    " from 'Builds' as entry load entry.TeamCityBuildLocalId as build select { Build : build, Downloads : load(build.DownloadsIds) } ",
    " from index 'Roots/ByUserId' where User_Id = $p0 ",
    " from 'People' as p select timeseries(from p.HeartRate select count(), percentile(90)) as __timeSeriesQueryFunction0 limit $p0, $p1 ",
    " from 'WithNullableFields' where TheNullableField = $p0 limit $p1, $p2 ",
    " from 'Companies' where fuzzy(Name = $p0, 0.5) ",
    " from index 'UserByFirstName' limit $p0, $p1 ",
    " from index 'NestedObjectIndex' where Name = $p0 select ContainerName, Name, Quantity limit $p1, $p2 ",
    " from '@all_docs' order by id() select Tags[].Id, Tags[].Id3 ",
    " from index 'Companies/ByName' select ExtraField limit $p0, $p1 ",
    " from index 'Index1' where startsWith(Name, $p0) and endsWith(Name, $p1) ",
    " from index 'Product/ByNumericAttributeUsingField' where Color = $p0 ",
    " from index 'EntityIndex' where ((OrganizationId = $p0 and CaseId != $p1)) and HistoryCode = $p2 ",
    " from index 'test' order by X desc ",
    " from index 'SpatialIndex' ",
    " from index 'Cars' select facet(Make, sum(Price)) ",
    " from index 'test' where Email = $p0 order by Name, score() ",
    " from 'Users' as u select timeseries(from u.Heartrate group by '1 Hours'   select first(), last(), slope()) as __timeSeriesQueryFunction0 limit $p0, $p1 ",
    " from index 'AverageHeartRateDaily/ByDateAndUser' ",
    " from 'People' where Age > $p0 select timeseries(from Heartrate between $p1 and $p2 load Tag as w where (Value <= w.Accuracy) group by '1 Months' , w.Accuracy  select average(), max()) as __timeSeriesQueryFunction limit $p3, $p4 ",
    " from 'TestViews' select TestField ",
    " from 'Users' as u where u.Name = $p0 load u.AddressId as address select { Name : u.Name, Country : address.Country } ",
    " from 'Users' where Age > $p0 select Name, Age ",
    " declare function output(item) {   \tvar total = Object.map(item.MusicCollection, function(v, k){ return v.map(function(x){return x.Quantity*x.Price;}).reduce(function(a, b) { return a + b; }, 0);});   \treturn { Total : total };   }   from index 'TestDocumentByName' as item select output(item) ",
    " from 'Developers' where PreferredIDE.Name = $p0 ",
    " from index 'DocumentIndex' as x load x.DocumentId as doc select { Id : id(doc), Name : doc.Name, ExtraProperty : doc.ExtraProperty } limit $p0, $p1 ",
    " from index 'Activity/ByMonth' order by Users as long ",
    " from 'Companies' where Unknown = $p0 ",
    " from index 'Authors/ByNameAndBooks' where Name = $p0 or Books = $p1 ",
    " from 'Orders' group by OrderedAt.Year, OrderedAt.Month limit $p0, $p1 ",
    " from index 'Companies/ByUnknown' where Unknown = $p0 ",
    " from 'EdgeCaseValues' where IntMaxVal = $p0 ",
    " from index 'Gespr\u00c3\u00a4chTemplateIndex' ",
    " from index 'TestIndex' where search(Name, $p0) ",
    " from 'PersonAndDates' where Date.Year >= $p0 ",
    " from 'Users' where Name = $p0 and Active = $p1 limit $p2, $p3 ",
    " from index 'Fox/Search' where proximity(search(Name, $p0), 1) ",
    " from 'People' as p where id() = $p0 select timeseries(from p.HeartRate between $p1 and $p2 group by '1 Minutes'  with interpolation(Last) select max()) as __timeSeriesQueryFunction0 limit $p3, $p4 ",
    " from index 'test' where Email = $p0 order by score(), Name desc ",
    " from 'Users' where Name > $p0 ",
    " from index 'Companies/CustomAnalyzers' where Address1 = $p0 ",
    " from 'Users' select id() as Id, Name limit $p0, $p1 ",
    " from 'Users' as u select { CmpXngValue : cmpxchg(u.Name), CounterValue : counter(u, \"downloads\") } limit $p0, $p1 ",
    " from index 'ProductsWarranty' where Duration > $p0 select Name, IsAvailable, Category, PricePerUnit, Mode, Type, Manufacturer limit $p1, $p2 ",
    " from index 'PropertiesSearchIndex' where Unavailabilities_StartDay >= $p0 and Unavailabilities_EndDay <= $p1 limit $p2, $p3 ",
    " from index 'CrudeJoinTask' ",
    " from index 'Index' ",
    " from index 'ReduceMeByTag' ",
    " from index 'PartialResourceStateTimelinesIndex' limit $p0, $p1 ",
    " from index 'test' select suggest(Name, $p0) as NewName ",
    " from 'MyDocs' order by id() select NullableInt as SomeProp ",
    " from 'Entities' where EntityBRef.Id = $p0 ",
    " from index 'CommitByRevision' where Revision > $p0 and Revision < $p1 ",
    " from index 'AverageIndex' select Name, Average limit $p0, $p1 ",
    " from 'ParentModels' limit $p0, $p1 ",
    " from index 'FormOpenByDateAndMediaSourceAndVersion' where MediaSource = $p0 limit $p1, $p2 ",
    " from index 'Index' order by Amount as double ",
    " from index 'Employees/ByFirstName' where search(FirstName, $p0) ",
    " from 'Invoices' as i select { Id : id(i), Orders : i.Orders.map(function(orderRef){return {orderRef:orderRef,order:load(id(orderRef))};}).map(function(__rvn0){return {__rvn0:__rvn0,customer:load(__rvn0.order.CustomerId)};}).map(function(__rvn1){return {Id:id(__rvn1.__rvn0.order),CustomerName:__rvn1.customer.Name,Items:__rvn1.__rvn0.order.Items.map(function(item){return {item:item,category:load(item.CategoryId)};}).map(function(__rvn0){return {ItemName:__rvn0.item.Name,CategoryName:__rvn0.category.Name};}),Instructions:__rvn1.__rvn0.order.Instructions.map(function(instruction){return {Title:instruction.Title};})};}) } ",
    " from index 'test' where search(Tags, $p0) ",
    " from index 'NullDynamicValueIndexPlusOperation' where Age = $p0 ",
    " from index 'DocsIndex' ",
    " from 'TestDocuments' where Name != $p0 and not (search(Name, $p1)) and not (search(Name, $p2)) ",
    " from 'Logfiles' where UploadDate >= $p0 select distinct Owner limit $p1, $p2 ",
    " from 'MyEntities' ",
    " from index 'Spatial' where spatial.within(Location, spatial.circle($p0, $p1, $p2)) and Description = $p3 limit $p4, $p5 ",
    " from 'Users' where endsWith(id(), $p0) ",
    " from index 'TestItemsIndex' where Area = $p0 order by EventDate limit $p1, $p2 ",
    " from 'TestDocs' where StringArray.Length > $p0 and SomeProperty = $p1 limit $p2, $p3 ",
    " from 'Buildings' limit $p0, $p1 ",
    " from 'Orders' include CustomerId ",
    " from 'Glasses' where @metadata.'Is-Nice' = $p0 ",
    " from index 'MapReduceIndexReturningDictionaryWithComplexObjects/QuerySyntax' ",
    " from 'Documents' as d select { Id : id(d), SubDocuments : d.SubDocuments.map(function(x){return {Status:x.Status};}) } ",
    " from index 'UsersWithProductsByNameWithExternalLoad' where Name = $p0 limit $p1, $p2 ",
    " from index 'ClaimsByBillTypeAndMatchingStatus' order by BillType ",
    " from 'Bookings' as x where x.FirstName = $p0 select { StartDate : toStringWithFormat(x.Start, \"en-US\") } limit $p1, $p2 ",
    " from index 'DeviceInfoIndexMap' ",
    " from 'Items' where spatial.within(spatial.wkt(ShapeWkt), spatial.circle($p0, $p1, $p2)) ",
    " from index 'Auto/Blogs/ByTitle' limit $p0, $p1 ",
    " from index 'IndexName' where Birthday <= $p0 ",
    " from index 'MapReduceIndexReturningDictionaryWithComplexObjects/MethodSyntax' ",
    " from index 'Hi' where search(Tags, $p0) ",
    " from 'People' as p select timeseries(from p.HeartRate select standarddeviation()) as __timeSeriesQueryFunction0 limit $p0, $p1 ",
    " from 'Users' as u where id() = $p0 select timeseries(from u.'HeartRate@ByHour') as __timeSeriesQueryFunction0 limit $p1, $p2 ",
    " from index 'IndexReturningDictionaryWithComplexObjects/QuerySyntax' where Address_ZipCode = $p0 ",
    " from 'Blogs' where Title = $p0 and Tags[].Name = $p1 select Category, Title limit $p2, $p3 ",
    " declare function output(d, $p1) {   \tvar externalDocument = id(d)==null?null:load($p1);   \tvar x = id(d)==null?0:10;   \treturn { Id : id(d), Int1 : x, Int2 : externalDocument.Int+1 };   }   from 'RavenDocuments' as d where id() = $p0 select output(d, $p1) limit $p2, $p3 ",
    " from 'Events' where id() = $p0 limit $p1, $p2 ",
    " from index 'PersonByDate' where Date_Year >= $p0 ",
    " from 'Products' limit $p0, $p1 ",
    " from 'Foos' order by Price as double ",
    " from 'Properties' where (id() = $p0) and BedroomCount >= $p1 ",
    " from 'Users' select id() as Name limit $p0, $p1 ",
    " from index 'CameraCost' where DateOfListing > $p0 select facet(DateOfListing < $p1, DateOfListing > $p2 and DateOfListing < $p3, DateOfListing > $p4 and DateOfListing < $p5, DateOfListing > $p6 and DateOfListing < $p7, DateOfListing > $p8) ",
    " from 'Test\\u0017Users' ",
    " from 'Orders' as 'order' select { Employee : load(order.Employee), Company : order.Company } ",
    " from 'Orders' group by Employee, Company order by Count as long select key(), count() ",
    " from index 'Precision' where M > $p0 limit $p1, $p2 ",
    " from 'Blogs' where (search(Category, $p0) or search(Title, $p1)) include highlight(Title,18,2),highlight(Category,18,2) ",
    " from 'Orders' order by ShipTo.Country select distinct ShipTo.Country ",
    " from 'Foos' order by Name ",
    " from 'Users' where Age > $p0 select timeseries(from Heartrate) as __timeSeriesQueryFunction limit $p1, $p2 ",
    " from 'Addresses' ",
    " from 'Blogs' order by Category ",
    " from 'ProviderPto2s' where ((AddressesPto[].Address.Zip = $p0 and AddressesPto[].Address.AddressTypePto in ($p1)) or (((((((PracticeOfficesPto[].PrimaryContact.Address.Zip = $p2 and PracticeOfficesPto[].PrimaryContact.Address.AddressTypePto in ($p3)) and PracticeOfficesPto[].EffectiveFrom <= $p4) and (PracticeOfficesPto[].EffectiveThrough = $p5 or (PracticeOfficesPto[].EffectiveThrough >= $p6 and PracticeOfficesPto[].EffectiveThrough != $p7))) and PracticeOfficesPto[].PrimaryContact.ContactEffectiveFrom <= $p8) and (PracticeOfficesPto[].PrimaryContact.ContactEffectiveThrough = $p9 or (PracticeOfficesPto[].PrimaryContact.ContactEffectiveThrough >= $p10 and PracticeOfficesPto[].PrimaryContact.ContactEffectiveThrough != $p11))) and PracticeOfficesPto[].PrimaryContact.AddressEffectiveFrom <= $p12) and (PracticeOfficesPto[].PrimaryContact.AddressEffectiveThrough = $p13 or (PracticeOfficesPto[].PrimaryContact.AddressEffectiveThrough >= $p14 and PracticeOfficesPto[].PrimaryContact.AddressEffectiveThrough != $p15)))) or (PayTosPto[].PrimaryContact.Zip = $p16 and PayTosPto[].PrimaryContact.AddressTypePto in ($p17)) ",
    " from 'TestBlogs' order by Posts.Count as long ",
    " from 'Orders' order by ShipTo.ZipCode as long desc ",
    " from index 'EntityIndex' where ((CaseId != $p0 and OrganizationId = $p1)) or HistoryCode = $p2 ",
    " from index 'Entity2Index' where (id() != $p0 and id() != $p1) ",
    " from index 'TestIndex' where TagId = $p0 limit $p1, $p2 ",
    " from 'Users' where Age between $p0 and $p1 ",
    " declare function output(u) {   \tvar detailId = \"details/\"+u.DetailShortId;   \tvar detail = load(detailId);   \treturn { Name : u.Name, Detail : detail };   }   from 'Users' as u select output(u) ",
    " from index 'MyIndex' where NameButDifferentName = $p0 select NewPropertyName, NameButDifferentName limit $p1, $p2 ",
    " declare function output(o) {   \tvar _function = o.Lines.map(function(l){return l.PricePerUnit*l.Quantity;}).reduce(function(a, b) { return a + b; }, 0);   \treturn { Sum : _function };   }   from 'Orders' as o select output(o) ",
    " from 'Companies' where Country in ($p0) ",
    " from 'Users' order by Name.Last ",
    " from index 'IndexReturningDictionary/QuerySyntax' ",
    " from index 'TestGrouping4' order by d as long select e, ab, ac, a, d ",
    " from index 'CompanyByName' where Name = $p0 limit $p1, $p2 ",
    " from index 'Companies/ByName' where Name != $p0 order by Name select Name ",
    " from index 'Index' select id() as Id, Customer ",
    " from 'Albums' where Tags3D = $p0 ",
    " from 'Products' select Properties.Vendor limit $p0, $p1 ",
    " from index 'PersonsIndex' include Offices ",
    " from index 'PaymentAll' where AmountLeft < $p0 select id() as Id, AmountLeft ",
    " from 'Posts' where id() = $p0 select Title ",
    " from index 'Users/ByName' select suggest(Name, $p0, $p1) ",
    " from 'Users' group by Name, LastName where exact(Name = $p0) select Name, LastName, count() ",
    " from 'CategoryCounts' ",
    " from index 'Index' where (AuthorId = $p0 and startsWith(Title, $p1)) and Language in ($p2) ",
    " from index 'ConventionalHyphenIndex' where Name = $p0 ",
    " from index 'MapReduceIndexWithNestedFieldJs' ",
    " from 'Sections' order by Position as long select Position limit $p0, $p1 ",
    " from index 'Users/ByAddress' where Address = $p0 limit $p1, $p2 ",
    " from 'People' as p select timeseries(from p.HeartRate group by '10 Minutes'  with interpolation(Linear) select sum(), average()) as __timeSeriesQueryFunction0 limit $p0, $p1 ",
    " from index 'Companies/ByCity' select Name, City ",
    " from 'IndexedUsers' where Animal.Color = $p0 ",
    " from index 'DogsIndex' where Name != $p0 order by id() as alphaNumeric ",
    " from 'TestDocs' where Birthday = $p0 ",
    " from 'Users' where Items[].Key = $p0 and Items[].Value = $p1 ",
    " from index 'Client/ImportSummaryByDate/2' order by Date ",
    " from index 'MapReduceIndexReturningDictionary/MethodSyntax' ",
    " from 'Users' group by Name, Age select key(), count() ",
    " from 'Locations' where startsWith(Name, $p0) select Name, Properties.Count as Count ",
    " from index 'UserIndex' where GroupId = $p0 select id() as Id, FirstName, LastName, GroupId ",
    " from 'OrderItems' where Quantity in ($p0) ",
    " from index 'Companies/CustomAnalyzers' where search(Address2, $p0) ",
    " from 'Users' as user select counter(user, Downloads) as Downloads, counter(user, Likes) as Likes ",
    " from index 'UserIndex' select id() as Id, Name ",
    " from index 'UsersAndAccounts' where Name = $p0 ",
    " from 'Orders' order by ShipTo.ZipCode as long ",
    " from index 'TransportsIndex' order by TransportId, ChildId select ChildId, TransportId, Name ",
    " from 'TestDocs' where StringArray all in ($p0) and SomeProperty = $p1 ",
    " from index 'Companies/ByEmployeeLastName' where LastName = $p0 ",
    " from 'CalcSystems' ",
    " from index 'SalesIndex' where IsCancelled = $p0 select facet(IsCancelled, sum(Nett)) as Name1, facet(IsCancelled, avg(Val)) as Name1 ",
    " from index 'TracksIndex' order by Title as alphaNumeric, Year as long desc ",
    " from 'Users' order by Name.Last select Name.First as FirstName, Name.Last as LastName, id() as UserId ",
    " from 'Articles' as x select { Round : Math.round(x.Value), Round2 : Math.round(x.Value * Math.pow(10, 2)) / Math.pow(10, 2), Round4 : Math.round(x.Value * Math.pow(10, 4)) / Math.pow(10, 4) } ",
    " from 'Users' as u where id() = $p0 select timeseries(from u.HeartRate group by '1 days'  ) as __timeSeriesQueryFunction0 limit $p1, $p2 ",
    " from index 'FooIndex' where id() = $p0 limit $p1, $p2 ",
    " from index 'Users/NameAndPassportSearching' where startsWith(ReversedName, $p0) ",
    " from index 'MySearchIndexTask' where MyEnumField = $p0 ",
    " from 'Users' where lucene(Email, $p0) ",
    " from 'Companies' order by Name desc ",
    " from 'GeekPeople' where (exists(FavoritePrimes) and not search(FavoritePrimes, $p0)) ",
    " from 'TestDocs' where Name in ($p0) ",
    " from index 'AttachmentIndex' where AttachmentNames = $p0 ",
    " from 'Orders' ",
    " from 'Images' where search(Name, $p0) ",
    " from index 'PersonsNotAnalyzed' where exact(Name in ($p0)) limit $p1, $p2 ",
    " from 'Documents' as x select { HasTags : x.Tags.filter(function(t){return t!=null;}).some(function(t){return t===\"tag\";}) } limit $p0, $p1 ",
    " from 'Locations' as location select { Id : id(location), Depth : location.LocationParents.length, Depth2 : location.LocationParents.length, Name : location.Name } ",
    " from index 'TestIndexArraysLastIndexOf' where LastIndexOfOfMyDoubleArray = $p0 ",
    " from 'EdgeCaseValues' where TimeSpanMinVal = $p0 ",
    " from index 'Events/SpatialIndex' where spatial.within(Coordinates, spatial.circle($p0, $p1, $p2)) order by Name ",
    " from index 'users/byname' ",
    " from 'MyDocs' as d order by id() select { SomeProp : null, HasValue : false } ",
    " from 'Foos' where (Start <= $p0 and Start != $p1) and Until > $p2 limit $p3, $p4 ",
    " from 'Items' where Fields.'users/1-A' = $p0 ",
    " from 'Orders' group by Array(Lines[].Product) order by Count select key() as Products, count() ",
    " from 'OrderLines' group by ProductName order by NameOfProduct select key() as NameOfProduct, sum(Quantity) as OrderedQuantity ",
    " from 'Books' where (Name in ($p0)) and (Posts[].Type in ($p1)) ",
    " from index 'Roots/ByUserId' limit $p0, $p1 ",
    " from 'Companies' order by Name ",
    " from 'People' as p select timeseries(from p.HeartRate between $p1 and $p2 where (Tag == $p0) select percentile(45.504488258391845), min(), max()) as __timeSeriesQueryFunction0 limit $p3, $p4 ",
    " from 'Users' where startsWith(Name, $p0) ",
    " from 'People' where id() = $p0 select timeseries(from HeartRate between $p1 and $p2 scale 0.001 offset '01:00:00') as __timeSeriesQueryFunction limit $p3, $p4 ",
    " from 'OrderLines' group by ProductName select key() as NameOfProduct, sum(Quantity) as TotalQuantity ",
    " from index 'ListItemIndex' where AccountId = $p0 ",
    " from 'Items' where At = $p0 ",
    " from 'Users' where endsWith(Name, $p0) ",
    " from index 'Index3' as c load c.OrderId as o select o ",
    " from index 'MySpatialIndex' where spatial.intersects(Coordinates, spatial.wkt($p0), 0) limit $p1, $p2 ",
    " from 'As' where B = $p0 ",
    " from 'WithIntegers' where Sequence > $p0 and Sequence < $p1 ",
    " from 'Companies' as x select { Name : x.Name+\" \"+x.Name, TotalLikes : counter(x, \"Total Likes\") } limit $p0, $p1 ",
    " from 'TestDocs' where (Birthday > $p0 and Birthday != $p1) ",
    " from 'TestDocs' where StringArray in ($p0) ",
    " from index 'UsersByName' where FirstName = $p0 or LastName = $p1 ",
    " from index 'SalesIndex' where IsCancelled = $p0 select facet(IsCancelled, sum(Nett)), facet(IsCancelled, avg(Val)) ",
    " from index 'UserIndex' where lucene(Name, $p0) and lucene(Name, $p1) select facet(Admin) ",
    " from 'Users' group by Name select key() as Name, count() ",
    " from 'Entities' where Number = $p0 limit $p1, $p2 ",
    " from index 'UsersIndex3' where UserName != $p0 select Name, UserSchoolId as SchoolId ",
    " from 'Users' as u where u.Age > $p0 select { CmpXngValue : cmpxchg(u.Name) } limit $p1, $p2 ",
    " from index 'EntitySpatialIndex' where spatial.within(Coordinates, spatial.circle($p0, $p1, $p2)) ",
    " declare function output(x) {   \tvar test = 1;   \treturn { Average1 : x.Properties.reduce(function(a, b) { return a + b; }, 0)/(x.Properties.length||1), Average2 : x.Items.map(function(a){return a.Value;}).reduce(function(a, b) { return a + b; }, 0)/(x.Items.length||1), Average3 : x.Properties.map(function(a){return a;}).reduce(function(a, b) { return a + b; }, 0)/(x.Properties.length||1) };   }   from 'Articles' as x select output(x) ",
    " from index 'PersonsIndex' where Name = $p0 select facet(Age) ",
    " from index 'SpatialIdx' where spatial.within(Coordinates, spatial.circle($p0, $p1, $p2)) order by Venue, spatial.distance(Coordinates, spatial.point($p3, $p4)) ",
    " from index 'Data/Search' where Optional = $p0 ",
    " from index 'Users/ByNameAndPets' where Pets in ($p0) or Name = $p1 ",
    " from 'Posts' where exact(id() = $p0) select Title ",
    " from index 'Cars' where Year = $p0 select facet(Make, max(Price)) ",
    " from index 'test' where startsWith(f_name, $p0) order by f_License desc, f_totaldownload ",
    " from index 'PeopleIndex5' limit $p0, $p1 ",
    " from index 'Proficiencies/ConsultantId' where Consultant_Id = $p0 ",
    " from 'Companies' as x select counter(x, 'Total Likes') as TotalLikes ",
    " from index 'PeopleIndex16' limit $p0, $p1 ",
    " from 'Users' where Name = $p0 and search(Age, $p1) ",
    " from index 'Posts/Statistics/GroupByFalse' ",
    " from 'TestDocuments' where Name != $p0 and (exists(Name) and not search(Name, $p1) and not search(Name, $p2)) ",
    " from index 'TestIndexArraysLastIndexOf' where LastIndexOfOfMyIntArrayWithIndexWithCount = $p0 ",
    " declare function output(invoice) {   \tvar vat = invoice.VATTotals;   \treturn { Id : id(invoice), VATTotals : Object.map(vat, function(v, k){ return {Price:v.Price,Percentage:v.Percentage,VATName:load(v.VATRateId).Name};}) };   }   from 'Invoices' as invoice select output(invoice) ",
    " from 'People' include Offices ",
    " from 'Companies' where lucene(ExternalId, $p0) and lucene(Name, $p1) ",
    " from 'IndexedUsers' where Name = $p0 and (Name = $p1 or Name = $p2) ",
    " from 'Bookings' as x where x.FirstName = $p0 select { StartDate : toStringWithFormat(x.Start, \"dd.MM.yyyy\") } ",
    " from index 'ArticleIndex' where moreLikeThis(id() = $p1, $p0) ",
    " from index 'MixedSyntaxIndex' where ProductName = $p0 ",
    " from index 'IndexWithCustomMethod' ",
    " from 'Companies' where Test between $p0 and $p1 and Test between $p2 and $p3 and exists(Test2) ",
    " from 'Users' select timeseries(   from HeartRateMeasures   group by '5 min'   select last()   ) as __timeSeriesQueryFunction ",
    " from 'Users' where Age >= $p0 ",
    " from index 'Test' select suggest(Name, $p0, $p1) ",
    " from index 'EntityIndex' where ContainsFoo = $p0 limit $p1, $p2 ",
    " from index 'Users/ByActive' order by id() ",
    " from index 'JavaScriptIndexWithIdMethod' ",
    " from 'Users' group by Age select key() as Age, count() ",
    " from index 'SpatialIndex' where spatial.within(Coordinates, spatial.circle($p0, $p1, $p2)) order by spatial.distance(Coordinates, spatial.point($p3, $p4)) ",
    " from 'People' as p where id() = $p0 select timeseries(from p.HeartRate between $p1 and $p2 group by '1 Hours'  with interpolation(Linear) select max()) as __timeSeriesQueryFunction0 limit $p3, $p4 ",
    " from index 'CompaniesByEmployees' where Employees = $p0 ",
    " from index 'CommitByRevision' where Revision < $p0 ",
    " from 'Users' where lucene(Widgets[].Sprockets[].Name, $p0) ",
    " from index 'TestObjs/Summary' select MyId, MyName ",
    " from 'PersonAndDates' where Date.Minute <= $p0 ",
    " from 'TestModels' where id() = $p0 limit $p1, $p2 ",
    " from 'ViewModels' where Type = $p0 limit $p1, $p2 ",
    " from 'Users' select Name.First as FirstName, Name.Last as LastName, id() as UserId ",
    " from index 'IndexReturningDictionaryWithComplexObjects/MethodSyntax' where search(Address, $p0) ",
    " from index 'TeemoByDuration' where Duration = $p0 limit $p1, $p2 ",
    " from 'Orders' where id() = $p0 select Lines ",
    " from 'Companies' ",
    " from 'Users' select cmpxchg(\"users/1\") as cmpxchg ",
    " from index 'Creatives/ClickActions/2' ",
    " from 'Logfiles' where (StoreId != $p0 and exists(SavedAnalyses)) limit $p1, $p2 ",
    " from index 'People/ByAge' where Age = $p0 limit $p1, $p2 ",
    " from 'Companies' where true and not exists(Phone) ",
    " from index 'Regs' select RegisteredAt limit $p0, $p1 ",
    " from index 'FanoutByNumbersWithReduce' where Sum = $p0 limit $p1, $p2 ",
    " from index 'PeopleIndex9' limit $p0, $p1 ",
    " from index 'IndexReturningDictionaryWithComplexObjects/MethodSyntax' where search(DictField, $p0) ",
    " from index 'BlogIndex' where search(Title, $p0, and) ",
    " from index 'CustomersIndex' where Number = $p0 ",
    " from index 'StronglyTypedIndex' ",
    " from index 'NullDynamicValueIndexMultOperation' where Age = $p0 ",
    " from 'Builds' as entry where (entry.ProductKey in ($p1)) and (entry.Channel in ($p2)) load $p0 as __load select __load ",
    " from index 'TestItemsIndex' order by EventDate limit $p0, $p1 ",
    " from 'Employees' where id() = $p0 limit $p1, $p2 ",
    " from index 'SubClassIndex' where Int = $p0 ",
    " from 'People' as u select timeseries(from u.Heartrate between $p1 and $p2 load Tag as w where (w.Manufacturer != $p0) group by '1 Months' , w.Accuracy  select average(), max()) as __timeSeriesQueryFunction0 limit $p3, $p4 ",
    " from index 'TracksIndex' order by Title as alphaNumeric, Artist as alphaNumeric ",
    " from 'EdgeCaseValues' where DoubleMinVal = $p0 ",
    " from 'Users' select 1 as Id, Name limit $p0, $p1 ",
    " from index 'ImageByName' where search(Name, $p0) order by Name ",
    " from 'Orders' group by Array(Lines[].Product), ShipTo.Country order by Count select Lines[].Product as Products, ShipTo.Country as Country, count() ",
    " from index 'Posts/ByTitleAndContent' where moreLikeThis(id() = $p1, $p0) ",
    " from 'Users' include timeseries('Heartrate', last(600, 'Second')) ",
    " from 'Items' where SchemaFullName = $p0 and ValueBlobString = $p1 ",
    " from 'OrderLines' group by ProductName order by NameOfProduct desc select key() as NameOfProduct, sum(Quantity) as OrderedQuantity ",
    " declare timeseries __timeSeriesQueryFunction0(person, watch) {   from person.Heartrate between $p3 and $p4 load Tag as watch where (Values[0] > $p1) and (watch.Accuracy >= $p2) group by '1 Months'   select max(), min(), average(), count()   }   declare function output(person) {   \tvar customFunc = function(ranges){return {TotalMax:ranges.map(function(range){return range.Max[0];}).reduce(function(a, b) { return Raven_Max(a, b);}),TotalMin:ranges.map(function(range){return range.Min[0];}).reduce(function(a, b) { return Raven_Min(a, b);}),AvgOfAvg:ranges.map(function(range){return range.Average[0];}).reduce(function(a, b) { return a + b; }, 0)/(ranges.length||1),MaxGroupSize:ranges.map(function(r){return r.Count[0];}).reduce(function(a, b) { return Raven_Max(a, b);})};};   \tvar tsQuery = __timeSeriesQueryFunction0(person, watch);   \treturn { Series : tsQuery, Custom : customFunc(tsQuery.Results) };   }   from 'People' as person where person.Age > $p0 select output(person) limit $p5, $p6 ",
    " declare function output(user) {   \tvar c = counter(user, \"Downloads\");   \treturn { Name : user.Name, Downloads : c };   }   from 'Users' as user select output(user) ",
    " from index 'Companies/ByName' order by Name desc select Name limit $p0, $p1 ",
    " from index 'SampleSearchIndex' where NullableInt <= $p0 ",
    " from 'Users' as u select { PadLeft : u.Name.padStart(10, \"z\"), PadRight : u.Name.padEnd(10, \"z\"), StartsWith : u.Name.startsWith(\"J\"), EndsWith : u.Name.endsWith(\"b\"), Substr : u.Name.substr(0, 2), Join : [u.Name,u.LastName,u.IdNumber].join(\", \"), ArrayJoin : u.Roles.join(\"-\"), Trim : u.Name.trim(), ToUpper : u.Name.toUpperCase(), ToLower : u.Name.toLowerCase(), Contains : u.Name.indexOf(\"e\") !== -1, Format : \"Name: \"+u.Name+\", LastName : \"+u.LastName, Split : u.Name.split(new RegExp(\"r\", \"g\")), SplitLimit : u.Name.split(new RegExp(\"r\", \"g\")), SplitArray : u.Name.split(new RegExp(\"r\"+\"|\"+\"e\", \"g\")), SplitArgument : u.Name.split(new RegExp(u.Roles, \"g\")), SplitStringArray : u.Name.split(new RegExp(\"er\"+\"|\"+\"rr\", \"g\")), Replace : u.Name.replace(new RegExp(\"r\", \"g\"), \"d\"), ReplaceString : u.Name.replace(new RegExp(\"Jerry\", \"g\"), \"Charly\"), ReplaceArguments : u.Name.replace(new RegExp(u.Name, \"g\"), u.LastName), ReplaceArgumentsComplex : u.Name.replace(new RegExp((u.Name+\"a\"), \"g\"), (u.LastName+\"a\")) } ",
    " from 'OrderSubscriptions' limit $p0, $p1 ",
    " from index 'test4' limit $p0, $p1 ",
    " from index 'Companies/CustomAnalyzers' where Email = $p0 ",
    " from index 'FormOpenByDateAndMediaSourceAndVersion' limit $p0, $p1 ",
    " from 'Documents' as d where (id() in ($p0)) and (d.Deleted = $p1) select { Id : id(d), Deleted : d.Deleted, Values : d.SubDocuments.filter(function(x){return $p2.length===0||$p3.indexOf(x.TargetId)>=0;}).map(function(x){return {TargetId:x.TargetId,TargetValue:x.TargetValue};}) } ",
    " from index 'SpatialIndex' order by spatial.distance(Coordinates, spatial.point($p1, $p2), $p0) ",
    " from index 'Foos/ByBarCount/Property' where Bars_Count = $p0 ",
    " from index 'Companies/CustomAnalyzers' where Address2 = $p0 ",
    " from index 'TestIndex' select Alias, Name, Type ",
    " from 'Items' select Tags ",
    " from 'Orders' where Freight > $p0 ",
    " from 'Users' as u where id() = $p0 select timeseries(from u.HeartRate between $p1 and $p2 group by '500 Milliseconds'   select max()) as __timeSeriesQueryFunction0 limit $p3, $p4 ",
    " from 'Items' where Names in ($p0) and Value = $p1 ",
    " from index 'Orders/ByOrderBy/DateTimeOffset' where exact(ShippedAt = $p0) ",
    " from index 'DocumentIndex' where Name = $p0 select id() as Id ",
    " from 'Profits2/References' limit $p0, $p1 ",
    " from 'OrderableEntities' where 'Order' > $p0 ",
    " from 'People' as u select timeseries(from u.Heartrate between $p0 and $p1 load Tag as w group by '1 Months' , w  select average(), max()) as __timeSeriesQueryFunction0 limit $p2, $p3 ",
    " from index 'BookingIndex' as x where x.FullName = $p0 select { FullName : x.FullName, StartDate : toStringWithFormat(x.Start, \"dd.MM.yyyy\") } ",
    " from index 'TestIndexArraysContainsAndIndexOf' where IndexOfOfMyShortArray = $p0 ",
    " from index 'TestIndexArraysContainsAndIndexOf' where ContainsOfMyCharArray = $p0 ",
    " from index 'MultiLocationsCustomFieldName' where spatial.within(someField, spatial.wkt($p0)) ",
    " from index 'TimeSeriesIndex' where CompanyName = $p0 limit $p1, $p2 ",
    " from index 'Person/ByName' where Name = $p0 ",
    " from index 'Students/ByEmailDomain' where lucene(EmailDomain, $p0) ",
    " from 'Product' limit $p0, $p1 ",
    " from 'Items' group by DoubleVal order by Count as long select count(), key() as Value ",
    " from index 'RecurseIndexWithList' ",
    " from index 'UserIndex' limit $p0, $p1 ",
    " from index 'DogsIndex' where Age <= $p0 and IsVaccinated = $p1 ",
    " from 'Items' where At > $p0 ",
    " from index 'test' select suggest(Name, $p0) ",
    " from 'EdgeCaseValues' where DateTimeOffsetMinVal = $p0 ",
    " from 'Employees' where startsWith(id(), $p0) select id() as Id, Revision limit $p1, $p2 ",
    " from index 'Orders/All' select facet(Product, sum(Total)), facet(Total < $p0, Total >= $p1 and Total < $p2, Total >= $p3 and Total < $p4, Total >= $p5, sum(Total)) ",
    " declare function output(d) {   \tvar min = d.SubDocuments.map(function(x){return x.Date;}).reduce(function(a, b) { return Raven_Min(a, b);});   \tvar max = d.SubDocuments.map(function(x){return x.Date;}).reduce(function(a, b) { return Raven_Max(a, b);});   \treturn { DateMin : (min!=null?min:d.Date), DateMax : (max!=null?max:d.Date) };   }   from 'Documents' as d select output(d) ",
    " from index 'Ent1Index' as r load r.IdEnt2 as ent2 select { Color : ent2.Color, Description : r.Description } ",
    " from index 'UserIndex' select UN, UE limit $p0, $p1 ",
    " from 'Users' where Name = $p0 and Company = $p1 ",
    " from 'Tests' where StrList = $p0 ",
    " from 'EdgeCaseValues' limit $p0, $p1 ",
    " from index 'Index' select Values, Strings limit $p0, $p1 ",
    " from index 'FormOpenByDateAndMediaSourceAndVersion' where (MediaSource = $p0) and (Version = $p1) and ((Year = $p2 and Month = $p3) and Day = $p4) limit $p5, $p6 ",
    " from index 'PeopleIndex13' limit $p0, $p1 ",
    " from index 'SampleData/Index' where Name = $p0 include 'IncludedId(IncludedDatas/)' limit $p1, $p2 ",
    " from 'Entities' limit $p0, $p1 ",
    " from index 'AnswersActivity/ByMonth' ",
    " from 'User2s' as __alias0 select __alias0.'Group'.Order as 'Order' ",
    " from 'Users' where Name = $p0 select Name ",
    " from index 'ProductIndex' order by id() ",
    " from index 'WithDynamicIndex' order by 'TixP|N1' as double select SongId, NumericAttributes limit $p0, $p1 ",
    " from index 'DocumentIndex' ",
    " from index 'PlacesByTermsAndLocation' where spatial.within(Coordinates, spatial.circle($p0, $p1, $p2)) and (lucene(Name, $p3) and lucene(Terms, $p4)) limit $p5, $p6 ",
    " from 'Users' where id() in ($p0) ",
    " from 'Documents' as doc select { False : doc.Status!==\"Success\", SecondFalse : !(doc.Status===\"Success\"), True : doc.Status===\"Success\", SecondTrue : !(doc.Status!==\"Success\") } ",
    " from index 'Search/Whitespace' where search(Name, $p0) ",
    " from index 'The/Search' where search(Query, $p0) include highlight(Query,128,1) ",
    " from 'Users' where @metadata.Test-Property-1 = $p0 ",
    " from 'Roles' select Name ",
    " from index 'test' where search(Tags, $p0) and (Name = $p1) ",
    " from index 'Dogs/Owners' where Owners = $p0 ",
    " from index 'TestIndexArraysLastIndexOf' where LastIndexOfOfMyFloatArrayWithIndexWithCount = $p0 ",
    " from index 'RecurseIndexWithISet' ",
    " from index 'MultiLocations' where spatial.within(Location, spatial.circle($p0, $p1, $p2)) ",
    " from 'Timers' where End = $p0 and User.Id = $p1 select Activity.Id ",
    " from index 'Posts/Statistics/QuerySyntax/GroupByNull' ",
    " from index 'Products/ByName' where Name != $p0 order by random() limit $p1, $p2 ",
    " from 'TestDocs' where (true and not exists(StringArray)) and SomeProperty = $p0 limit $p1, $p2 ",
    " from index 'Companies/CustomAnalyzers' where Address3 = $p0 ",
    " from 'TestEntities' where IntType > $p0 ",
    " from 'TestDocuments' ",
    " from 'Users' as u select timeseries(from u.Heartrate between $p0 and $p1) as __timeSeriesQueryFunction0 ",
    " from 'TestDocuments' where (Prop1 = $p0) and (Prop2 = $p1) limit $p2, $p3 ",
    " from 'TestClasses' where Date >= $p0 order by Date desc ",
    " from 'Tests' as x select { Value : x.Headers[\"ABC.DEF\"] } limit $p0, $p1 ",
    " from index 'TestIndexArraysLastIndexOf' where LastIndexOfOfMyShortArray = $p0 ",
    " from index 'Testing_Sort' where uid in ($p0) ",
    " from '1234' ",
    " from index 'TestIndex' where search(NameTranslations_en, $p0) ",
    " from 'Users' where Name < $p0 ",
    " from index 'UsersByNameAndIsActive' where Name = $p0 and IsActive = $p1 limit $p2, $p3 ",
    " from 'Companies' where true and not exists(SomeField) ",
    " from 'Boats' where Weight = $p0 ",
    " from index 'TestIndexArraysContainsAndIndexOf' where IndexOfOfMyStringArrayWithIndex = $p0 ",
    " from index 'TimeSeries/Index/With/CompareExchange' select City ",
    " from 'Orders' select ShipTo ",
    " from 'Clients' where ((FirstName = $p0 and LastName = $p1) and BirthDate = $p2) and Country = $p3 ",
    " from index 'Companies/ByName' select Name, ExtraField limit $p0, $p1 ",
    " from 'ThirdOutput' limit $p0, $p1 ",
    " from index 'LastAccessPerUserTicksIndex' select Name, LastAccessTicks ",
    " from index 'Animal/Index' where (Type = $p0 or search(Name, $p1) and search(Name, $p2)) ",
    " from index 'test' where search(Tags, $p0) or Name = $p1 ",
    " from 'Companies' where startsWith(Name, $p0) select distinct Name limit $p1, $p2 ",
    " from index 'Products/BySupplier' ",
    " from index 'VersionedDocuments' select Id, Version, Document ",
    " from index 'IndexName' where Name in ($p0) ",
    " from 'Users' where (Name = $p0 and LastName = $p1) and Age > $p2 ",
    " from 'Users' select suggest(Name, $p0) as NewName ",
    " from 'People' as x select { BirthDay : x.BirthDate!=null?new Date(Date.parse(x.BirthDate)).getDate():null, BirthMonth : x.BirthDate!=null?new Date(Date.parse(x.BirthDate)).getMonth()+1:null, BirthYear : x.BirthDate!=null?new Date(Date.parse(x.BirthDate)).getFullYear():null } ",
    " from index 'KmGeoIndex' where spatial.within(Location, spatial.circle($p0, $p1, $p2, 'Miles')) limit $p3, $p4 ",
    " from 'Items' group by Tags[] order by Count as long select count(), key() as Tag ",
    " from index 'DynamicIndex' ",
    " from index 'SampleSearchIndex' where NullableInt > $p0 ",
    " from index 'BlogIndex' where search(Title, $p0, and) select Title ",
    " from index 'test' where search(Name, $p0) order by Name ",
    " from index 'DocsIndex' where search(StrVal, $p0) include explanations() ",
    " from index 'SuggestionIndex' ",
    " from index 'AspectsByName' where Name = $p0 ",
    " from 'OrderItems' where Description in ($p0) ",
    " from 'Users' where id() = $p0 ",
    " from index 'People/ByName' where Name = $p0 limit $p1, $p2 ",
    " from 'Users' as u where u.Name != $p0 load u.DetailIds as details[] select { FullName : u.Name+\" \"+u.LastName, Details : details } ",
    " from 'Documents' select IdCollection.Length as IdCount ",
    " from index 'Books/Search' where boost(PrimaryTag = $p0, 4) or boost(SecondayTag = $p1, 4) select distinct Author ",
    " declare function output(o) {   \tvar TotalSpentOnOrder = function(order){return order.Lines.map(function(l){return l.PricePerUnit*l.Quantity-l.Discount;}).reduce(function(a, b) { return a + b; }, 0);};   \treturn { OrderId : id(o), TotalMoneySpent : TotalSpentOnOrder(o), CompanyName : load(o.Company).Name };   }   from 'Orders' as o select output(o) ",
    " from index 'Companies/ByName' where exact(endsWith(Name, $p0)) ",
    " from 'TestDocs' where (true and not (SomeProperty != $p0 and SomeProperty != $p1)) limit $p2, $p3 ",
    " from index 'Products/ByName' select suggest(Name, $p0, $p1) ",
    " from index 'Index' where id() = $p0 limit $p1, $p2 ",
    " from 'Users' as __alias0 select __alias0.FirstName, __alias0.'Group', counter(__alias0, likes) as Likes ",
    " from index 'RatingByCategoryIndex' ",
    " declare function output(d, $p0, $p1) {   \tvar temp = d.SubDocuments.find(function(x){return x!=null;});   \treturn { Id : id(d), TargetId : d.TargetId, Values : d.SubDocuments.filter(function(x){return $p0.length===0||$p1.indexOf(x.TargetId)>=0;}) };   }   from 'Documents' as d select output(d, $p0, $p1) ",
    " from index 'TracksIndex' order by Title as alphaNumeric select Title ",
    " from index 'SearchableElements' where PermittedUsers in ($p0) ",
    " from index 'PointIndex' where spatial.within(Point, spatial.wkt($p0)) limit $p1, $p2 ",
    " from 'Users' as u select timeseries(from u.StockPrices group by '3 Hours'   select first(), last(), min(), max(), sum(), count(), average()) as __timeSeriesQueryFunction0 limit $p0, $p1 ",
    " from index 'Document/Index' where List = $p0 ",
    " from index 'PeopleIndex1' limit $p0, $p1 ",
    " from index 'MultiMapIndexTheSameCollection' ",
    " from index 'The/Search' select suggest(Query, $p0) ",
    " from 'Users' where Age < $p0 ",
    " from index 'IndexName' where Birthday >= $p0 select Name ",
    " from 'Teams' where OwnerId = $p0 or Developers[].UserId = $p1 include OwnerId ",
    " from index 'EntityIndex' where (search(StringA, $p0) or search(StringB, $p1) or search(StringC, $p2) or search(StringD, $p3)) limit $p4, $p5 ",
    " from index 'LogEntries/Search' where search(Query, $p0) ",
    " from index 'DriversIndex' select PersonId, PersonName, CarRegistration, CarMake ",
    " from 'Users' group by Name where search(Name, $p0) select key() as Name, count() ",
    " from 'EdgeCaseValues' where DateMaxPercision = $p0 ",
    " from 'Orders' as x select { SortedLines : x.Lines.sort(function (a, b){ return a.Quantity - b.Quantity;}) } ",
    " from index 'ProviderSearchIndex2' where Name = $p0 ",
    " from index 'UsersByName' select facet(Name, sum(Count)) ",
    " from index 'MapReduceIndexReturningDictionary/QuerySyntax' ",
    " from index 'ThorIndex' ",
    " from 'MonthlyInvoices' limit $p0, $p1 ",
    " from index 'TestIndex' select Test, Properties ",
    " from 'OrderLines' group by ProductName order by TotalPricePerUnit as double select key() as NameOfProduct, sum(PricePerUnit) as TotalPricePerUnit ",
    " from 'Users' where Name in ($p0) ",
    " from 'Shipments' select id() as Id, Name limit $p0, $p1 ",
    " from index 'Posts/ByPostCategory' where moreLikeThis(id() = $p1, $p0) ",
    " from 'Companies' order by custom(Name, 'CanUseCustomSorter_2229') ",
    " from 'TestDocs' where id() in ($p0) ",
    " from index 'CgcAndProductionIndex' where CgcName = $p0 and ProductionName = $p1 ",
    " from 'PersonAndDates' where Date.Month > $p0 and Date.Month <= $p1 ",
    " from index 'Companies/ByName' where startsWith(Name, $p0) ",
    " from index 'Companies/SortByName' order by Name ",
    " from 'PersonAndDates' where Date.Hour >= $p0 ",
    " from index 'OrderByCompanyCountryIndex' as o where ShipTo_Country = $p0 select { Order : o, Company : load(o.Company) } ",
    " from index 'StringReverseIndex' ",
    " from index 'TestIndexArraysContainsAndIndexOf' where IndexOfOfMyIntArrayWithIndexWithCount = $p0 ",
    " from index 'PeopleIndex11' where Friends = $p0 limit $p1, $p2 ",
    " from index 'Ent1Index/Dynamic' as r load r.IdEnt2 as ent2 select { Color : ent2.Color, Description : r.Description, DescriptionNoStorage : r.DescriptionNoStorage } ",
    " from 'MyProfitsReferences' limit $p0, $p1 ",
    " from index 'SampleSearchIndex' where NullableInt between $p0 and $p1 ",
    " from 'DictItems' where StringDict[].Value = $p0 and StringDict[].Key = $p1 ",
    " from index 'UsersWithProductsByName' where Name = $p0 limit $p1, $p2 ",
    " from index 'Index1' where lucene(ExternalId, $p0) ",
    " from index 'CameraCost' where Megapixels > $p0 and Cost < $p1 select facet(id('facets/CameraFacets')) ",
    " from 'Users' where Name != cmpxchg($p0) ",
    " from 'EdgeCaseValues' where DateTimeOffsetMaxVal = $p0 ",
    " from index 'IndexReturningDictionary/MethodSyntax' where Age = $p0 ",
    " from index 'MyIndex' where startsWith(Bugs, $p0) and endsWith(Bugs, $p1) ",
    " from 'Test\\u0010Users' ",
    " from 'Entities' where EntityARef.Id = $p0 ",
    " from index 'FooMapReduceIndex' ",
    " from 'ObjectWithDates' where LocalDate = $p0 limit $p1, $p2 ",
    " from 'SampleDatas' where Date.DayOfWeek = $p0 ",
    " from index 'Index' as item load item.User as user, item.Roles as roles[] select { Id : id(user), Name : user.Name, Roles : roles } limit $p0, $p1 ",
    " from 'Offers' where TripId = $p0 order by Name select Name as Text, id() as Value ",
    " from index 'DataIndex' where moreLikeThis(id() = $p0) ",
    " from 'UnicodeItems' where Content = $p0 limit $p1, $p2 ",
    " from index 'TasksCount/ForPerson' ",
    " from 'TestCommodityGroups' select Name as Value, Name as Text ",
    " from index 'Companies/ByName/Reduce' select Name limit $p0, $p1 ",
    " from 'Orders' as o load o.Employee as employee, o.Company as company select employee.FirstName ",
    " from 'Items' group by name, Name order by Count as long select name, Name, count() ",
    " from 'Users' where Age > $p0 select timeseries(from Heartrate between $p2 and $p3 where (Tag == $p1) group by '1 Hours'  ) as __timeSeriesQueryFunction ",
    " from index 'IndexName' where Birthday > $p0 ",
    " declare function output(u, $p0, $p1) {   \tvar detailId = \"d\"+u.Name[1]+\"ta\"+u.LastName[4]+\"ls\"+$p0+u.DetailShortId+\"-\"+$p1;   \treturn { Name : u.Name, DetailId : detailId, Detail : load(detailId) };   }   from 'Users' as u select output(u, $p0, $p1) ",
    " from 'Companies' where fuzzy(Name = $p0, 0.99) ",
    " from index 'Foos/BarProjection' where Reminders_ReminderDue = $p0 select AdminUserId, Note, ReminderDue, FirstName, LastName, id() as Id ",
    " from index 'DocumentsIndex' where CompanyName = $p0 limit $p1, $p2 ",
    " from index 'Foos' where spatial.within(Position, spatial.circle($p0, $p1, $p2, 'Miles')) and lucene(CatId, $p3) and lucene(CatId, $p4) ",
    " from 'MultiOrders' as x select { OrderedBy : x.Info.sort(function (a, b){ return ((a.Address.City < b.Address.City) ? -1 : (a.Address.City > b.Address.City)? 1 : 0);}) } ",
    " from index 'TestIndex' where Name = $p0 limit $p1, $p2 ",
    " from index 'AnimalsByName' where startsWith(Name, $p0) ",
    " from 'Users' as x select timeseries(from x.HeartRate group by '1 days'  ) as __timeSeriesQueryFunction0 limit $p0, $p1 ",
    " from index 'EntityIndex' where ((OrganizationId = $p0 and HistoryCode = $p1) and CaseId != $p2) ",
    " from 'Orders' order by OrderedAt ",
    " from 'Foos' order by TestShort as long ",
    " from index 'PeopleIndex4' limit $p0, $p1 ",
    " from index 'TracksIndex' order by Title as alphaNumeric ",
    " from 'Documents' where Name in ($p0) ",
    " from 'People' as p select timeseries(from p.HeartRate select percentile(90)) as __timeSeriesQueryFunction0 limit $p0, $p1 ",
    " from index 'SpatialIndex' where search(Name, $p0) or search(Description, $p1) or spatial.within(Coordinates, spatial.circle($p2, $p3, $p4)) ",
    " from index 'MapReduceIndexWithCountAndCondition' ",
    " from index 'DynamicDictionaryIndex' select id() as Id, ContainsKeyResult, AnyResult, AnyWithPredicateResult, LastResult, LastOrDefaultResult, ElementAtResult, ElementAtOrDefaultResult, SkipResult, SkipLastResult, TakeResult, TakeLastResult, UnionResult, IntersectResult, PrependResult, ExceptResult, TryGetValueResult ",
    " from 'TestView2s' as x select { Dictionary : (x.Dictionary!=null?x.Dictionary:{}), DicWithInitializer : (x.Dictionary!=null?x.Dictionary:{a:\"A\",x:\"X\"}) } limit $p0, $p1 ",
    " from index 'PersonByDate' where Date_Day < $p0 ",
    " from 'Users' order by LastName.Length as long ",
    " from index 'MapReduceIndexWithNestedFieldJs2' ",
    " from 'EdgeCaseValues' where DoubleEpsilon = $p0 ",
    " from 'OrderLines' group by ProductName select key() as NameOfProduct, sum(Quantity) as OrderedQuantity ",
    " from 'GeekPeople' where search(FavoritePrimes, $p0) ",
    " from index 'PersonByDate' where Date_Ticks > $p0 ",
    " from index 'MyIndex' where spatial.within(Coordinates, spatial.circle($p0, $p1, $p2)) select id() as Id, Latitude, Longitude limit $p3, $p4 ",
    " from 'People' where Name = $p0 ",
    " from 'Documents' as x where id() = $p0 select { ItemsLength : x.Items.length, ItemsCount : x.Items.length, FailedCount : x.Items.filter(function(i){return i.Failed===true;}).length, SuccessCount : x.Items.filter(function(i){return i.Failed===false;}).length, UnknownFailedCount : x.Items.filter(function(i){return i.Failed==null;}).length, NegativeResultCount : x.Items.filter(function(i){return i.Result<0;}).length, PositiveResultCount : x.Items.filter(function(i){return i.Result>0;}).length, UnknownResultCount : x.Items.filter(function(i){return i.Result==null;}).length, ExactResultCount : x.Items.filter(function(i){return i.Result===123;}).length } limit $p1, $p2 ",
    " from index 'Auto/Users/ByName' limit $p0, $p1 ",
    " from index 'Product/ByIntAttribute' where Color > $p0 ",
    " from index 'TestIndexArraysLastIndexOf' where LastIndexOfOfMyShortArrayWithIndex = $p0 ",
    " from 'Products' ",
    " from index 'MyIndex' where AName = $p0 ",
    " from index 'SubClassIndex2' where Int = $p0 ",
    " from index 'EntityIndex' select id() as Id, SubEntities ",
    " from 'Items' where spatial.within(spatial.point(Latitude, Longitude), spatial.circle($p0, $p1, $p2)) order by spatial.distance('spatial.point(Latitude, Longitude)', spatial.point($p3, $p4)) ",
    " from 'Users' where search(id(), $p0) ",
    " from index 'SalesIndex' where IsCancelled = $p0 select facet(IsCancelled, sum(Nett)) ",
    " from index 'DocumentIndex' as doc select { Id : id(doc)+\" test\", Name : doc.Name } limit $p0, $p1 ",
    " from 'Orders' group by Lines[].Product, Lines[].Quantity select count(), Lines[].Product as ProductName, Lines[].Quantity as Quantity ",
    " from 'People' as p where id() = $p0 select timeseries(from p.HeartRate last 12 Hours offset '01:00:00') as __timeSeriesQueryFunction0 limit $p1, $p2 ",
    " from 'Locations' select id() as Id, LocationParents.Count as Depth, Name ",
    " from 'Users' as u select { Name : u.Name, Metadata : getMetadata(u), LastModified : getMetadata(u)['@last-modified'] } ",
    " from index 'UsersByNameAndAnalyzedName' where search(AnalyzedName, $p0) select AnalyzedName limit $p1, $p2 ",
    " from 'UserTalks' select Name ",
    " from index 'Product/AvailableForSale3' where lucene(Any, $p0) ",
    " from index 'Fox/Search' where proximity(search(Name, $p0), 2) ",
    " from index 'ByVehicle' where Make = $p0 ",
    " from index 'Navigation/ByNavigationId' where NavigationId = $p0 limit $p1, $p2 ",
    " from index 'Orders/All' select facet(Total < $p0, Total >= $p1 and Total < $p2, Total >= $p3 and Total < $p4, Total >= $p5, sum(Total), sum(Quantity), avg(Total)) ",
    " from index 'HouseByRent' ",
    " from 'Employees' ",
    " from index 'Companies/ByName' order by Name select Name limit $p0, $p1 ",
    " from 'PostComments' as x select { Comments : x.Comments.map(function(comment){return {comment:comment,owner:load(comment.OwnerId)};}).map(function(__rvn0){return {Id:id(__rvn0.comment),Owner:{Id:id(__rvn0.owner)}};}) } ",
    " from index 'DriversIndex' select PersonId, PersonName, CarRegistration, CarMake limit $p0, $p1 ",
    " from index 'TypedThenByIndex' select SmallestQuantity, LargestQuantity, Aggregate, AggregateWithSeed, AggregateWithSeedAndSelector, Join, GroupJoin, TakeWhile, TakeWhileIndexWithIndex, SkipWhile, SkipWhileIndexWithIndex, LongCount, LongCountWithPredicate ",
    " from 'People' as u select timeseries(from u.Heartrate between $p0 and $p1 load Tag as w group by '1 Months' , w.Accuracy  select average(), max()) as __timeSeriesQueryFunction0 limit $p2, $p3 ",
    " from index 'Product/Search' where lucene(Query, $p0) and exact(Department = $p1) limit $p2, $p3 ",
    " from index 'EntityIndex' where (((CaseId != $p0 and CaseId != $p1)) and CaseId != $p2) ",
    " from index 'Model/Info' select Name, 'Group' ",
    " from 'Documents' where id() in ($p0) select id() as Id limit $p1, $p2 ",
    " from 'Posts' limit $p0, $p1 ",
    " from index 'PaymentAll' where AmountLeft = $p0 select id() as Id, AmountLeft ",
    " from 'TestClasses' limit $p0, $p1 ",
    " from index 'CameraCost' where DateOfListing > $p0 select facet(DateOfListing < '2021-07-11T00:00:00.0000000', DateOfListing > '2021-07-11T00:00:00.0000000' AND DateOfListing < '2021-07-14T00:00:00.0000000', DateOfListing > '2021-07-14T00:00:00.0000000' AND DateOfListing < '2021-07-21T00:00:00.0000000', DateOfListing > '2021-07-21T00:00:00.0000000' AND DateOfListing < '2021-07-28T00:00:00.0000000', DateOfListing > '2021-07-28T00:00:00.0000000') ",
    " from index 'UsersAndFriends' select distinct * limit $p0, $p1 ",
    " from index 'DummyGuidList' where DummyGuid = $p0 ",
    " from 'Users' where @metadata.'Test-Property1' = $p0 ",
    " from index 'RecurseIndexWithIList' ",
    " from index 'PeopleIndex19' where FriendsCount > $p0 select NewFriends limit $p1, $p2 ",
    " from index 'AccountSearch' where PortalId = $p0 and search(Query, $p1) or search(QueryBoosted, $p2) ",
    " from 'DailyInvoices' limit $p0, $p1 ",
    " from index 'test' where RefNameNotNull = $p0 limit $p1, $p2 ",
    " from index 'Sales/ByDateProduct' ",
    " from index 'DynamicDictionaryTestMapReduceIndex' select Id, DictionarySum, DictionarySumAggregate, IdsWithDecimals, IdsWithDecimals2, OrderByDescending, IntIntDic, Items, IntIntDic2, CompleteFt, RemainingFt, TotalFt, RemainingQty, ScheduleState ",
    " from index 'Movies' where lucene(Tagline, $p0) ",
    " from index 'TestItemIndex' order by Weight desc ",
    " from 'Items' where search(Name, $p0) ",
    " from index 'TracksIndex' order by Year as long desc, Title as alphaNumeric ",
    " from index 'Products/ByCategory' ",
    " from 'Barns' where Households[].Members[].Name = $p0 ",
    " from index 'Orders/All' select facet(Total < $p0, Total >= $p1 and Total < $p2, Total >= $p3 and Total < $p4, Total >= $p5, sum(Total) as T1, sum(Total) as T2, sum(Quantity) as Q1, avg(Total) as T2) ",
    " from 'Users' where Age > $p0 select timeseries(from Heartrate between $p2 and $p3 where (Tag == $p1) group by '1h'  ) as __timeSeriesQueryFunction ",
    " from index 'User/Entity' where (CreatedDate >= $p0) and (CreatedDate <= $p1) limit $p2, $p3 ",
    " from 'People' as p where id() = $p0 select timeseries(from p.HeartRate last 12 Hours group by '1 Hours'   select min(), max(), average()) as __timeSeriesQueryFunction0 limit $p1, $p2 ",
    " from index 'Promos/Index' where spatial.within(Coordinates, spatial.circle($p0, $p1, $p2)) ",
    " from 'Foos' order by Bar as long desc ",
    " from 'MultiOrders' as x select { OrderedBy : x.Info.sort(function (a, b){ return ((a.Address.City < b.Address.City) ? -1 : (a.Address.City > b.Address.City)? 1 : 0);}) } limit $p0, $p1 ",
    " from index 'ExampleIndex' where search(Name, $p0) ",
    " from index 'IndexRows' select DataId, LineNumber ",
    " from index 'TestIndexArraysContainsAndIndexOf' where IndexOfOfMyShortArrayWithIndexWithCount = $p0 ",
    " from index 'eventsByLatLngWSpecialField' order by spatial.distance(MySpacialField, spatial.point($p0, $p1)) ",
    " from index 'PersonIndex' as p where p.LastName = $p0 load p.CompanyReference.Id as company select { PersonId : id(p), CompanyName : company.Name } limit $p1, $p2 ",
    " from index 'Companies/ByTurnover' ",
    " from index 'TranTestIndex' where startsWith(Trans_en, $p0) ",
    " from 'Users' select distinct Name ",
    " from index 'Posts/Recurse' ",
    " from index 'Users/LastLoggedInAt' ",
    " from 'Orders' where id() = $p0 ",
    " from index 'PersonsNotAnalyzed' where exact(Name in ($p0)) ",
    " from 'Users' where boost(Name = $p0, 2) or boost(Name = $p1, 3) and boost(Name = $p2, 4) or boost(Name = $p3, 5) and boost(Name = $p4, 6) ",
    " from index 'Creatives/ClickActions/1' ",
    " from index 'TestDocumentByName' as item select { Name : \"XYZ: \"+item.Name, Key : id(item).split(new RegExp(\"/\", \"g\")).slice(-1)[0] } limit $p0, $p1 ",
    " from 'Bars' where Age >= $w1p0 ",
    " from 'UserWithIDictionaries' where NestedItems[].Key = $p0 and NestedItems[].Name = $p1 ",
    " from index 'TShirtIndex' where intersect((Manufacturer = $p0), (Color = $p1 and Size = $p2), Color = $p3 and Size = $p4)  select id() as Id, Manufacturer, Color, Size ",
    " from index 'DailyActivityIndex' ",
    " from 'Orders' group by Lines[].Product select count(), key() as ProductName ",
    " from 'IndexedUsers' where Age != $p0 ",
    " from index 'CameraCost' where Megapixels < $p0 select facet(id('facets/CameraFacets')) ",
    " from index 'TestIndexArraysContainsAndIndexOf' where IndexOfOfMyFloatArray = $p0 ",
    " from 'Users' where Name = $p0 and LastName = $p1 ",
    " from 'Orders' where TotalPrice > $p0 include CustomerId ",
    " from 'Blogs' where Category = $p0 and Title.Length = $p1 ",
    " from 'Foos' where ((Bar.SomeDictionary[].Key = $p0 and Bar.SomeDictionary[].Value = $p1) or (Bar.SomeOtherDictionary[].Key = $p2 and Bar.SomeOtherDictionary[].Value = $p3)) or Bar = $p4 ",
    " from 'Points' where spatial.within(spatial.point(Latitude, Longitude), spatial.wkt($p0, 'Miles')) ",
    " from index 'TestDocumentByName' as item select { Name : \"XYZ: \"+item.Name, Docs : Object.map(item.Docs, function(v, k){ return {Val:v.SomeValue};}) } limit $p0, $p1 ",
    " from 'Users' where startsWith(id(), $p0) order by Name, LastName select Name, LastName ",
    " from index 'TestItemIndex' order by Weight as double desc limit $p0, $p1 ",
    " from index 'Index2' as c load c.OrderId as o select o ",
    " from index 'Family/MultiMapReduce' where PersonId = $p0 ",
    " from index 'TestIndexArraysContainsAndIndexOf' where IndexOfOfMyDoubleArray = $p0 ",
    " from index 'AllTimeRankingIndex' ",
    " from index 'DocIndex' where IntVal = $p0 ",
    " from index 'MyTsIndex' ",
    " from index 'test3' limit $p0, $p1 ",
    " from index 'test' select SortVersion limit $p0, $p1 ",
    " from index 'TestIndex' where FirstName in ($p0) or LastName in ($p1) ",
    " from 'Order2s' where TotalPrice > $p0 include Customer2Id ",
    " from index 'IndexName' ",
    " from index 'IndexWithArrowFunctionStaticParameter' ",
    " from index 'FindByLatLng' where spatial.within(Coordinates, spatial.circle($p0, $p1, $p2, 'Miles')) ",
    " from 'MultiOrders' as x select { SortedOrdersByDate : x.Orders.sort(function (a, b){ return ((a.OrderedAt < b.OrderedAt) ? -1 : (a.OrderedAt > b.OrderedAt)? 1 : 0);}) } limit $p0, $p1 ",
    " from 'Orders' as x select { SortedLines : x.Lines.sort(function (a, b){ return ((a.ProductName < b.ProductName) ? -1 : (a.ProductName > b.ProductName)? 1 : 0);}) } ",
    " from 'People' as p select timeseries(from p.HeartRate group by '1 Hours'   select percentile(47.34986612915521)) as __timeSeriesQueryFunction0 limit $p0, $p1 ",
    " from 'People' as u select timeseries(from u.Heartrate between $p0 and $p1 group by '1 Hours' , tag with interpolation(Linear) select max(), average()) as __timeSeriesQueryFunction0 limit $p2, $p3 ",
    " from index 'MapReduceIndexFailingOn2ndReduce' ",
    " from 'Companies' order by custom(Name, 'CanUseCustomSorter_Restart_3919') desc ",
    " from 'Companies' where Name != $p0 order by Name ",
    " from 'MKSessions' select distinct User.AnonymousId ",
    " from 'Foos' where UtcTime >= $p0 limit $p1, $p2 ",
    " from index 'Index' where Active = $p0 select facet(Category) ",
    " from 'Students' where boost(startsWith(FirstName, $p0), 3) or startsWith(LastName, $p1) order by score(), LastName ",
    " from index 'Precision' where M < $p0 limit $p1, $p2 ",
    " from index 'Users/ByActive' where Active = $p0 ",
    " from index 'MyIndex' where (true and IndexArrayProp != $p0) ",
    " from index 'PropertiesSearchIndex' where BookingRequests_StartDay >= $p0 and BookingRequests_EndDay <= $p1 select facet(id('facets/PropertySearchingFacets')) ",
    " from index 'JavaScriptIndexWith_getMetadataMethod' select Collection, ChangeVector, id() as Id, LastModified ",
    " from index 'PostCountsByUser/WithName' where startsWith(UserName, $p0) ",
    " from 'MultiOrders' as x select { OrderedBy : x.Info.sort(function (a, b){ return a.Address.ZipCode - b.Address.ZipCode;}) } ",
    " from 'Companies' where id() = $p0 select Name limit $p1, $p2 ",
    " from index 'EntityIndex' where Getter = $p0 limit $p1, $p2 ",
    " from index 'DocsIndex' where id() = $p0 ",
    " from 'Items' where (Active != $p0 and Active = $p1) ",
    " from 'Orders' group by Company select sum(Lines.Count) as LinesLength ",
    " from index 'TransportsIndex' ",
    " from 'Orders' as a select { Date : (function (date) { return new Date(date.getUTCFullYear(), date.getUTCMonth(), date.getUTCDate(), date.getUTCHours(), date.getUTCMinutes(), date.getUTCSeconds(), date.getUTCMilliseconds());})(new Date()) } ",
    " from index 'Students/WithFriends' ",
    " from 'People' as p select timeseries(from p.HeartRate group by '1 Hours'   select slope() scale 1000) as __timeSeriesQueryFunction0 limit $p0, $p1 ",
    " from index 'ItemsOrders/All' where (Items in ($p0)) and (At >= $p1) select facet(At >= $p2, At >= $p3 and At < $p4, At >= $p5 and At < $p6) ",
    " from index 'Posts/ByContent' where Text = $p0 ",
    " from index 'test2' limit $p0, $p1 ",
    " from index 'PaymentAll' where AmountLeft >= $p0 select id() as Id, AmountLeft ",
    " from index 'ItemIndex' order by Val as long select distinct Val limit $p0, $p1 ",
    " from index 'MyIndex' ",
    " from 'Users' include timeseries('HeartRateMeasures', null,null) ",
    " from 'Users' where Name = $p0 order by Age as long desc ",
    " from 'Companies' where Name = $p0 ",
    " from index 'Person/ByAge' where Age < $p0 ",
    " from 'Users' as u where u.Age > $p0 select timeseries(from u.Heartrate where (Tag == $p1) group by '1 month'   select average(), sum(), max()) as __timeSeriesQueryFunction0 ",
    " from index 'LatestBuildsIndex' as entry where (entry.ProductKey in ($p0)) and (entry.Channel in ($p1)) load entry.TeamCityBuildLocalId as __load select __load ",
    " from index 'NestedObjectIndex' limit $p0, $p1 ",
    " from index 'Foos/ByBarCount/Method' where Bars_Count = $p0 ",
    " from index 'ItemsOrders/All' where (At >= $p0) and (Items in ($p1)) select facet(At >= $p2, At >= $p3 and At < $p4, At >= $p5 and At < $p6) ",
    " from index 'CameraCost' where Cost between $p0 and $p1 select facet(DateOfListing < '2021-07-11T00:00:00.0000000', DateOfListing > '2021-07-11T00:00:00.0000000' AND DateOfListing < '2021-07-14T00:00:00.0000000', DateOfListing > '2021-07-14T00:00:00.0000000' AND DateOfListing < '2021-07-21T00:00:00.0000000', DateOfListing > '2021-07-21T00:00:00.0000000' AND DateOfListing < '2021-07-28T00:00:00.0000000', DateOfListing > '2021-07-28T00:00:00.0000000') ",
    " from 'Dummies' ",
    " from index 'DynamicMultiMapDataSetIndex' order by N1_D_Range desc limit $p0, $p1 ",
    " from 'Users' as user select { FullName : user.name+\" \"+user.lastName } ",
    " from 'TestDocs' where StringArray = $p0 limit $p1, $p2 ",
    " from index 'UserToResource/Index' where UserId = $p0 limit $p1, $p2 ",
    " from index 'FooIndex' where (DateIn != $p0 and Age < $p1) select facet(DateIn < $p2, DateIn >= $p3 and DateIn < $p4, DateIn >= $p5), facet(DateIn2 < $p6, DateIn2 >= $p7 and DateIn2 < $p8, DateIn2 >= $p9) ",
    " from index 'Orders/All' select facet(Product, sum(Total)) ",
    " from index 'test' where Name = $p0 ",
    " declare function output(x) {   \tvar test = x.Value===0;   \treturn { ShouldBeTrue : test };   }   from 'Articles' as x select output(x) ",
    " from index 'Students/ByEmailDomain' ",
    " from 'Orders' as o load $p0 as config select { OrderId : id(o), CustomerName : o.CustomerName, OrderItems : o.OrderItems.map(function(i){return {ItemId:i.ItemId,Price:i.Price,Currency:config.Currency};}) } limit $p1, $p2 ",
    " declare function output(item) {   \tvar subitems = load(item.data[\"subdata\"].map((function(c){return c;})));   \treturn { Id : id(item), data : item.data, values : subitems.reduce(function(a, b) { return a.concat((function(x){return x.data;})(b)); }, []) };   }   from 'TestableDTOs' as item select output(item) limit $p0, $p1 ",
    " from 'TestDocuments' where MyNumber = $p0 ",
    " from 'Events' ",
    " from index 'ProviderAndTaxonomyCodeIndex1' where Name = $p0 limit $p1, $p2 ",
    " from index 'ItemsBySetIdIndex' where SetId = $p0 and SoundCode = $p1 select SongId, Title, Interpret, Year, Attributes, SID, SetId, NumberOfTests, LastTestDate, LastTestId, Date ",
    " from index 'Posts/Statistics/QuerySyntax/GroupByNumber' ",
    " from 'TestObjs' as t select { res : Object.keys(t.Dict).map(function(a){return{Key: a,Value:t.Dict[a]};}).reduce(function(_obj, _cur) {_obj[(function(x){return x.Key;})(_cur)] = (function(x){return x.Value[\"b\"];})(_cur);return _obj;}, {}) } ",
    " from index 'BlogPosts/ForSearch' where search(SearchText, $p0) select id() as Id, SearchText include highlight(SearchText,128,10) ",
    " from 'TestModels' ",
    " from 'Companies' order by id() ",
    " from index 'ProjectsIndex' order by PortfolioIndex ",
    " from index 'TestIndexArraysContainsAndIndexOf' where IndexOfOfMyStringArray = $p0 ",
    " from index 'LastAccessPerName' where LastAccess = $p0 ",
    " from 'Articles' where (search(Title, $p0) or search(Description, $p1)) and IsDeleted = $p2 ",
    " from index 'FloatIndex' select id() as Id, FloatValue ",
    " from 'Users' where Items[].3 = $p0 ",
    " from 'Employees' limit $p0, $p1 ",
    " from index 'PeopleIndex6' limit $p0, $p1 ",
    " from 'Outers' where Examples = $p0 ",
    " from 'OrderLines' group by ProductName where NameOfProduct = $p0 select key() as NameOfProduct, sum(Quantity) as OrderedQuantity ",
    " from index 'UsersIndex' select facet('Group') ",
    " from index 'Index2' ",
    " from 'Users' group by Country where City = $p0 select count() ",
    " from 'Money' where Amount = $p0 ",
    " from 'TestableDTOs' as item load $p0 as subitem select { Id : id(item), data : item.data, values : subitem } limit $p1, $p2 ",
    " from index 'PersonDOBIndex' select facet(Spouse_BirthDate >= $p1 and Spouse_BirthDate < $p2, Spouse_BirthDate >= $p3 and Spouse_BirthDate < $p4, $p0) ",
    " from 'Bookings' as x where x.FirstName = $p0 select { StartDate : toStringWithFormat(x.Start) } ",
    " from index 'Index' where CustomerId = $p0 limit $p1, $p2 ",
    " from 'UserWithIDictionaries' where NestedItems.Key = $p0 and NestedItems.Value.Value > $p1 ",
    " from 'Products' group by null select sum(PricePerUnit) as TotalPrice, count() as ProductsCount ",
    " from 'IndexedUsers' where startsWith(Name, $p0) ",
    " from index 'SpatialIndex' where spatial.within(WKT, spatial.circle($p0, $p1, $p2)) limit $p3, $p4 ",
    " from index 'PaymentAll' where AmountLeft > $p0 select id() as Id, AmountLeft ",
    " from 'Users' include timeseries('speed', '0001-01-01T00:00:00.0000000', '9999-12-31T23:59:59.9999999') ",
    " from 'Docs' where search(StrVal1, $p0) and boost(search(StrVal2, $p1) or search(StrVal3, $p2), $p3) ",
    " from index 'App/WaiverWaitlistItemSearch' select Id, ScreeningDate, ClientId, LastName, GroupNumber ",
    " from index 'Client/ImportSummaryByDate/1' order by Date ",
    " from '@all_docs' ",
    " from 'Users' where Name = $p0 ",
    " from 'Users' as u select { CmpXngValue : cmpxchg(u.Name) } limit $p0, $p1 ",
    " from index 'MilesGeoIndex' where spatial.within(Location, spatial.circle($p0, $p1, $p2)) limit $p3, $p4 ",
    " from index 'Foos/TestIndex' where Read = $p0 ",
    " from index 'TestIndexArraysLastIndexOf' where LastIndexOfOfMyIntArrayWithIndex = $p0 ",
    " from 'BlogPosts' where id() in ($p0) select Name ",
    " from 'EventsWithDates' where CreationTime = $p0 ",
    " from index 'Movies' where lucene(Name, $p0) ",
    " from 'Cars' where Color = $p0 ",
    " from index 'CatsAndDogs' where Name = $p0 ",
    " from '@all_docs' where Name = $p0 ",
    " from index 'UsersByPhones' where Phone = $p0 limit $p1, $p2 ",
    " from index 'CameraCost' select facet(id('facets/CameraFacets')) ",
    " from index 'Customers/ByName' select Name, Address as OtherThanName, Address as OtherThanName2, Name as AnotherOtherThanName limit $p0, $p1 ",
    " from 'Users' where boost(Name = $p0, 2) or boost(Name = $p1, 3) or boost(Name = $p2, 4) or boost(Name = $p3, 5) or boost(Name = $p4, 6) ",
    " from 'Companies' where startsWith(Name, $p0) select Name ",
    " from index 'BlogPostWithAverageRatingAll' ",
    " from index 'PeopleIndex21' limit $p0, $p1 ",
    " from 'Aspects' ",
    " from index 'Users/PermissionsByUser' ",
    " from 'Bookings' as x where x.FirstName = $p0 select { StartDate : toStringWithFormat(x.Start, \"dd.MM.yyyy\", \"en-US\") } ",
    " from index 'JsIndex' ",
    " from index 'AverageHeartRate' ",
    " from 'Users' where Age > $p0 select Name ",
    " from index 'ThingIndex2' where Name = $p0 ",
    " from 'ModelWithEnums' where NullableCategory = $p0 limit $p1, $p2 ",
    " from index 'DistinctSelectOrderBySumMapReduceIndex' select Id, SelectSum, OrderBySum, IdsWithDecimals, OrderByDescending, Items ",
    " from 'Orders' as o load o.Employee as employee select employee.FirstName ",
    " from index 'DateTime' where TimeOfDay > $p0 ",
    " from 'IdentityUsers' limit $p0, $p1 ",
    " from index 'DataIndex' where moreLikeThis(id() = $p1, $p0) ",
    " declare function output(d, $p1, $p2) {   \tvar doc = d.SubDocuments.find(function(x){return id(x)===\"testing\";});   \treturn { Id : id(d), Deleted : d.Deleted, SubTestId : doc!=null?id(doc):null, Values : d.SubDocuments.filter(function(x){return $p1.length===0||$p2.indexOf(x.TargetId)>=0;}).map(function(x){return {TargetId:x.TargetId,TargetValue:x.TargetValue,SubDocuments:x.SubDocuments.filter(function(s){return s!=null;}).map(function(s){return {TargetId:s.TargetId,TargetValue:s.TargetValue};})};}) };   }   from 'Documents' as d where id() = $p0 select output(d, $p1, $p2) ",
    " from 'People' ",
    " from 'Orders' order by ShipTo.Country ",
    " declare function output(membership) {   \tvar organizationId = \"organizations/1\";   \tvar organization = load(organizationId);   \tvar userGroups = load(membership.UserGroups).filter(function(x){return x.Organization===organizationId;});   \treturn { Id : id(membership), Organization : id(organization), UserGroups : userGroups.map(function(x){return id(x);}) };   }   from index 'MembershipIndex' as membership select output(membership) ",
    " from 'Foos' where ExpirationTime = $p0 or (ExpirationTime > $p1 and ExpirationTime != $p2) ",
    " from 'Bookings' as x where x.FirstName = $p0 select { StartDate : toStringWithFormat(x.Start, \"dd.MM.yyyy\", \"en-US\") } limit $p1, $p2 ",
    " from index 'Itineraries/ByAll' where ((DepartureAirportCode = $p0 and ArrivalAirportCode = $p1) and TotalDistance >= $p2) and TotalDistance <= $p3 select facet(DepartureAirportCode, avg(TotalDistance)) ",
    " match (Person as f)-[Relationships as r select r.TargetId]->(Person as t) ",
    " from index 'BBoxIndex' where spatial.disjoint(Shape, spatial.wkt($p0)) limit $p1, $p2 ",
    " from index 'Person/Id/Index' select id() as Id, UserId, Family_Dad_Id ",
    " from 'People' as p where id() = $p0 select timeseries(from p.HeartRate last 12 Hours where (Tag == $p1) group by '1 Hours'   select min(), max(), average()) as __timeSeriesQueryFunction0 limit $p2, $p3 ",
    " from 'Foos' order by Integer as long ",
    " from index 'Shapes/SpatialIndex' where spatial.within(Bbox, spatial.wkt($p0)) ",
    " from index 'FooIndex' where (DateIn != $p0 and Age < $p1) select facet(DateIn < $p2, DateIn >= $p3 and DateIn < $p4, DateIn >= $p5) ",
    " from 'As' include Bs ",
    " from index 'DocsIndex' where search(StrVal, $p1) include explanations($p0) ",
    " from 'MyDocs' as d select { HasValue : d.NullableInt>0||d.NullableInt===0 } ",
    " from 'DataContractClasses' where n = $p0 limit $p1, $p2 ",
    " from index 'Orders/All' select facet(Product, max(Total), min(Total)) ",
    " from index 'CameraCost' where Cost between $p0 and $p1 select facet(Manufacturer), facet(Cost <= $p2, Cost between $p3 and $p4, Cost between $p5 and $p6, Cost between $p7 and $p8, Cost >= $p9), facet(Megapixels <= $p10, Megapixels between $p11 and $p12, Megapixels between $p13 and $p14, Megapixels >= $p15) ",
    " from index 'UserToResource/Index' where Name = $p0 limit $p1, $p2 ",
    " from index 'DocIndex' where (StrVal = $p0 or StrVal = $p1) or StrVal = $p2 ",
    " from index 'ContentSearchIndex' where boost(search(Title, $p2), 12) or search(Content, $p3) include highlight(Title,128,2,$p0),highlight(Content,128,2,$p1) ",
    " from 'Users' as u where u.Name = $p0 select counter(u, Downloads) as Downloads limit $p1, $p2 ",
    " from index 'BarSearchIndex' where Number between $p0 and $p1 select FooName, Number ",
    " from index 'Companies/ByName' include cmpxchg('ExternalId') ",
    " from index 'Orders/All' select facet(Product, sum(Total)), facet(Currency, sum(Total)) ",
    " from 'Bookings' as x where x.FirstName = $p0 select { Number : toStringWithFormat(x.Number, \"000\") } limit $p1, $p2 ",
    " from 'Users' select Name, \"bob\" as Friend, 65 as Age ",
    " from index 'TestIndexArraysContainsAndIndexOf' where ContainsOfMyStringArray = $p0 ",
    " from index 'Person/Id/Index' where search(Family_Dad_Id, $p0) ",
    " from index 'Posts/Statistics/QuerySyntax/GroupByTrue' ",
    " from 'Items' select After, Before ",
    " from index 'Post/ByTag' where Tag = $p0 order by Title limit $p1, $p2 ",
    " from 'Bookings' as x where x.FirstName = $p0 select { Number : toStringWithFormat(x.Number, \"000\", \"en-US\") } limit $p1, $p2 ",
    " from index 'Index/test2' ",
    " from 'Foos' order by Start as long ",
    " from 'Blogs' where search(Title, $p2) or search(Category, $p3) include highlight(Title,18,2,$p0),highlight(Category,18,2,$p1) ",
    " from index 'DeviceInfoIndexMapReduce' ",
    " from index 'TestIndexArraysLastIndexOf' where LastIndexOfOfMyStringArray = $p0 ",
    " from 'EntityWithArrays' where Strings all in ($p0) ",
    " from index 'Events/SpatialIndex' select Name, Latitude, Longitude ",
    " from index 'TShirtNested' where intersect(Name = $p0, Types_Color = $p1 and Types_Size = $p2, Types_Color = $p3 and Types_Size = $p4)  order by BarcodeNumber limit $p5, $p6 ",
    " from index 'ProfileByName' where lucene(Name, $p0) ",
    " from 'Orders' select ShipTo as Address ",
    " from 'BlogPosts' where Tags = $p0 ",
    " from index 'Profits/Monthly/Loading/MyProfitsReferences' order by ProfitValue as double ",
    " from 'Companies' order by custom(Name, 'CanUseCustomSorter_Restart_Faulty_3017') ",
    " from 'Providers' where Name = $p0 ",
    " from index 'Index1' select SomeDate limit $p0, $p1 ",
    " from 'TestView2s' as x select { emptyList : (x.Children!=null?x.Children:[]) } limit $p0, $p1 ",
    " from index 'Place/ByLocationAndCategoryId' where Categories_Id = $p0 limit $p1, $p2 ",
    " from 'Users' where boost(Name = $p0, 2) or boost(Name = $p1, 3) or boost(Name = $p2, 4) and boost(Name = $p3, 5) and boost(Name = $p4, 6) ",
    " from index 'Contract/ToContractListViewModel' select Cno, DetailsId, Grade, id() as Id ",
    " from 'Orders' as o load o.CategoryListId as categoryList select { Id : id(o), Items : o.OrderItems.map(function(i){return {i:i,cat:categoryList.Categories};}).map(function(__rvn0){return {__rvn0:__rvn0,id:__rvn0.i.CategoryId};}).map(function(__rvn1){return {__rvn1:__rvn1,first:__rvn1.__rvn0.cat.find(function(x){return id(x)===__rvn1.id;})};}).map(function(__rvn2){return {__rvn2:__rvn2,name:__rvn2.first.Name};}).map(function(__rvn3){return {CategoryName:__rvn3.name};}) } ",
    " from 'People' as u select timeseries(from u.Heartrate between $p0 and $p1 load Tag as w group by '1 Months' , w.Prizes  select average(), max()) as __timeSeriesQueryFunction0 limit $p2, $p3 ",
    " from index 'ByLineCost' where Cost > $p0 select Cost ",
    " from 'Users' order by Name ",
    " from 'StrategyIndividuals' where Statistcs.4 = $p0 order by Statistcs.4 as double ",
    " from index 'FooIndex' select facet(Age < $p0, Age >= $p1), facet(Long > $p2 and Long < $p3, Long >= $p4), facet(Float > $p5 and Float < $p6, Float >= $p7), facet(Double > $p8 and Double < $p9, Double >= $p10), facet(Decimal < $p11, Decimal >= $p12 and Decimal < $p13) ",
    " from index 'Buyers/Search' order by NameForSorting desc ",
    " from 'Users' where Logins[].OpenIdIdentifier = $p0 limit $p1, $p2 ",
    " from index 'PersonByDate' where Date_Second = $p0 ",
    " from index 'PersonsIndex' where Name = $p0 select facet(Age1), facet(Age2), facet(Age3), facet(Age4), facet(Age5), facet(Age6), facet(Age7), facet(Age8), facet(Age9), facet(Age10), facet(Age11), facet(Age12), facet(Age13), facet(Age14), facet(Age15), facet(Age16), facet(Age17), facet(Age18), facet(Age19), facet(Age20), facet(Age21), facet(Age22), facet(Age23), facet(Age24), facet(Age25), facet(Age26), facet(Age27), facet(Age28), facet(Age29), facet(Age30), facet(Age31), facet(Age32), facet(Age33), facet(Age34), facet(Age35), facet(Age36), facet(Age37), facet(Age38), facet(Age39), facet(Age40), facet(Age41), facet(Age42), facet(Age43), facet(Age44), facet(Age45), facet(Age46), facet(Age47), facet(Age48), facet(Age49), facet(Age50), facet(Age51), facet(Age52), facet(Age53), facet(Age54), facet(Age55), facet(Age56), facet(Age57), facet(Age58), facet(Age59), facet(Age60), facet(Age61), facet(Age62), facet(Age63), facet(Age64), facet(Age65), facet(Age66), facet(Age67), facet(Age68), facet(Age69), facet(Age70), facet(Age71), facet(Age72), facet(Age73), facet(Age74), facet(Age75), facet(Age76), facet(Age77), facet(Age78), facet(Age79), facet(Age80), facet(Age81), facet(Age82), facet(Age83), facet(Age84), facet(Age85), facet(Age86), facet(Age87), facet(Age88), facet(Age89), facet(Age90), facet(Age91), facet(Age92), facet(Age93), facet(Age94), facet(Age95), facet(Age96), facet(Age97), facet(Age98), facet(Age99), facet(Age100), facet(Age101), facet(Age102), facet(Age103), facet(Age104), facet(Age105), facet(Age106), facet(Age107), facet(Age108), facet(Age109), facet(Age110), facet(Age111), facet(Age112), facet(Age113), facet(Age114), facet(Age115), facet(Age116), facet(Age117), facet(Age118), facet(Age119), facet(Age120), facet(Age121), facet(Age122), facet(Age123), facet(Age124), facet(Age125), facet(Age126), facet(Age127), facet(Age128), facet(Age129), facet(Age130), facet(Age131), facet(Age132), facet(Age133), facet(Age134), facet(Age135), facet(Age136), facet(Age137), facet(Age138), facet(Age139), facet(Age140), facet(Age141), facet(Age142), facet(Age143), facet(Age144), facet(Age145), facet(Age146), facet(Age147), facet(Age148), facet(Age149), facet(Age150), facet(Age151), facet(Age152), facet(Age153), facet(Age154), facet(Age155), facet(Age156), facet(Age157), facet(Age158), facet(Age159), facet(Age160), facet(Age161), facet(Age162), facet(Age163), facet(Age164), facet(Age165), facet(Age166), facet(Age167), facet(Age168), facet(Age169), facet(Age170), facet(Age171), facet(Age172), facet(Age173), facet(Age174), facet(Age175), facet(Age176), facet(Age177), facet(Age178), facet(Age179), facet(Age180), facet(Age181), facet(Age182), facet(Age183), facet(Age184), facet(Age185), facet(Age186), facet(Age187), facet(Age188), facet(Age189), facet(Age190), facet(Age191), facet(Age192), facet(Age193), facet(Age194), facet(Age195), facet(Age196), facet(Age197), facet(Age198), facet(Age199), facet(Age200) ",
    " from 'EdgeCaseValues' where DecimalMinVal = $p0 ",
    " from index 'Services/QueryIndex' ",
    " from 'MyEntities' where StringData = $p0 limit $p1, $p2 ",
    " from index 'Companies/ByUnknown/WithIndexMissingFieldsAsNull' where Unknown = $p0 ",
    " from index 'Index1' as c load c.OrderId as o select o limit $p0, $p1 ",
    " with {from 'Friends'} as F1   with {from 'Friends'} as F2   with edges(Friends) {where FriendsSince >= '2020-08-10T12:42:55.4827944Z' select FriendId}  as L1   match (F1)-[L1]->(F2) ",
    " from 'Items' where spatial.within(spatial.point(Latitude, Longitude), spatial.circle($p0, $p1, $p2)) ",
    " from index 'Users/ByDisplayNameReversed' where startsWith(DisplayNameReversed, $p0) ",
    " from 'RavenDocuments' as d where id() = $p0 select { SubDocResults : d.SubDocs.sort(function (a, b){ return b.Value - a.Value;}).filter(function(s){return s.Value>1;}).map(function(s){return {Val:s.Value,Date:s.Date};}) } ",
    " from index 'test' where (exists(Tags) and not search(Tags, $p0)) or Name = $p1 ",
    " from index 'UsersByName' where Name = cmpxchg($p0) limit $p1, $p2 ",
    " from index 'ThingIndex' where Name = $p0 "
]
